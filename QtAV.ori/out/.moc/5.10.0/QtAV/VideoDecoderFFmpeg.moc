/****************************************************************************
** Meta object code from reading C++ file 'VideoDecoderFFmpeg.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.10.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'VideoDecoderFFmpeg.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.10.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_QtAV__VideoDecoderFFmpeg_t {
    QByteArrayData data[51];
    char stringdata0[472];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_QtAV__VideoDecoderFFmpeg_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_QtAV__VideoDecoderFFmpeg_t qt_meta_stringdata_QtAV__VideoDecoderFFmpeg = {
    {
QT_MOC_LITERAL(0, 0, 24), // "QtAV::VideoDecoderFFmpeg"
QT_MOC_LITERAL(1, 25, 16), // "codecNameChanged"
QT_MOC_LITERAL(2, 42, 0), // ""
QT_MOC_LITERAL(3, 43, 14), // "hwaccelChanged"
QT_MOC_LITERAL(4, 58, 9), // "codecName"
QT_MOC_LITERAL(5, 68, 7), // "hwaccel"
QT_MOC_LITERAL(6, 76, 16), // "skip_loop_filter"
QT_MOC_LITERAL(7, 93, 11), // "DiscardType"
QT_MOC_LITERAL(8, 105, 9), // "skip_idct"
QT_MOC_LITERAL(9, 115, 10), // "skip_frame"
QT_MOC_LITERAL(10, 126, 7), // "threads"
QT_MOC_LITERAL(11, 134, 11), // "thread_type"
QT_MOC_LITERAL(12, 146, 11), // "ThreadFlags"
QT_MOC_LITERAL(13, 158, 5), // "vismv"
QT_MOC_LITERAL(14, 164, 20), // "MotionVectorVisFlags"
QT_MOC_LITERAL(15, 185, 10), // "StrictType"
QT_MOC_LITERAL(16, 196, 4), // "Very"
QT_MOC_LITERAL(17, 201, 6), // "Strict"
QT_MOC_LITERAL(18, 208, 6), // "Normal"
QT_MOC_LITERAL(19, 215, 10), // "Unofficial"
QT_MOC_LITERAL(20, 226, 12), // "Experimental"
QT_MOC_LITERAL(21, 239, 4), // "None"
QT_MOC_LITERAL(22, 244, 7), // "Default"
QT_MOC_LITERAL(23, 252, 5), // "NoRef"
QT_MOC_LITERAL(24, 258, 5), // "Bidir"
QT_MOC_LITERAL(25, 264, 5), // "NoKey"
QT_MOC_LITERAL(26, 270, 3), // "All"
QT_MOC_LITERAL(27, 274, 10), // "ThreadFlag"
QT_MOC_LITERAL(28, 285, 11), // "DefaultType"
QT_MOC_LITERAL(29, 297, 5), // "Slice"
QT_MOC_LITERAL(30, 303, 5), // "Frame"
QT_MOC_LITERAL(31, 309, 19), // "MotionVectorVisFlag"
QT_MOC_LITERAL(32, 329, 2), // "No"
QT_MOC_LITERAL(33, 332, 2), // "PF"
QT_MOC_LITERAL(34, 335, 2), // "BF"
QT_MOC_LITERAL(35, 338, 2), // "BB"
QT_MOC_LITERAL(36, 341, 7), // "BugFlag"
QT_MOC_LITERAL(37, 349, 10), // "autodetect"
QT_MOC_LITERAL(38, 360, 10), // "xvid_ilace"
QT_MOC_LITERAL(39, 371, 4), // "ump4"
QT_MOC_LITERAL(40, 376, 10), // "no_padding"
QT_MOC_LITERAL(41, 387, 3), // "amv"
QT_MOC_LITERAL(42, 391, 11), // "qpel_chroma"
QT_MOC_LITERAL(43, 403, 8), // "std_qpel"
QT_MOC_LITERAL(44, 412, 16), // "direct_blocksize"
QT_MOC_LITERAL(45, 429, 4), // "edge"
QT_MOC_LITERAL(46, 434, 11), // "hpel_chroma"
QT_MOC_LITERAL(47, 446, 7), // "dc_clip"
QT_MOC_LITERAL(48, 454, 2), // "ms"
QT_MOC_LITERAL(49, 457, 5), // "trunc"
QT_MOC_LITERAL(50, 463, 8) // "BugFlags"

    },
    "QtAV::VideoDecoderFFmpeg\0codecNameChanged\0"
    "\0hwaccelChanged\0codecName\0hwaccel\0"
    "skip_loop_filter\0DiscardType\0skip_idct\0"
    "skip_frame\0threads\0thread_type\0"
    "ThreadFlags\0vismv\0MotionVectorVisFlags\0"
    "StrictType\0Very\0Strict\0Normal\0Unofficial\0"
    "Experimental\0None\0Default\0NoRef\0Bidir\0"
    "NoKey\0All\0ThreadFlag\0DefaultType\0Slice\0"
    "Frame\0MotionVectorVisFlag\0No\0PF\0BF\0"
    "BB\0BugFlag\0autodetect\0xvid_ilace\0ump4\0"
    "no_padding\0amv\0qpel_chroma\0std_qpel\0"
    "direct_blocksize\0edge\0hpel_chroma\0"
    "dc_clip\0ms\0trunc\0BugFlags"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_QtAV__VideoDecoderFFmpeg[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       2,   14, // methods
       8,   26, // properties
       8,   58, // enums/sets
       0,    0, // constructors
       0,       // flags
       2,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,   24,    2, 0x06 /* Public */,
       3,    0,   25,    2, 0x06 /* Public */,

 // signals: parameters
    QMetaType::Void,
    QMetaType::Void,

 // properties: name, type, flags
       4, QMetaType::QString, 0x00495103,
       5, QMetaType::QString, 0x00495103,
       6, 0x80000000 | 7, 0x0009500b,
       8, 0x80000000 | 7, 0x0009500b,
       9, 0x80000000 | 7, 0x0009500b,
      10, QMetaType::Int, 0x00095103,
      11, 0x80000000 | 12, 0x0009500b,
      13, 0x80000000 | 14, 0x0009500b,

 // properties: notify_signal_id
       0,
       1,
       0,
       0,
       0,
       0,
       0,
       0,

 // enums: name, flags, count, data
      15, 0x0,    5,   90,
       7, 0x0,    6,  100,
      27, 0x0,    3,  112,
      12, 0x1,    3,  118,
      31, 0x0,    4,  124,
      14, 0x1,    4,  132,
      36, 0x0,   13,  140,
      50, 0x1,   13,  166,

 // enum data: key, value
      16, uint(QtAV::VideoDecoderFFmpeg::Very),
      17, uint(QtAV::VideoDecoderFFmpeg::Strict),
      18, uint(QtAV::VideoDecoderFFmpeg::Normal),
      19, uint(QtAV::VideoDecoderFFmpeg::Unofficial),
      20, uint(QtAV::VideoDecoderFFmpeg::Experimental),
      21, uint(QtAV::VideoDecoderFFmpeg::None),
      22, uint(QtAV::VideoDecoderFFmpeg::Default),
      23, uint(QtAV::VideoDecoderFFmpeg::NoRef),
      24, uint(QtAV::VideoDecoderFFmpeg::Bidir),
      25, uint(QtAV::VideoDecoderFFmpeg::NoKey),
      26, uint(QtAV::VideoDecoderFFmpeg::All),
      28, uint(QtAV::VideoDecoderFFmpeg::DefaultType),
      29, uint(QtAV::VideoDecoderFFmpeg::Slice),
      30, uint(QtAV::VideoDecoderFFmpeg::Frame),
      28, uint(QtAV::VideoDecoderFFmpeg::DefaultType),
      29, uint(QtAV::VideoDecoderFFmpeg::Slice),
      30, uint(QtAV::VideoDecoderFFmpeg::Frame),
      32, uint(QtAV::VideoDecoderFFmpeg::No),
      33, uint(QtAV::VideoDecoderFFmpeg::PF),
      34, uint(QtAV::VideoDecoderFFmpeg::BF),
      35, uint(QtAV::VideoDecoderFFmpeg::BB),
      32, uint(QtAV::VideoDecoderFFmpeg::No),
      33, uint(QtAV::VideoDecoderFFmpeg::PF),
      34, uint(QtAV::VideoDecoderFFmpeg::BF),
      35, uint(QtAV::VideoDecoderFFmpeg::BB),
      37, uint(QtAV::VideoDecoderFFmpeg::autodetect),
      38, uint(QtAV::VideoDecoderFFmpeg::xvid_ilace),
      39, uint(QtAV::VideoDecoderFFmpeg::ump4),
      40, uint(QtAV::VideoDecoderFFmpeg::no_padding),
      41, uint(QtAV::VideoDecoderFFmpeg::amv),
      42, uint(QtAV::VideoDecoderFFmpeg::qpel_chroma),
      43, uint(QtAV::VideoDecoderFFmpeg::std_qpel),
      44, uint(QtAV::VideoDecoderFFmpeg::direct_blocksize),
      45, uint(QtAV::VideoDecoderFFmpeg::edge),
      46, uint(QtAV::VideoDecoderFFmpeg::hpel_chroma),
      47, uint(QtAV::VideoDecoderFFmpeg::dc_clip),
      48, uint(QtAV::VideoDecoderFFmpeg::ms),
      49, uint(QtAV::VideoDecoderFFmpeg::trunc),
      37, uint(QtAV::VideoDecoderFFmpeg::autodetect),
      38, uint(QtAV::VideoDecoderFFmpeg::xvid_ilace),
      39, uint(QtAV::VideoDecoderFFmpeg::ump4),
      40, uint(QtAV::VideoDecoderFFmpeg::no_padding),
      41, uint(QtAV::VideoDecoderFFmpeg::amv),
      42, uint(QtAV::VideoDecoderFFmpeg::qpel_chroma),
      43, uint(QtAV::VideoDecoderFFmpeg::std_qpel),
      44, uint(QtAV::VideoDecoderFFmpeg::direct_blocksize),
      45, uint(QtAV::VideoDecoderFFmpeg::edge),
      46, uint(QtAV::VideoDecoderFFmpeg::hpel_chroma),
      47, uint(QtAV::VideoDecoderFFmpeg::dc_clip),
      48, uint(QtAV::VideoDecoderFFmpeg::ms),
      49, uint(QtAV::VideoDecoderFFmpeg::trunc),

       0        // eod
};

void QtAV::VideoDecoderFFmpeg::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        VideoDecoderFFmpeg *_t = static_cast<VideoDecoderFFmpeg *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->codecNameChanged(); break;
        case 1: _t->hwaccelChanged(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        {
            typedef void (VideoDecoderFFmpeg::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&VideoDecoderFFmpeg::codecNameChanged)) {
                *result = 0;
                return;
            }
        }
        {
            typedef void (VideoDecoderFFmpeg::*_t)();
            if (*reinterpret_cast<_t *>(_a[1]) == static_cast<_t>(&VideoDecoderFFmpeg::hwaccelChanged)) {
                *result = 1;
                return;
            }
        }
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty) {
        VideoDecoderFFmpeg *_t = static_cast<VideoDecoderFFmpeg *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QString*>(_v) = _t->codecName(); break;
        case 1: *reinterpret_cast< QString*>(_v) = _t->hwaccel(); break;
        case 2: *reinterpret_cast< DiscardType*>(_v) = _t->skipLoopFilter(); break;
        case 3: *reinterpret_cast< DiscardType*>(_v) = _t->skipIDCT(); break;
        case 4: *reinterpret_cast< DiscardType*>(_v) = _t->skipFrame(); break;
        case 5: *reinterpret_cast< int*>(_v) = _t->threads(); break;
        case 6: *reinterpret_cast<int*>(_v) = QFlag(_t->threadFlags()); break;
        case 7: *reinterpret_cast<int*>(_v) = QFlag(_t->motionVectorVisFlags()); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
        VideoDecoderFFmpeg *_t = static_cast<VideoDecoderFFmpeg *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: _t->setCodecName(*reinterpret_cast< QString*>(_v)); break;
        case 1: _t->setHwaccel(*reinterpret_cast< QString*>(_v)); break;
        case 2: _t->setSkipLoopFilter(*reinterpret_cast< DiscardType*>(_v)); break;
        case 3: _t->setSkipIDCT(*reinterpret_cast< DiscardType*>(_v)); break;
        case 4: _t->setSkipFrame(*reinterpret_cast< DiscardType*>(_v)); break;
        case 5: _t->setThreads(*reinterpret_cast< int*>(_v)); break;
        case 6: _t->setThreadFlags(QFlag(*reinterpret_cast<int*>(_v))); break;
        case 7: _t->setMotionVectorVisFlags(QFlag(*reinterpret_cast<int*>(_v))); break;
        default: break;
        }
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
    Q_UNUSED(_a);
}

const QMetaObject QtAV::VideoDecoderFFmpeg::staticMetaObject = {
    { &VideoDecoderFFmpegBase::staticMetaObject, qt_meta_stringdata_QtAV__VideoDecoderFFmpeg.data,
      qt_meta_data_QtAV__VideoDecoderFFmpeg,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *QtAV::VideoDecoderFFmpeg::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *QtAV::VideoDecoderFFmpeg::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_QtAV__VideoDecoderFFmpeg.stringdata0))
        return static_cast<void*>(this);
    return VideoDecoderFFmpegBase::qt_metacast(_clname);
}

int QtAV::VideoDecoderFFmpeg::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = VideoDecoderFFmpegBase::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 2)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 2;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 2)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 2;
    }
#ifndef QT_NO_PROPERTIES
   else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 8;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 8;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 8;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 8;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 8;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 8;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}

// SIGNAL 0
void QtAV::VideoDecoderFFmpeg::codecNameChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void QtAV::VideoDecoderFFmpeg::hwaccelChanged()
{
    QMetaObject::activate(this, &staticMetaObject, 1, nullptr);
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
