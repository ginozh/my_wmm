!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS	.\libass\ass_fontselect.c	50;"	d	file:
ADD_BITMAPS	.\libass\x86\blend_bitmaps.asm	/^ADD_BITMAPS$/;"	l
ALIAS	.\libass\ass.c	244;"	d	file:
ALIGN	.\libass\ass_bitmap.c	39;"	d	file:
ALIGN	.\libass\ass_bitmap.c	42;"	d	file:
ALIGN	.\libass\ass_bitmap.c	47;"	d	file:
ALIGN	.\libass\ass_bitmap.c	50;"	d	file:
ALIGN	.\libass\ass_bitmap.c	53;"	d	file:
ALIGN	.\libass\ass_bitmap.c	56;"	d	file:
ANYVAL	.\libass\ass.c	260;"	d	file:
ASS_CORETEXT_H	.\libass\ass_coretext.h	23;"	d
ASS_DIRECTWRITE_H	.\libass\ass_directwrite.h	23;"	d
ASS_DRect	.\libass\ass_outline.h	/^} ASS_DRect;$/;"	t	typeref:struct:__anon33
ASS_DVector	.\libass\ass_outline.h	/^} ASS_DVector;$/;"	t	typeref:struct:__anon31
ASS_DefaultFontProvider	.\libass\ass.h	/^} ASS_DefaultFontProvider;$/;"	t	typeref:enum:__anon6
ASS_Drawing	.\libass\ass_drawing.h	/^} ASS_Drawing;$/;"	t	typeref:struct:__anon25
ASS_DrawingToken	.\libass\ass_drawing.h	/^} ASS_DrawingToken;$/;"	t	typeref:struct:ass_drawing_token
ASS_Event	.\libass\ass_types.h	/^} ASS_Event;$/;"	t	typeref:struct:ass_event
ASS_FONTCONFIG_H	.\libass\ass_fontconfig.h	23;"	d
ASS_FONTPROVIDER_AUTODETECT	.\libass\ass.h	/^    ASS_FONTPROVIDER_AUTODETECT = 1,$/;"	e	enum:__anon6
ASS_FONTPROVIDER_CORETEXT	.\libass\ass.h	/^    ASS_FONTPROVIDER_CORETEXT,$/;"	e	enum:__anon6
ASS_FONTPROVIDER_DIRECTWRITE	.\libass\ass.h	/^    ASS_FONTPROVIDER_DIRECTWRITE,$/;"	e	enum:__anon6
ASS_FONTPROVIDER_FONTCONFIG	.\libass\ass.h	/^    ASS_FONTPROVIDER_FONTCONFIG,$/;"	e	enum:__anon6
ASS_FONTPROVIDER_NONE	.\libass\ass.h	/^    ASS_FONTPROVIDER_NONE       = 0,$/;"	e	enum:__anon6
ASS_FONT_MAX_FACES	.\libass\ass_font.h	37;"	d
ASS_Font	.\libass\ass_font.h	/^typedef struct ass_font ASS_Font;$/;"	t	typeref:struct:ass_font
ASS_FontDesc	.\libass\ass_font.h	/^typedef struct ass_font_desc ASS_FontDesc;$/;"	t	typeref:struct:ass_font_desc
ASS_FontInfo	.\libass\ass_fontselect.h	/^typedef struct font_info ASS_FontInfo;$/;"	t	typeref:struct:font_info
ASS_FontMapping	.\libass\ass_fontselect.h	/^typedef struct ass_font_mapping ASS_FontMapping;$/;"	t	typeref:struct:ass_font_mapping
ASS_FontProvider	.\libass\ass_fontselect.h	/^typedef struct font_provider ASS_FontProvider;$/;"	t	typeref:struct:font_provider
ASS_FontProviderFuncs	.\libass\ass_fontselect.h	/^} ASS_FontProviderFuncs;$/;"	t	typeref:struct:font_provider_funcs
ASS_FontProviderMetaData	.\libass\ass_fontselect.h	/^typedef struct ass_font_provider_meta_data ASS_FontProviderMetaData;$/;"	t	typeref:struct:ass_font_provider_meta_data
ASS_FontSelector	.\libass\ass_fontselect.h	/^typedef struct font_selector ASS_FontSelector;$/;"	t	typeref:struct:font_selector
ASS_FontStream	.\libass\ass_fontselect.h	/^typedef struct ass_font_stream ASS_FontStream;$/;"	t	typeref:struct:ass_font_stream
ASS_Fontdata	.\libass\ass_library.h	/^} ASS_Fontdata;$/;"	t	typeref:struct:__anon26
ASS_HINTING_LIGHT	.\libass\ass.h	/^    ASS_HINTING_LIGHT,$/;"	e	enum:__anon3
ASS_HINTING_NATIVE	.\libass\ass.h	/^    ASS_HINTING_NATIVE$/;"	e	enum:__anon3
ASS_HINTING_NONE	.\libass\ass.h	/^    ASS_HINTING_NONE = 0,$/;"	e	enum:__anon3
ASS_HINTING_NORMAL	.\libass\ass.h	/^    ASS_HINTING_NORMAL,$/;"	e	enum:__anon3
ASS_Hinting	.\libass\ass.h	/^} ASS_Hinting;$/;"	t	typeref:enum:__anon3
ASS_Image	.\libass\ass.h	/^} ASS_Image;$/;"	t	typeref:struct:ass_image
ASS_ImagePriv	.\libass\ass_render.h	/^} ASS_ImagePriv;$/;"	t	typeref:struct:__anon40
ASS_JUSTIFY_AUTO	.\libass\ass_types.h	31;"	d
ASS_JUSTIFY_CENTER	.\libass\ass_types.h	33;"	d
ASS_JUSTIFY_LEFT	.\libass\ass_types.h	32;"	d
ASS_JUSTIFY_RIGHT	.\libass\ass_types.h	34;"	d
ASS_Library	.\libass\ass_types.h	/^typedef struct ass_library ASS_Library;$/;"	t	typeref:struct:ass_library
ASS_OVERRIDE_BIT_ALIGNMENT	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_ALIGNMENT = 1 << 7,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_ATTRIBUTES	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_ATTRIBUTES = 1 << 5,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_BORDER	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_BORDER = 1 << 6,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_COLORS	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_COLORS = 1 << 4,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_FONT_NAME	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_FONT_NAME = 1 << 3,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_FONT_SIZE	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_FONT_SIZE = 1 << 1,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_FONT_SIZE_FIELDS	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_FONT_SIZE_FIELDS = 1 << 2,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_JUSTIFY	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_JUSTIFY = 1 << 10,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_MARGINS	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_MARGINS = 1 << 8,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_SELECTIVE_FONT_SCALE	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_SELECTIVE_FONT_SCALE = 1 << 1,$/;"	e	enum:__anon5
ASS_OVERRIDE_BIT_STYLE	.\libass\ass.h	/^    ASS_OVERRIDE_BIT_STYLE = 1 << 0,$/;"	e	enum:__anon5
ASS_OVERRIDE_DEFAULT	.\libass\ass.h	/^    ASS_OVERRIDE_DEFAULT = 0,$/;"	e	enum:__anon5
ASS_OVERRIDE_FULL_STYLE	.\libass\ass.h	/^    ASS_OVERRIDE_FULL_STYLE = 1 << 9,$/;"	e	enum:__anon5
ASS_Outline	.\libass\ass_outline.h	/^} ASS_Outline;$/;"	t	typeref:struct:__anon35
ASS_OverrideBits	.\libass\ass.h	/^} ASS_OverrideBits;$/;"	t	typeref:enum:__anon5
ASS_ParserPriv	.\libass\ass_types.h	/^typedef struct parser_priv ASS_ParserPriv;$/;"	t	typeref:struct:parser_priv
ASS_REALLOC_ARRAY	.\libass\ass_utils.h	76;"	d
ASS_Rect	.\libass\ass_outline.h	/^} ASS_Rect;$/;"	t	typeref:struct:__anon32
ASS_RenderPriv	.\libass\ass_types.h	/^typedef struct render_priv ASS_RenderPriv;$/;"	t	typeref:struct:render_priv
ASS_Renderer	.\libass\ass_types.h	/^typedef struct ass_renderer ASS_Renderer;$/;"	t	typeref:struct:ass_renderer
ASS_SHAPING_COMPLEX	.\libass\ass.h	/^    ASS_SHAPING_COMPLEX$/;"	e	enum:__anon4
ASS_SHAPING_SIMPLE	.\libass\ass.h	/^    ASS_SHAPING_SIMPLE = 0,$/;"	e	enum:__anon4
ASS_STRING_H	.\libass\ass_string.h	22;"	d
ASS_STYLES_ALLOC	.\libass\ass.c	63;"	d	file:
ASS_Settings	.\libass\ass_render.h	/^} ASS_Settings;$/;"	t	typeref:struct:__anon41
ASS_Shaper	.\libass\ass_shaper.h	/^typedef struct ass_shaper ASS_Shaper;$/;"	t	typeref:struct:ass_shaper
ASS_ShaperFontData	.\libass\ass_fontselect.h	/^typedef struct ass_shaper_font_data ASS_ShaperFontData;$/;"	t	typeref:struct:ass_shaper_font_data
ASS_ShapingLevel	.\libass\ass.h	/^} ASS_ShapingLevel;$/;"	t	typeref:enum:__anon4
ASS_Style	.\libass\ass_types.h	/^} ASS_Style;$/;"	t	typeref:struct:ass_style
ASS_TokenType	.\libass\ass_drawing.h	/^} ASS_TokenType;$/;"	t	typeref:enum:__anon24
ASS_Track	.\libass\ass_types.h	/^} ASS_Track;$/;"	t	typeref:struct:ass_track
ASS_Vector	.\libass\ass_outline.h	/^} ASS_Vector;$/;"	t	typeref:struct:__anon30
ASS_YCbCrMatrix	.\libass\ass_types.h	/^typedef enum ASS_YCbCrMatrix {$/;"	g
ASS_YCbCrMatrix	.\libass\ass_types.h	/^} ASS_YCbCrMatrix;$/;"	t	typeref:enum:ASS_YCbCrMatrix
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR addpd, sse2, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR addps, sse, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR addsd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR addss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR addsubpd, sse3, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR addsubps, sse3, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR aesdec, aesni, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR aesdeclast, aesni, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR aesenc, aesni, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR aesenclast, aesni, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR aesimc, aesni$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR aeskeygenassist, aesni$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR andnpd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR andnps, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR andpd, sse2, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR andps, sse, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR blendpd, sse4, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR blendps, sse4, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR blendvpd, sse4 ; can't be emulated$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR blendvps, sse4 ; can't be emulated$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cmppd, sse2, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cmpps, sse, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cmpsd, sse2, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cmpss, sse, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR comisd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR comiss, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtdq2pd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtdq2ps, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtpd2dq, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtpd2ps, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtps2dq, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtps2pd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtsd2si, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtsd2ss, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtsi2sd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtsi2ss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtss2sd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvtss2si, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvttpd2dq, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvttps2dq, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvttsd2si, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR cvttss2si, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR divpd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR divps, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR divsd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR divss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR dppd, sse4, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR dpps, sse4, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR extractps, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR haddpd, sse3, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR haddps, sse3, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR hsubpd, sse3, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR hsubps, sse3, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR insertps, sse4, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR lddqu, sse3$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR ldmxcsr, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR maskmovdqu, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR maxpd, sse2, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR maxps, sse, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR maxsd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR maxss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR minpd, sse2, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR minps, sse, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR minsd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR minss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movapd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movaps, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movd, mmx$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movddup, sse3$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movdqa, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movdqu, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movhlps, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movhpd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movhps, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movlhps, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movlpd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movlps, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movmskpd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movmskps, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movntdq, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movntdqa, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movntpd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movntps, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movq, mmx$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movsd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movshdup, sse3$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movsldup, sse3$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movupd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR movups, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR mpsadbw, sse4, 0, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR mulpd, sse2, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR mulps, sse, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR mulsd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR mulss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR orpd, sse2, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR orps, sse, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pabsb, ssse3$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pabsd, ssse3$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pabsw, ssse3$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR packssdw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR packsswb, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR packusdw, sse4, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR packuswb, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR paddb, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR paddd, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR paddq, sse2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR paddsb, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR paddsw, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR paddusb, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR paddusw, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR paddw, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR palignr, ssse3, 0, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pand, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pandn, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pavgb, mmx2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pavgw, mmx2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pblendvb, sse4 ; can't be emulated$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pblendw, sse4, 0, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pclmulhqhqdq, fnord, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pclmulhqlqdq, fnord, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pclmullqhqdq, fnord, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pclmullqlqdq, fnord, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pclmulqdq, fnord, 0, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpeqb, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpeqd, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpeqq, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpeqw, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpestri, sse42$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpestrm, sse42$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpgtb, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpgtd, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpgtq, sse42, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpgtw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpistri, sse42$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pcmpistrm, sse42$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pextrb, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pextrd, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pextrq, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pextrw, mmx2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pfadd, 3dnow, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pfmul, 3dnow, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pfsub, 3dnow, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR phaddd, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR phaddsw, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR phaddw, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR phminposuw, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR phsubd, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR phsubsw, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR phsubw, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pinsrb, sse4, 0, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pinsrd, sse4, 0, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pinsrq, sse4, 0, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pinsrw, mmx2, 0, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmaddubsw, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmaddwd, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmaxsb, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmaxsd, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmaxsw, mmx2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmaxub, mmx2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmaxud, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmaxuw, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pminsb, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pminsd, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pminsw, mmx2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pminub, mmx2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pminud, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pminuw, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovmskb, mmx2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovsxbd, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovsxbq, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovsxbw, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovsxdq, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovsxwd, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovsxwq, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovzxbd, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovzxbq, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovzxbw, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovzxdq, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovzxwd, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmovzxwq, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmuldq, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmulhrsw, ssse3, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmulhuw, mmx2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmulhw, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmulld, sse4, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmullw, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pmuludq, sse2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR por, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psadbw, mmx2, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pshufb, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pshufd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pshufhw, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pshuflw, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psignb, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psignd, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psignw, ssse3, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pslld, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pslldq, sse2, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psllq, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psllw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psrad, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psraw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psrld, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psrldq, sse2, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psrlq, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psrlw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psubb, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psubd, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psubq, sse2, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psubsb, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psubsw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psubusb, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psubusw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR psubw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR ptest, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR punpckhbw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR punpckhdq, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR punpckhqdq, sse2, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR punpckhwd, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR punpcklbw, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR punpckldq, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR punpcklqdq, sse2, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR punpcklwd, mmx, 0, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR pxor, mmx, 0, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR rcpps, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR rcpss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR roundpd, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR roundps, sse4$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR roundsd, sse4, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR roundss, sse4, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR rsqrtps, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR rsqrtss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR shufpd, sse2, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR shufps, sse, 1, 1, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR sqrtpd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR sqrtps, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR sqrtsd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR sqrtss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR stmxcsr, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR subpd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR subps, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR subsd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR subss, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR ucomisd, sse2$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR ucomiss, sse$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR unpckhpd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR unpckhps, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR unpcklpd, sse2, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR unpcklps, sse, 1, 0, 0$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR xorpd, sse2, 1, 0, 1$/;"	l
AVX_INSTR	.\libass\x86\x86inc.asm	/^AVX_INSTR xorps, sse, 1, 0, 1$/;"	l
Alignment	.\libass\ass_types.h	/^    int Alignment;$/;"	m	struct:ass_style	access:public
Angle	.\libass\ass_types.h	/^    double Angle;$/;"	m	struct:ass_style	access:public
BITMAPHASHKEY	.\libass\ass_cache_template.h	11;"	d
BITMAPHASHKEY	.\libass\ass_cache_template.h	133;"	d
BITMAPHASHKEY	.\libass\ass_cache_template.h	30;"	d
BITMAPHASHKEY	.\libass\ass_cache_template.h	48;"	d
BITMAP_CACHE_MAX_SIZE	.\libass\ass_render.h	45;"	d
BITMAP_CLIP	.\libass\ass_cache.h	/^        BITMAP_CLIP,$/;"	e	enum:bitmap_hash_key::__anon16
BITMAP_OUTLINE	.\libass\ass_cache.h	/^        BITMAP_OUTLINE,$/;"	e	enum:bitmap_hash_key::__anon16
BLUR_HORZ	.\libass\x86\blur.asm	/^BLUR_HORZ 1234$/;"	l
BLUR_HORZ	.\libass\x86\blur.asm	/^BLUR_HORZ 1235$/;"	l
BLUR_HORZ	.\libass\x86\blur.asm	/^BLUR_HORZ 1246$/;"	l
BLUR_MAX_RADIUS	.\libass\ass_parse.h	22;"	d
BLUR_VERT	.\libass\x86\blur.asm	/^BLUR_VERT 1234$/;"	l
BLUR_VERT	.\libass\x86\blur.asm	/^BLUR_VERT 1235$/;"	l
BLUR_VERT	.\libass\x86\blur.asm	/^BLUR_VERT 1246$/;"	l
BRANCH_INSTR	.\libass\x86\x86inc.asm	/^BRANCH_INSTR jz, je, jnz, jne, jl, jle, jnl, jnle, jg, jge, jng, jnge, ja, jae, jna, jnae, jb, jbe, jnb, jnbe, jc, jnc, js, jns, jo, jno, jp, jnp$/;"	l
BackColour	.\libass\ass_types.h	/^    uint32_t BackColour;$/;"	m	struct:ass_style	access:public
BeBlurFunc	.\libass\ass_bitmap.h	/^typedef void (*BeBlurFunc)(uint8_t *buf, intptr_t w, intptr_t h,$/;"	t
Bitmap	.\libass\ass_bitmap.h	/^} Bitmap;$/;"	t	typeref:struct:__anon8
BitmapBlendFunc	.\libass\ass_bitmap.h	/^typedef void (*BitmapBlendFunc)(uint8_t *dst, intptr_t dst_stride,$/;"	t
BitmapEngine	.\libass\ass_bitmap.h	/^} BitmapEngine;$/;"	t	typeref:struct:__anon7
BitmapHashKey	.\libass\ass_cache.h	/^} BitmapHashKey;$/;"	t	typeref:struct:bitmap_hash_key
BitmapHashValue	.\libass\ass_cache.h	/^} BitmapHashValue;$/;"	t	typeref:struct:__anon10
BitmapMulFunc	.\libass\ass_bitmap.h	/^typedef void (*BitmapMulFunc)(uint8_t *dst, intptr_t dst_stride,$/;"	t
BitmapRef	.\libass\ass_cache.h	/^} BitmapRef;$/;"	t	typeref:struct:__anon18
Blur	.\libass\ass_types.h	/^    double Blur;$/;"	m	struct:ass_style	access:public
BlurMethod	.\libass\ass_blur.c	/^} BlurMethod;$/;"	t	typeref:struct:__anon9	file:
Bold	.\libass\ass_types.h	/^    int Bold;$/;"	m	struct:ass_style	access:public
BorderStyle	.\libass\ass_types.h	/^    int BorderStyle;$/;"	m	struct:ass_style	access:public
CACHE_ALIGN	.\libass\ass_cache.c	331;"	d	file:
CACHE_ITEM_SIZE	.\libass\ass_cache.c	332;"	d	file:
CLIG	.\libass\ass_shaper.c	/^    CLIG$/;"	e	enum:__anon53	file:
COBJMACROS	.\libass\ass_directwrite.c	18;"	d	file:
COLORVAL	.\libass\ass.c	275;"	d	file:
COMPOSITE_CACHE_MAX_SIZE	.\libass\ass_render.h	47;"	d
COMPOSITE_CACHE_RATIO	.\libass\ass_render.h	46;"	d
CONFIG_ASM	.\config.h	5;"	d
CONFIG_DIRECTWRITE	.\config.h	11;"	d
CONFIG_FREETYPE	.\config.h	17;"	d
CONFIG_FRIBIDI	.\config.h	20;"	d
CONFIG_HARFBUZZ	.\config.h	23;"	d
CONFIG_ICONV	.\config.h	26;"	d
CONFIG_LIBPNG	.\config.h	32;"	d
CREATE_COMPARISON_FUNCTIONS	.\libass\ass_cache.c	37;"	d	file:
CREATE_COMPARISON_FUNCTIONS	.\libass\ass_cache_template.h	17;"	d
CREATE_HASH_FUNCTIONS	.\libass\ass_cache.c	35;"	d	file:
CREATE_HASH_FUNCTIONS	.\libass\ass_cache_template.h	37;"	d
CREATE_STRUCT_DEFINITIONS	.\libass\ass_cache.h	58;"	d
CREATE_STRUCT_DEFINITIONS	.\libass\ass_cache_template.h	2;"	d
C_ALIGN_ORDER	.\libass\ass_bitmap.h	60;"	d
Cache	.\libass\ass_cache.h	/^typedef struct cache Cache;$/;"	t	typeref:struct:cache
CacheDesc	.\libass\ass_cache.h	/^} CacheDesc;$/;"	t	typeref:struct:__anon21
CacheItem	.\libass\ass_cache.c	/^} CacheItem;$/;"	t	typeref:struct:cache_item	file:
CacheItemDestructor	.\libass\ass_cache.h	/^typedef void(*CacheItemDestructor)(void *key, void *value);$/;"	t
CacheKeyMove	.\libass\ass_cache.h	/^typedef bool(*CacheKeyMove)(void *dst, void *src, size_t key_size);$/;"	t
CacheStore	.\libass\ass_render.h	/^} CacheStore;$/;"	t	typeref:struct:__anon50
CheckGlyphFunc	.\libass\ass_fontselect.h	/^typedef bool    (*CheckGlyphFunc)(void *font_priv, uint32_t codepoint);$/;"	t
CheckPostscriptFunc	.\libass\ass_fontselect.h	/^typedef bool    (*CheckPostscriptFunc)(void *font_priv);$/;"	t
CombinedBitmapInfo	.\libass\ass_render.h	/^} CombinedBitmapInfo;$/;"	t	typeref:struct:__anon44
CompositeHashKey	.\libass\ass_cache.h	/^} CompositeHashKey;$/;"	t	typeref:struct:__anon20
CompositeHashValue	.\libass\ass_cache.h	/^} CompositeHashValue;$/;"	t	typeref:struct:__anon11
Convert16to8Func	.\libass\ass_bitmap.h	/^typedef void (*Convert16to8Func)(uint8_t *dst, ptrdiff_t dst_stride, const int16_t *src,$/;"	t
Convert8to16Func	.\libass\ass_bitmap.h	/^typedef void (*Convert8to16Func)(int16_t *dst, const uint8_t *src, ptrdiff_t src_stride,$/;"	t
CreateProcess	.\ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
DECLARE_ARG	.\libass\x86\x86inc.asm	/^DECLARE_ARG 7, 8, 9, 10, 11, 12, 13, 14$/;"	l
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteFactory,IUnknown)$/;"	f	signature:(IDWriteFactory,IUnknown)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteFont,IUnknown)$/;"	f	signature:(IDWriteFont,IUnknown)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteFontCollection,IUnknown)$/;"	f	signature:(IDWriteFontCollection,IUnknown)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteFontFace,IUnknown)$/;"	f	signature:(IDWriteFontFace,IUnknown)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteFontFamily,IDWriteFontList)$/;"	f	signature:(IDWriteFontFamily,IDWriteFontList)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteFontFile,IUnknown)$/;"	f	signature:(IDWriteFontFile,IUnknown)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteFontFileLoader,IUnknown)$/;"	f	signature:(IDWriteFontFileLoader,IUnknown)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteFontFileStream,IUnknown)$/;"	f	signature:(IDWriteFontFileStream,IUnknown)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteLocalizedStrings,IUnknown)$/;"	f	signature:(IDWriteLocalizedStrings,IUnknown)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteTextFormat,IUnknown)$/;"	f	signature:(IDWriteTextFormat,IUnknown)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteTextLayout,IDWriteTextFormat)$/;"	f	signature:(IDWriteTextLayout,IDWriteTextFormat)
DECLARE_INTERFACE_	.\libass\dwrite_c.h	/^DECLARE_INTERFACE_(IDWriteTextRenderer,IDWritePixelSnapping)$/;"	f	signature:(IDWriteTextRenderer,IDWritePixelSnapping)
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 0,  rcx$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 0,  rdi$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 0, eax, 4$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 1,  rdx$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 1,  rsi$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 1, ecx, 8$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 10, rbp, 40$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 10, rbp, 88$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 11, R12, 48$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 11, R12, 96$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 12, R13, 104$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 12, R13, 56$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 13, R14, 112$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 13, R14, 64$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 14, R15, 120$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 14, R15, 72$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 2,  R8$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 2,  rdx$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 2, edx, 12$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 3,  R9$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 3,  rcx$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 3, ebx, 16$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 4,  R10, 40$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 4,  R8$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 4, esi, 20$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 5,  R11, 48$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 5,  R9$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 5, edi, 24$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 6,  rax, 56$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 6,  rax, 8$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 6, ebp, 28$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 7,  R10, 16$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 7,  rdi, 64$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 8,  R11, 24$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 8,  rsi, 72$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 9,  rbx, 32$/;"	l
DECLARE_REG	.\libass\x86\x86inc.asm	/^DECLARE_REG 9,  rbx, 80$/;"	l
DECLARE_REG_SIZE	.\libass\x86\x86inc.asm	/^DECLARE_REG_SIZE ax, al, ah$/;"	l
DECLARE_REG_SIZE	.\libass\x86\x86inc.asm	/^DECLARE_REG_SIZE bp, bpl, null$/;"	l
DECLARE_REG_SIZE	.\libass\x86\x86inc.asm	/^DECLARE_REG_SIZE bx, bl, bh$/;"	l
DECLARE_REG_SIZE	.\libass\x86\x86inc.asm	/^DECLARE_REG_SIZE cx, cl, ch$/;"	l
DECLARE_REG_SIZE	.\libass\x86\x86inc.asm	/^DECLARE_REG_SIZE di, dil, null$/;"	l
DECLARE_REG_SIZE	.\libass\x86\x86inc.asm	/^DECLARE_REG_SIZE dx, dl, dh$/;"	l
DECLARE_REG_SIZE	.\libass\x86\x86inc.asm	/^DECLARE_REG_SIZE si, sil, null$/;"	l
DECLARE_REG_TMP_SIZE	.\libass\x86\x86inc.asm	/^DECLARE_REG_TMP_SIZE 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14$/;"	l
DECORATE	.\libass\ass_bitmap.c	40;"	d	file:
DECORATE	.\libass\ass_bitmap.c	43;"	d	file:
DECORATE	.\libass\ass_bitmap.c	48;"	d	file:
DECORATE	.\libass\ass_bitmap.c	51;"	d	file:
DECORATE	.\libass\ass_bitmap.c	54;"	d	file:
DECORATE	.\libass\ass_bitmap.c	57;"	d	file:
DECO_STRIKETHROUGH	.\libass\ass_font.h	39;"	d
DECO_UNDERLINE	.\libass\ass_font.h	38;"	d
DIFF	.\libass\ass_render.c	1447;"	d	file:
DIFF	.\libass\ass_render.c	1503;"	d	file:
DWRITEAPI	.\libass\dwrite_c.h	13;"	d
DWRITE_FACTORY_TYPE	.\libass\dwrite_c.h	/^typedef enum DWRITE_FACTORY_TYPE {$/;"	g
DWRITE_FACTORY_TYPE	.\libass\dwrite_c.h	/^} DWRITE_FACTORY_TYPE;$/;"	t	typeref:enum:DWRITE_FACTORY_TYPE
DWRITE_FACTORY_TYPE_ISOLATED	.\libass\dwrite_c.h	/^  DWRITE_FACTORY_TYPE_ISOLATED $/;"	e	enum:DWRITE_FACTORY_TYPE
DWRITE_FACTORY_TYPE_SHARED	.\libass\dwrite_c.h	/^  DWRITE_FACTORY_TYPE_SHARED = 0,$/;"	e	enum:DWRITE_FACTORY_TYPE
DWRITE_FONT_FACE_TYPE	.\libass\dwrite_c.h	/^typedef enum DWRITE_FONT_FACE_TYPE {$/;"	g
DWRITE_FONT_FACE_TYPE	.\libass\dwrite_c.h	/^} DWRITE_FONT_FACE_TYPE;$/;"	t	typeref:enum:DWRITE_FONT_FACE_TYPE
DWRITE_FONT_FACE_TYPE_BITMAP	.\libass\dwrite_c.h	/^  DWRITE_FONT_FACE_TYPE_BITMAP,$/;"	e	enum:DWRITE_FONT_FACE_TYPE
DWRITE_FONT_FACE_TYPE_CFF	.\libass\dwrite_c.h	/^  DWRITE_FONT_FACE_TYPE_CFF = 0,$/;"	e	enum:DWRITE_FONT_FACE_TYPE
DWRITE_FONT_FACE_TYPE_RAW_CFF	.\libass\dwrite_c.h	/^  DWRITE_FONT_FACE_TYPE_RAW_CFF$/;"	e	enum:DWRITE_FONT_FACE_TYPE
DWRITE_FONT_FACE_TYPE_TRUETYPE	.\libass\dwrite_c.h	/^  DWRITE_FONT_FACE_TYPE_TRUETYPE,$/;"	e	enum:DWRITE_FONT_FACE_TYPE
DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION	.\libass\dwrite_c.h	/^  DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION,$/;"	e	enum:DWRITE_FONT_FACE_TYPE
DWRITE_FONT_FACE_TYPE_TYPE1	.\libass\dwrite_c.h	/^  DWRITE_FONT_FACE_TYPE_TYPE1,$/;"	e	enum:DWRITE_FONT_FACE_TYPE
DWRITE_FONT_FACE_TYPE_UNKNOWN	.\libass\dwrite_c.h	/^  DWRITE_FONT_FACE_TYPE_UNKNOWN,$/;"	e	enum:DWRITE_FONT_FACE_TYPE
DWRITE_FONT_FACE_TYPE_VECTOR	.\libass\dwrite_c.h	/^  DWRITE_FONT_FACE_TYPE_VECTOR,$/;"	e	enum:DWRITE_FONT_FACE_TYPE
DWRITE_FONT_METRICS	.\libass\dwrite_c.h	/^typedef struct DWRITE_FONT_METRICS {$/;"	s
DWRITE_FONT_METRICS	.\libass\dwrite_c.h	/^} DWRITE_FONT_METRICS;$/;"	t	typeref:struct:DWRITE_FONT_METRICS
DWRITE_FONT_METRICS::ascent	.\libass\dwrite_c.h	/^  UINT16 ascent;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_METRICS::capHeight	.\libass\dwrite_c.h	/^  UINT16 capHeight;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_METRICS::descent	.\libass\dwrite_c.h	/^  UINT16 descent;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_METRICS::designUnitsPerEm	.\libass\dwrite_c.h	/^  UINT16 designUnitsPerEm;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_METRICS::lineGap	.\libass\dwrite_c.h	/^  INT16  lineGap;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_METRICS::strikethroughPosition	.\libass\dwrite_c.h	/^  INT16  strikethroughPosition;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_METRICS::strikethroughThickness	.\libass\dwrite_c.h	/^  UINT16 strikethroughThickness;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_METRICS::underlinePosition	.\libass\dwrite_c.h	/^  INT16  underlinePosition;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_METRICS::underlineThickness	.\libass\dwrite_c.h	/^  UINT16 underlineThickness;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_METRICS::xHeight	.\libass\dwrite_c.h	/^  UINT16 xHeight;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
DWRITE_FONT_SIMULATIONS	.\libass\dwrite_c.h	/^typedef enum DWRITE_FONT_SIMULATIONS {$/;"	g
DWRITE_FONT_SIMULATIONS	.\libass\dwrite_c.h	/^} DWRITE_FONT_SIMULATIONS;$/;"	t	typeref:enum:DWRITE_FONT_SIMULATIONS
DWRITE_FONT_SIMULATIONS_BOLD	.\libass\dwrite_c.h	/^  DWRITE_FONT_SIMULATIONS_BOLD      = 0x0001,$/;"	e	enum:DWRITE_FONT_SIMULATIONS
DWRITE_FONT_SIMULATIONS_NONE	.\libass\dwrite_c.h	/^  DWRITE_FONT_SIMULATIONS_NONE      = 0x0000,$/;"	e	enum:DWRITE_FONT_SIMULATIONS
DWRITE_FONT_SIMULATIONS_OBLIQUE	.\libass\dwrite_c.h	/^  DWRITE_FONT_SIMULATIONS_OBLIQUE   = 0x0002 $/;"	e	enum:DWRITE_FONT_SIMULATIONS
DWRITE_FONT_STRETCH	.\libass\dwrite_c.h	/^typedef enum DWRITE_FONT_STRETCH {$/;"	g
DWRITE_FONT_STRETCH	.\libass\dwrite_c.h	/^} DWRITE_FONT_STRETCH;$/;"	t	typeref:enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_CONDENSED	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_CONDENSED         = 3,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_EXPANDED	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_EXPANDED          = 7,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_EXTRA_CONDENSED	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_EXTRA_CONDENSED   = 2,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_EXTRA_EXPANDED	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_EXTRA_EXPANDED    = 8,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_MEDIUM	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_MEDIUM            = 5,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_NORMAL	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_NORMAL            = 5,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_SEMI_CONDENSED	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_SEMI_CONDENSED    = 4,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_SEMI_EXPANDED	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_SEMI_EXPANDED     = 6,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_ULTRA_CONDENSED	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_ULTRA_CONDENSED   = 1,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_ULTRA_EXPANDED	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_ULTRA_EXPANDED    = 9 $/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STRETCH_UNDEFINED	.\libass\dwrite_c.h	/^  DWRITE_FONT_STRETCH_UNDEFINED         = 0,$/;"	e	enum:DWRITE_FONT_STRETCH
DWRITE_FONT_STYLE	.\libass\dwrite_c.h	/^typedef enum DWRITE_FONT_STYLE {$/;"	g
DWRITE_FONT_STYLE	.\libass\dwrite_c.h	/^} DWRITE_FONT_STYLE;$/;"	t	typeref:enum:DWRITE_FONT_STYLE
DWRITE_FONT_STYLE_ITALIC	.\libass\dwrite_c.h	/^  DWRITE_FONT_STYLE_ITALIC $/;"	e	enum:DWRITE_FONT_STYLE
DWRITE_FONT_STYLE_NORMAL	.\libass\dwrite_c.h	/^  DWRITE_FONT_STYLE_NORMAL = 0,$/;"	e	enum:DWRITE_FONT_STYLE
DWRITE_FONT_STYLE_OBLIQUE	.\libass\dwrite_c.h	/^  DWRITE_FONT_STYLE_OBLIQUE,$/;"	e	enum:DWRITE_FONT_STYLE
DWRITE_FONT_WEIGHT	.\libass\dwrite_c.h	/^typedef enum DWRITE_FONT_WEIGHT {$/;"	g
DWRITE_FONT_WEIGHT	.\libass\dwrite_c.h	/^} DWRITE_FONT_WEIGHT;$/;"	t	typeref:enum:DWRITE_FONT_WEIGHT
DWRITE_FONT_WEIGHT_MEDIUM	.\libass\dwrite_c.h	/^  DWRITE_FONT_WEIGHT_MEDIUM        = 500,$/;"	e	enum:DWRITE_FONT_WEIGHT
DWRITE_GLYPH_OFFSET	.\libass\dwrite_c.h	/^typedef struct DWRITE_GLYPH_OFFSET DWRITE_GLYPH_OFFSET;$/;"	t	typeref:struct:DWRITE_GLYPH_OFFSET
DWRITE_GLYPH_RUN	.\libass\dwrite_c.h	/^typedef struct DWRITE_GLYPH_RUN {$/;"	s
DWRITE_GLYPH_RUN	.\libass\dwrite_c.h	/^} DWRITE_GLYPH_RUN;$/;"	t	typeref:struct:DWRITE_GLYPH_RUN
DWRITE_GLYPH_RUN::bidiLevel	.\libass\dwrite_c.h	/^  UINT32                    bidiLevel;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
DWRITE_GLYPH_RUN::fontEmSize	.\libass\dwrite_c.h	/^  FLOAT                     fontEmSize;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
DWRITE_GLYPH_RUN::fontFace	.\libass\dwrite_c.h	/^  IDWriteFontFace           *fontFace;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
DWRITE_GLYPH_RUN::glyphAdvances	.\libass\dwrite_c.h	/^  const FLOAT               *glyphAdvances;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
DWRITE_GLYPH_RUN::glyphCount	.\libass\dwrite_c.h	/^  UINT32                    glyphCount;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
DWRITE_GLYPH_RUN::glyphIndices	.\libass\dwrite_c.h	/^  const UINT16              *glyphIndices;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
DWRITE_GLYPH_RUN::glyphOffsets	.\libass\dwrite_c.h	/^  const DWRITE_GLYPH_OFFSET *glyphOffsets;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
DWRITE_GLYPH_RUN::isSideways	.\libass\dwrite_c.h	/^  BOOL                      isSideways;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
DWRITE_GLYPH_RUN_DESCRIPTION	.\libass\dwrite_c.h	/^typedef struct DWRITE_GLYPH_RUN_DESCRIPTION DWRITE_GLYPH_RUN_DESCRIPTION;$/;"	t	typeref:struct:DWRITE_GLYPH_RUN_DESCRIPTION
DWRITE_HIT_TEST_METRICS	.\libass\dwrite_c.h	/^typedef struct DWRITE_HIT_TEST_METRICS DWRITE_HIT_TEST_METRICS;$/;"	t	typeref:struct:DWRITE_HIT_TEST_METRICS
DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_DESCRIPTION	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_DESCRIPTION,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_DESIGNER	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_DESIGNER,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_DESIGNER_URL	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_DESIGNER_URL,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_FULL_NAME	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_FULL_NAME,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_ID	.\libass\dwrite_c.h	/^typedef enum DWRITE_INFORMATIONAL_STRING_ID {$/;"	g
DWRITE_INFORMATIONAL_STRING_ID	.\libass\dwrite_c.h	/^} DWRITE_INFORMATIONAL_STRING_ID;$/;"	t	typeref:enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_MANUFACTURER	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_MANUFACTURER,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_NONE	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_NONE = 0,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_TRADEMARK	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_TRADEMARK,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES	.\libass\dwrite_c.h	/^  DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES,$/;"	e	enum:DWRITE_INFORMATIONAL_STRING_ID
DWRITE_LINE_METRICS	.\libass\dwrite_c.h	/^typedef struct DWRITE_LINE_METRICS DWRITE_LINE_METRICS;$/;"	t	typeref:struct:DWRITE_LINE_METRICS
DWRITE_MATRIX	.\libass\dwrite_c.h	/^typedef struct DWRITE_MATRIX DWRITE_MATRIX;$/;"	t	typeref:struct:DWRITE_MATRIX
DWRITE_STRIKETHROUGH	.\libass\dwrite_c.h	/^typedef struct DWRITE_STRIKETHROUGH DWRITE_STRIKETHROUGH;$/;"	t	typeref:struct:DWRITE_STRIKETHROUGH
DWRITE_TEXT_METRICS	.\libass\dwrite_c.h	/^typedef struct DWRITE_TEXT_METRICS DWRITE_TEXT_METRICS;$/;"	t	typeref:struct:DWRITE_TEXT_METRICS
DWRITE_TEXT_RANGE	.\libass\dwrite_c.h	/^typedef struct DWRITE_TEXT_RANGE {$/;"	s
DWRITE_TEXT_RANGE	.\libass\dwrite_c.h	/^} DWRITE_TEXT_RANGE;$/;"	t	typeref:struct:DWRITE_TEXT_RANGE
DWRITE_TEXT_RANGE::length	.\libass\dwrite_c.h	/^  UINT32 length;$/;"	m	struct:DWRITE_TEXT_RANGE	access:public
DWRITE_TEXT_RANGE::startPosition	.\libass\dwrite_c.h	/^  UINT32 startPosition;$/;"	m	struct:DWRITE_TEXT_RANGE	access:public
DWRITE_TRIMMING	.\libass\dwrite_c.h	/^typedef struct DWRITE_TRIMMING DWRITE_TRIMMING;$/;"	t	typeref:struct:DWRITE_TRIMMING
DWRITE_UNDERLINE	.\libass\dwrite_c.h	/^typedef struct DWRITE_UNDERLINE DWRITE_UNDERLINE;$/;"	t	typeref:struct:DWRITE_UNDERLINE
DWriteCreateFactoryFn	.\libass\ass_directwrite.c	/^typedef HRESULT (WINAPI *DWriteCreateFactoryFn)($/;"	t	file:
DestroyFontFunc	.\libass\ass_fontselect.h	/^typedef void    (*DestroyFontFunc)(void *font_priv);$/;"	t
DestroyProviderFunc	.\libass\ass_fontselect.h	/^typedef void    (*DestroyProviderFunc)(void *priv);$/;"	t
Duration	.\libass\ass_types.h	/^    long long Duration;         \/\/ ms$/;"	m	struct:ass_event	access:public
EF_KARAOKE	.\libass\ass_render.h	/^    EF_KARAOKE,$/;"	e	enum:__anon43
EF_KARAOKE_KF	.\libass\ass_render.h	/^    EF_KARAOKE_KF,$/;"	e	enum:__anon43
EF_KARAOKE_KO	.\libass\ass_render.h	/^    EF_KARAOKE_KO$/;"	e	enum:__anon43
EF_NONE	.\libass\ass_render.h	/^    EF_NONE = 0,$/;"	e	enum:__anon43
END	.\libass\ass_cache_template.h	134;"	d
END	.\libass\ass_cache_template.h	13;"	d
END	.\libass\ass_cache_template.h	32;"	d
END	.\libass\ass_cache_template.h	52;"	d
EVENT_HSCROLL	.\libass\ass_render.h	/^        EVENT_HSCROLL,          \/\/ "Banner" transition effect, text_width is unlimited$/;"	e	enum:__anon47::__anon48
EVENT_NORMAL	.\libass\ass_render.h	/^        EVENT_NORMAL,           \/\/ "normal" top-, sub- or mid- title$/;"	e	enum:__anon47::__anon48
EVENT_POSITIONED	.\libass\ass_render.h	/^        EVENT_POSITIONED,       \/\/ happens after pos(,), margins are ignored$/;"	e	enum:__anon47::__anon48
EVENT_VSCROLL	.\libass\ass_render.h	/^        EVENT_VSCROLL           \/\/ "Scroll up", "Scroll down" transition effects$/;"	e	enum:__anon47::__anon48
EXPAND_HORZ	.\libass\x86\blur.asm	/^EXPAND_HORZ$/;"	l
EXPAND_VERT	.\libass\x86\blur.asm	/^EXPAND_VERT$/;"	l
Effect	.\libass\ass_render.h	/^} Effect;$/;"	t	typeref:enum:__anon43
Effect	.\libass\ass_types.h	/^    char *Effect;$/;"	m	struct:ass_event	access:public
Encoding	.\libass\ass_types.h	/^    int Encoding;$/;"	m	struct:ass_style	access:public
EventImages	.\libass\ass_render.h	/^} EventImages;$/;"	t	typeref:struct:__anon42
FALLBACK_DEFAULT_FONT	.\libass\ass_directwrite.c	33;"	d	file:
FFMAX	.\libass\ass_utils.h	45;"	d
FFMIN	.\libass\ass_utils.h	46;"	d
FFMINMAX	.\libass\ass_utils.h	47;"	d
FILL_GENERIC_TILE	.\libass\x86\rasterizer.asm	/^FILL_GENERIC_TILE 4,16$/;"	l
FILL_GENERIC_TILE	.\libass\x86\rasterizer.asm	/^FILL_GENERIC_TILE 5,32$/;"	l
FILL_HALFPLANE_TILE	.\libass\x86\rasterizer.asm	/^FILL_HALFPLANE_TILE 4,16$/;"	l
FILL_HALFPLANE_TILE	.\libass\x86\rasterizer.asm	/^FILL_HALFPLANE_TILE 5,32$/;"	l
FILL_SOLID_TILE	.\libass\x86\rasterizer.asm	/^FILL_SOLID_TILE 4,16$/;"	l
FILL_SOLID_TILE	.\libass\x86\rasterizer.asm	/^FILL_SOLID_TILE 5,32$/;"	l
FILTER_BORDER_STYLE_3	.\libass\ass_cache.h	/^    FILTER_BORDER_STYLE_3 = 1,$/;"	e	enum:__anon19
FILTER_DRAW_SHADOW	.\libass\ass_cache.h	/^    FILTER_DRAW_SHADOW    = 8,  \/\/ VSFilter compatibility$/;"	e	enum:__anon19
FILTER_NONZERO_BORDER	.\libass\ass_cache.h	/^    FILTER_NONZERO_BORDER = 2,$/;"	e	enum:__anon19
FILTER_NONZERO_SHADOW	.\libass\ass_cache.h	/^    FILTER_NONZERO_SHADOW = 4,$/;"	e	enum:__anon19
FLAG_CLIP_0	.\libass\ass_outline.c	/^    FLAG_CLIP_0       =  8,$/;"	e	enum:__anon29	file:
FLAG_CLIP_1	.\libass\ass_outline.c	/^    FLAG_CLIP_1       = 16,$/;"	e	enum:__anon29	file:
FLAG_COMPLEX	.\libass\ass_rasterizer.c	/^    FLAG_COMPLEX   = 2,$/;"	e	enum:__anon37	file:
FLAG_COUNT	.\libass\ass_outline.c	/^    FLAG_COUNT        =  6,$/;"	e	enum:__anon29	file:
FLAG_DIR_2	.\libass\ass_outline.c	/^    FLAG_DIR_2        = 32,$/;"	e	enum:__anon29	file:
FLAG_GENERIC	.\libass\ass_rasterizer.c	/^    FLAG_GENERIC   = 8,$/;"	e	enum:__anon37	file:
FLAG_INTERSECTION	.\libass\ass_outline.c	/^    FLAG_INTERSECTION =  1,$/;"	e	enum:__anon29	file:
FLAG_REVERSE	.\libass\ass_rasterizer.c	/^    FLAG_REVERSE   = 4,$/;"	e	enum:__anon37	file:
FLAG_SOLID	.\libass\ass_rasterizer.c	/^    FLAG_SOLID     = 1,$/;"	e	enum:__anon37	file:
FLAG_ZERO_0	.\libass\ass_outline.c	/^    FLAG_ZERO_0       =  2,$/;"	e	enum:__anon29	file:
FLAG_ZERO_1	.\libass\ass_outline.c	/^    FLAG_ZERO_1       =  4,$/;"	e	enum:__anon29	file:
FMA4_INSTR	.\libass\x86\x86inc.asm	/^FMA4_INSTR fmadd,    pd, ps, sd, ss$/;"	l
FMA4_INSTR	.\libass\x86\x86inc.asm	/^FMA4_INSTR fmaddsub, pd, ps$/;"	l
FMA4_INSTR	.\libass\x86\x86inc.asm	/^FMA4_INSTR fmsub,    pd, ps, sd, ss$/;"	l
FMA4_INSTR	.\libass\x86\x86inc.asm	/^FMA4_INSTR fmsubadd, pd, ps$/;"	l
FMA4_INSTR	.\libass\x86\x86inc.asm	/^FMA4_INSTR fnmadd,   pd, ps, sd, ss$/;"	l
FMA4_INSTR	.\libass\x86\x86inc.asm	/^FMA4_INSTR fnmsub,   pd, ps, sd, ss$/;"	l
FMA_INSTR	.\libass\x86\x86inc.asm	/^FMA_INSTR  pmacsdd,  pmulld, paddd ; sse4 emulation$/;"	l
FMA_INSTR	.\libass\x86\x86inc.asm	/^FMA_INSTR  pmacsww,  pmullw, paddw$/;"	l
FMA_INSTR	.\libass\x86\x86inc.asm	/^FMA_INSTR pmacsdql,  pmuldq, paddq ; sse4 emulation$/;"	l
FMA_INSTR	.\libass\x86\x86inc.asm	/^FMA_INSTR pmadcswd, pmaddwd, paddd$/;"	l
FNV1_32A_INIT	.\libass\ass_utils.h	173;"	d
FNV1_32A_PRIME	.\libass\ass_utils.h	174;"	d
FONT_SLANT_ITALIC	.\libass\ass_types.h	40;"	d
FONT_SLANT_NONE	.\libass\ass_types.h	39;"	d
FONT_SLANT_OBLIQUE	.\libass\ass_types.h	41;"	d
FONT_WEIGHT_BOLD	.\libass\ass_types.h	38;"	d
FONT_WEIGHT_LIGHT	.\libass\ass_types.h	36;"	d
FONT_WEIGHT_MEDIUM	.\libass\ass_types.h	37;"	d
FONT_WIDTH_CONDENSED	.\libass\ass_types.h	42;"	d
FONT_WIDTH_EXPANDED	.\libass\ass_types.h	44;"	d
FONT_WIDTH_NORMAL	.\libass\ass_types.h	43;"	d
FPVAL	.\libass\ass.c	277;"	d	file:
FallbackLogTextRenderer	.\libass\ass_directwrite.c	/^typedef struct FallbackLogTextRenderer {$/;"	s	file:
FallbackLogTextRenderer	.\libass\ass_directwrite.c	/^} FallbackLogTextRenderer;$/;"	t	typeref:struct:FallbackLogTextRenderer	file:
FallbackLogTextRenderer::dw_factory	.\libass\ass_directwrite.c	/^    IDWriteFactory *dw_factory;$/;"	m	struct:FallbackLogTextRenderer	file:	access:public
FallbackLogTextRenderer::iface	.\libass\ass_directwrite.c	/^    IDWriteTextRenderer iface;$/;"	m	struct:FallbackLogTextRenderer	file:	access:public
FallbackLogTextRenderer::ref_count	.\libass\ass_directwrite.c	/^    LONG ref_count;$/;"	m	struct:FallbackLogTextRenderer	file:	access:public
FallbackLogTextRenderer::vtbl	.\libass\ass_directwrite.c	/^    IDWriteTextRendererVtbl vtbl;$/;"	m	struct:FallbackLogTextRenderer	file:	access:public
FallbackLogTextRenderer_AddRef	.\libass\ass_directwrite.c	/^static ULONG STDMETHODCALLTYPE FallbackLogTextRenderer_AddRef($/;"	f	file:	signature:( IDWriteTextRenderer *This )
FallbackLogTextRenderer_DrawGlyphRun	.\libass\ass_directwrite.c	/^static HRESULT STDMETHODCALLTYPE FallbackLogTextRenderer_DrawGlyphRun($/;"	f	file:	signature:( IDWriteTextRenderer *This, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, DWRITE_GLYPH_RUN const* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION const* glyphRunDescription, IUnknown* clientDrawingEffect )
FallbackLogTextRenderer_DrawInlineObject	.\libass\ass_directwrite.c	/^static HRESULT STDMETHODCALLTYPE FallbackLogTextRenderer_DrawInlineObject($/;"	f	file:	signature:( IDWriteTextRenderer *This, void *clientDrawingContext, FLOAT originX, FLOAT originY, IDWriteInlineObject *inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown *clientDrawingEffect )
FallbackLogTextRenderer_DrawStrikethrough	.\libass\ass_directwrite.c	/^static HRESULT STDMETHODCALLTYPE FallbackLogTextRenderer_DrawStrikethrough($/;"	f	file:	signature:( IDWriteTextRenderer *This, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_STRIKETHROUGH const* strikethrough, IUnknown* clientDrawingEffect )
FallbackLogTextRenderer_DrawUnderline	.\libass\ass_directwrite.c	/^static HRESULT STDMETHODCALLTYPE FallbackLogTextRenderer_DrawUnderline($/;"	f	file:	signature:( IDWriteTextRenderer *This, void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_UNDERLINE const* underline, IUnknown* clientDrawingEffect )
FallbackLogTextRenderer_GetCurrentTransform	.\libass\ass_directwrite.c	/^static HRESULT STDMETHODCALLTYPE FallbackLogTextRenderer_GetCurrentTransform($/;"	f	file:	signature:( IDWriteTextRenderer *This, void* clientDrawingContext, DWRITE_MATRIX* transform )
FallbackLogTextRenderer_GetPixelsPerDip	.\libass\ass_directwrite.c	/^static HRESULT STDMETHODCALLTYPE FallbackLogTextRenderer_GetPixelsPerDip($/;"	f	file:	signature:( IDWriteTextRenderer *This, void* clientDrawingContext, FLOAT* pixelsPerDip )
FallbackLogTextRenderer_IsPixelSnappingDisabled	.\libass\ass_directwrite.c	/^static HRESULT STDMETHODCALLTYPE FallbackLogTextRenderer_IsPixelSnappingDisabled($/;"	f	file:	signature:( IDWriteTextRenderer *This, void* clientDrawingContext, BOOL* isDisabled )
FallbackLogTextRenderer_QueryInterface	.\libass\ass_directwrite.c	/^static HRESULT STDMETHODCALLTYPE FallbackLogTextRenderer_QueryInterface($/;"	f	file:	signature:( IDWriteTextRenderer *This, REFIID riid, void **ppvObject )
FallbackLogTextRenderer_Release	.\libass\ass_directwrite.c	/^static ULONG STDMETHODCALLTYPE FallbackLogTextRenderer_Release($/;"	f	file:	signature:( IDWriteTextRenderer *This )
FillGenericTileFunc	.\libass\ass_bitmap.h	/^typedef void (*FillGenericTileFunc)(uint8_t *buf, ptrdiff_t stride,$/;"	t
FillHalfplaneTileFunc	.\libass\ass_bitmap.h	/^typedef void (*FillHalfplaneTileFunc)(uint8_t *buf, ptrdiff_t stride,$/;"	t
FillSolidTileFunc	.\libass\ass_bitmap.h	/^typedef void (*FillSolidTileFunc)(uint8_t *buf, ptrdiff_t stride, int set);$/;"	t
FilterFunc	.\libass\ass_bitmap.h	/^typedef void (*FilterFunc)(int16_t *dst, const int16_t *src,$/;"	t
FontDataFT	.\libass\ass_fontselect.c	/^typedef struct font_data_ft FontDataFT;$/;"	t	typeref:struct:font_data_ft	file:
FontName	.\libass\ass_types.h	/^    char *FontName;$/;"	m	struct:ass_style	access:public
FontPrivate	.\libass\ass_directwrite.c	/^} FontPrivate;$/;"	t	typeref:struct:__anon22	file:
FontSize	.\libass\ass_types.h	/^    double FontSize;$/;"	m	struct:ass_style	access:public
GENERIC	.\libass\ass_cache_template.h	130;"	d
GENERIC	.\libass\ass_cache_template.h	24;"	d
GENERIC	.\libass\ass_cache_template.h	43;"	d
GENERIC	.\libass\ass_cache_template.h	5;"	d
GLYPH_CACHE_MAX	.\libass\ass_render.h	43;"	d
GLYPH_INITIAL_POINTS	.\libass\ass_drawing.c	32;"	d	file:
GLYPH_INITIAL_SEGMENTS	.\libass\ass_drawing.c	33;"	d	file:
GetDataFunc	.\libass\ass_fontselect.h	/^typedef size_t  (*GetDataFunc)(void *font_priv, unsigned char *data,$/;"	t
GetFallbackFunc	.\libass\ass_fontselect.h	/^typedef char   *(*GetFallbackFunc)(void *priv,$/;"	t
GetFontIndex	.\libass\ass_fontselect.h	/^typedef unsigned    (*GetFontIndex)(void *font_priv);$/;"	t
GlyphInfo	.\libass\ass_render.h	/^} GlyphInfo;$/;"	t	typeref:struct:glyph_info
GlyphMetricsHashValue	.\libass\ass_cache.h	/^} GlyphMetricsHashValue;$/;"	t	typeref:struct:__anon13
HALIGN_CENTER	.\libass\ass_types.h	29;"	d
HALIGN_LEFT	.\libass\ass_types.h	28;"	d
HALIGN_RIGHT	.\libass\ass_types.h	30;"	d
HAVE_ICONV_H	.\config.h	38;"	d
HAVE_INTTYPES_H	.\config.h	41;"	d
HAVE_LIBM	.\config.h	44;"	d
HAVE_MEMORY_H	.\config.h	47;"	d
HAVE_STDBOOL_H	.\config.h	50;"	d
HAVE_STDINT_H	.\config.h	53;"	d
HAVE_STDLIB_H	.\config.h	56;"	d
HAVE_STRDUP	.\config.h	59;"	d
HAVE_STRINGS_H	.\config.h	62;"	d
HAVE_STRING_H	.\config.h	65;"	d
HAVE_SYS_STAT_H	.\config.h	71;"	d
HAVE_SYS_TYPES_H	.\config.h	74;"	d
HAVE_UNISTD_H	.\config.h	77;"	d
HAVE__BOOL	.\config.h	80;"	d
HashCompare	.\libass\ass_cache.h	/^typedef unsigned(*HashCompare)(void *a, void *b, size_t key_size);$/;"	t
HashFunction	.\libass\ass_cache.h	/^typedef unsigned(*HashFunction)(void *key, size_t key_size);$/;"	t
IDWriteFactory	.\libass\dwrite_c.h	/^typedef struct IDWriteFactory IDWriteFactory;$/;"	t	typeref:struct:IDWriteFactory
IDWriteFactory_AddRef	.\libass\dwrite_c.h	209;"	d
IDWriteFactory_CreateTextFormat	.\libass\dwrite_c.h	212;"	d
IDWriteFactory_CreateTextLayout	.\libass\dwrite_c.h	213;"	d
IDWriteFactory_GetSystemFontCollection	.\libass\dwrite_c.h	211;"	d
IDWriteFactory_QueryInterface	.\libass\dwrite_c.h	208;"	d
IDWriteFactory_Release	.\libass\dwrite_c.h	210;"	d
IDWriteFont	.\libass\dwrite_c.h	/^typedef struct IDWriteFont IDWriteFont;$/;"	t	typeref:struct:IDWriteFont
IDWriteFontCollection	.\libass\dwrite_c.h	/^typedef struct IDWriteFontCollection IDWriteFontCollection;$/;"	t	typeref:struct:IDWriteFontCollection
IDWriteFontCollection_AddRef	.\libass\dwrite_c.h	310;"	d
IDWriteFontCollection_FindFamilyName	.\libass\dwrite_c.h	312;"	d
IDWriteFontCollection_GetFontFamily	.\libass\dwrite_c.h	313;"	d
IDWriteFontCollection_GetFontFamilyCount	.\libass\dwrite_c.h	314;"	d
IDWriteFontCollection_GetFontFromFontFace	.\libass\dwrite_c.h	315;"	d
IDWriteFontCollection_QueryInterface	.\libass\dwrite_c.h	309;"	d
IDWriteFontCollection_Release	.\libass\dwrite_c.h	311;"	d
IDWriteFontFace	.\libass\dwrite_c.h	/^typedef struct IDWriteFontFace IDWriteFontFace;$/;"	t	typeref:struct:IDWriteFontFace
IDWriteFontFace_GetFiles	.\libass\dwrite_c.h	346;"	d
IDWriteFontFace_GetIndex	.\libass\dwrite_c.h	347;"	d
IDWriteFontFace_GetType	.\libass\dwrite_c.h	345;"	d
IDWriteFontFace_Release	.\libass\dwrite_c.h	344;"	d
IDWriteFontFamily	.\libass\dwrite_c.h	/^typedef struct IDWriteFontFamily IDWriteFontFamily;$/;"	t	typeref:struct:IDWriteFontFamily
IDWriteFontFamily_AddRef	.\libass\dwrite_c.h	382;"	d
IDWriteFontFamily_GetFamilyNames	.\libass\dwrite_c.h	386;"	d
IDWriteFontFamily_GetFont	.\libass\dwrite_c.h	384;"	d
IDWriteFontFamily_GetFontCount	.\libass\dwrite_c.h	385;"	d
IDWriteFontFamily_QueryInterface	.\libass\dwrite_c.h	381;"	d
IDWriteFontFamily_Release	.\libass\dwrite_c.h	383;"	d
IDWriteFontFile	.\libass\dwrite_c.h	/^typedef struct IDWriteFontFile IDWriteFontFile;$/;"	t	typeref:struct:IDWriteFontFile
IDWriteFontFileLoader	.\libass\dwrite_c.h	/^typedef struct IDWriteFontFileLoader IDWriteFontFileLoader;$/;"	t	typeref:struct:IDWriteFontFileLoader
IDWriteFontFileLoader_AddRef	.\libass\dwrite_c.h	442;"	d
IDWriteFontFileLoader_CreateStreamFromKey	.\libass\dwrite_c.h	444;"	d
IDWriteFontFileLoader_QueryInterface	.\libass\dwrite_c.h	441;"	d
IDWriteFontFileLoader_Release	.\libass\dwrite_c.h	443;"	d
IDWriteFontFileStream	.\libass\dwrite_c.h	/^typedef struct IDWriteFontFileStream IDWriteFontFileStream;$/;"	t	typeref:struct:IDWriteFontFileStream
IDWriteFontFileStream_AddRef	.\libass\dwrite_c.h	480;"	d
IDWriteFontFileStream_GetFileSize	.\libass\dwrite_c.h	482;"	d
IDWriteFontFileStream_QueryInterface	.\libass\dwrite_c.h	479;"	d
IDWriteFontFileStream_ReadFileFragment	.\libass\dwrite_c.h	483;"	d
IDWriteFontFileStream_Release	.\libass\dwrite_c.h	481;"	d
IDWriteFontFileStream_ReleaseFileFragment	.\libass\dwrite_c.h	484;"	d
IDWriteFontFile_GetLoader	.\libass\dwrite_c.h	415;"	d
IDWriteFontFile_GetReferenceKey	.\libass\dwrite_c.h	416;"	d
IDWriteFontFile_Release	.\libass\dwrite_c.h	414;"	d
IDWriteFontList	.\libass\dwrite_c.h	/^typedef struct IDWriteFontList IDWriteFontList;$/;"	t	typeref:struct:IDWriteFontList
IDWriteFont_AddRef	.\libass\dwrite_c.h	262;"	d
IDWriteFont_CreateFontFace	.\libass\dwrite_c.h	264;"	d
IDWriteFont_GetFaceNames	.\libass\dwrite_c.h	265;"	d
IDWriteFont_GetFontFamily	.\libass\dwrite_c.h	266;"	d
IDWriteFont_GetInformationalStrings	.\libass\dwrite_c.h	267;"	d
IDWriteFont_GetMetrics	.\libass\dwrite_c.h	268;"	d
IDWriteFont_GetSimulations	.\libass\dwrite_c.h	269;"	d
IDWriteFont_GetStretch	.\libass\dwrite_c.h	270;"	d
IDWriteFont_GetStyle	.\libass\dwrite_c.h	271;"	d
IDWriteFont_GetWeight	.\libass\dwrite_c.h	272;"	d
IDWriteFont_HasCharacter	.\libass\dwrite_c.h	273;"	d
IDWriteFont_IsSymbolFont	.\libass\dwrite_c.h	274;"	d
IDWriteFont_QueryInterface	.\libass\dwrite_c.h	261;"	d
IDWriteFont_Release	.\libass\dwrite_c.h	263;"	d
IDWriteInlineObject	.\libass\dwrite_c.h	/^typedef struct IDWriteInlineObject IDWriteInlineObject;$/;"	t	typeref:struct:IDWriteInlineObject
IDWriteLocalizedStrings	.\libass\dwrite_c.h	/^typedef struct IDWriteLocalizedStrings IDWriteLocalizedStrings;$/;"	t	typeref:struct:IDWriteLocalizedStrings
IDWriteLocalizedStrings_GetCount	.\libass\dwrite_c.h	517;"	d
IDWriteLocalizedStrings_GetString	.\libass\dwrite_c.h	518;"	d
IDWriteLocalizedStrings_Release	.\libass\dwrite_c.h	516;"	d
IDWritePixelSnapping	.\libass\dwrite_c.h	/^typedef struct IDWritePixelSnapping IDWritePixelSnapping;$/;"	t	typeref:struct:IDWritePixelSnapping
IDWriteTextFormat	.\libass\dwrite_c.h	/^typedef struct IDWriteTextFormat IDWriteTextFormat;$/;"	t	typeref:struct:IDWriteTextFormat
IDWriteTextFormat_Release	.\libass\dwrite_c.h	539;"	d
IDWriteTextLayout	.\libass\dwrite_c.h	/^typedef struct IDWriteTextLayout IDWriteTextLayout;$/;"	t	typeref:struct:IDWriteTextLayout
IDWriteTextLayout_Draw	.\libass\dwrite_c.h	623;"	d
IDWriteTextLayout_Release	.\libass\dwrite_c.h	622;"	d
IDWriteTextRenderer	.\libass\dwrite_c.h	/^typedef struct IDWriteTextRenderer IDWriteTextRenderer;$/;"	t	typeref:struct:IDWriteTextRenderer
IMAGE_TYPE_CHARACTER	.\libass\ass.h	/^        IMAGE_TYPE_CHARACTER,$/;"	e	enum:ass_image::__anon2
IMAGE_TYPE_OUTLINE	.\libass\ass.h	/^        IMAGE_TYPE_OUTLINE,$/;"	e	enum:ass_image::__anon2
IMAGE_TYPE_SHADOW	.\libass\ass.h	/^        IMAGE_TYPE_SHADOW$/;"	e	enum:ass_image::__anon2
INIT_XMM	.\libass\x86\be_blur.asm	/^INIT_XMM sse2$/;"	l
INIT_XMM	.\libass\x86\blend_bitmaps.asm	/^INIT_XMM sse2$/;"	l
INIT_XMM	.\libass\x86\blend_bitmaps.asm	/^INIT_XMM$/;"	l
INIT_XMM	.\libass\x86\blur.asm	/^INIT_XMM sse2$/;"	l
INIT_XMM	.\libass\x86\cpuid.asm	/^INIT_XMM$/;"	l
INIT_XMM	.\libass\x86\rasterizer.asm	/^INIT_XMM sse2$/;"	l
INIT_XMM	.\libass\x86\x86inc.asm	/^INIT_XMM$/;"	l
INIT_YMM	.\libass\x86\be_blur.asm	/^INIT_YMM avx2$/;"	l
INIT_YMM	.\libass\x86\blend_bitmaps.asm	/^INIT_YMM avx2$/;"	l
INIT_YMM	.\libass\x86\blur.asm	/^INIT_YMM avx2$/;"	l
INIT_YMM	.\libass\x86\rasterizer.asm	/^INIT_YMM avx2$/;"	l
INTEL_CPUID_H	.\libass\x86\cpuid.h	20;"	d
INTERFACE	.\libass\dwrite_c.h	153;"	d
INTERFACE	.\libass\dwrite_c.h	154;"	d
INTERFACE	.\libass\dwrite_c.h	216;"	d
INTERFACE	.\libass\dwrite_c.h	217;"	d
INTERFACE	.\libass\dwrite_c.h	277;"	d
INTERFACE	.\libass\dwrite_c.h	278;"	d
INTERFACE	.\libass\dwrite_c.h	318;"	d
INTERFACE	.\libass\dwrite_c.h	319;"	d
INTERFACE	.\libass\dwrite_c.h	350;"	d
INTERFACE	.\libass\dwrite_c.h	351;"	d
INTERFACE	.\libass\dwrite_c.h	389;"	d
INTERFACE	.\libass\dwrite_c.h	390;"	d
INTERFACE	.\libass\dwrite_c.h	419;"	d
INTERFACE	.\libass\dwrite_c.h	420;"	d
INTERFACE	.\libass\dwrite_c.h	447;"	d
INTERFACE	.\libass\dwrite_c.h	448;"	d
INTERFACE	.\libass\dwrite_c.h	487;"	d
INTERFACE	.\libass\dwrite_c.h	488;"	d
INTERFACE	.\libass\dwrite_c.h	521;"	d
INTERFACE	.\libass\dwrite_c.h	522;"	d
INTERFACE	.\libass\dwrite_c.h	542;"	d
INTERFACE	.\libass\dwrite_c.h	543;"	d
INTERFACE	.\libass\dwrite_c.h	626;"	d
INTERFACE	.\libass\dwrite_c.h	627;"	d
INTVAL	.\libass\ass.c	276;"	d	file:
IS_WHITESPACE	.\libass\ass_render.c	1324;"	d	file:
IS_WHITESPACE	.\libass\ass_render.c	1375;"	d	file:
Italic	.\libass\ass_types.h	/^    int Italic;$/;"	m	struct:ass_style	access:public
Justify	.\libass\ass_types.h	/^    int Justify;$/;"	m	struct:ass_style	access:public
KERN	.\libass\ass_shaper.c	/^    KERN,$/;"	e	enum:__anon53	file:
Kerning	.\libass\ass_types.h	/^    int Kerning;$/;"	m	struct:ass_track	access:public
LIBASS_ASS_H	.\libass\ass.h	21;"	d
LIBASS_BITMAP_H	.\libass\ass_bitmap.h	20;"	d
LIBASS_CACHE_H	.\libass\ass_cache.h	21;"	d
LIBASS_COMPAT_H	.\libass\ass_compat.h	20;"	d
LIBASS_DRAWING_H	.\libass\ass_drawing.h	20;"	d
LIBASS_FONTSELECT_H	.\libass\ass_fontselect.h	20;"	d
LIBASS_FONT_H	.\libass\ass_font.h	20;"	d
LIBASS_LIBRARY_H	.\libass\ass_library.h	20;"	d
LIBASS_OUTLINE_H	.\libass\ass_outline.h	20;"	d
LIBASS_PARSE_H	.\libass\ass_parse.h	20;"	d
LIBASS_RASTERIZER_H	.\libass\ass_rasterizer.h	20;"	d
LIBASS_RENDER_H	.\libass\ass_render.h	21;"	d
LIBASS_SHAPER_H	.\libass\ass_shaper.h	20;"	d
LIBASS_TYPES_H	.\libass\ass_types.h	21;"	d
LIBASS_UTILS_H	.\libass\ass_utils.h	20;"	d
LIBASS_VERSION	.\libass\ass.h	27;"	d
LIGA	.\libass\ass_shaper.c	/^    LIGA,$/;"	e	enum:__anon53	file:
LT_OBJDIR	.\config.h	86;"	d
Language	.\libass\ass_types.h	/^    char *Language;$/;"	m	struct:ass_track	access:public
Layer	.\libass\ass_types.h	/^    int Layer;$/;"	m	struct:ass_event	access:public
LineInfo	.\libass\ass_render.h	/^} LineInfo;$/;"	t	typeref:struct:__anon45
MASK_CLIP_0	.\libass\ass_outline.c	/^    MASK_CLIP_0       = FLAG_CLIP_0       << FLAG_COUNT,$/;"	e	enum:__anon29	file:
MASK_CLIP_1	.\libass\ass_outline.c	/^    MASK_CLIP_1       = FLAG_CLIP_1       << FLAG_COUNT,$/;"	e	enum:__anon29	file:
MASK_INTERSECTION	.\libass\ass_outline.c	/^    MASK_INTERSECTION = FLAG_INTERSECTION << FLAG_COUNT,$/;"	e	enum:__anon29	file:
MASK_ZERO_0	.\libass\ass_outline.c	/^    MASK_ZERO_0       = FLAG_ZERO_0       << FLAG_COUNT,$/;"	e	enum:__anon29	file:
MASK_ZERO_1	.\libass\ass_outline.c	/^    MASK_ZERO_1       = FLAG_ZERO_1       << FLAG_COUNT,$/;"	e	enum:__anon29	file:
MAX_BE	.\libass\ass_parse.c	31;"	d	file:
MAX_BITMAPS_INITIAL	.\libass\ass_render.c	34;"	d	file:
MAX_FULLNAME	.\libass\ass_fontselect.c	51;"	d	file:
MAX_GLYPHS_INITIAL	.\libass\ass_render.c	32;"	d	file:
MAX_LINES_INITIAL	.\libass\ass_render.c	33;"	d	file:
MAX_NAME	.\libass\ass_fontconfig.c	33;"	d	file:
MAX_SUB_BITMAPS_INITIAL	.\libass\ass_render.c	35;"	d	file:
MAX_VALID_NARGS	.\libass\ass_parse.c	30;"	d	file:
MEGABYTE	.\libass\ass_render.h	44;"	d
MSGL_DBG2	.\libass\ass_utils.h	43;"	d
MSGL_ERR	.\libass\ass_utils.h	39;"	d
MSGL_FATAL	.\libass\ass_utils.h	38;"	d
MSGL_INFO	.\libass\ass_utils.h	41;"	d
MSGL_V	.\libass\ass_utils.h	42;"	d
MSGL_WARN	.\libass\ass_utils.h	40;"	d
MarginL	.\libass\ass_types.h	/^    int MarginL;$/;"	m	struct:ass_event	access:public
MarginL	.\libass\ass_types.h	/^    int MarginL;$/;"	m	struct:ass_style	access:public
MarginR	.\libass\ass_types.h	/^    int MarginR;$/;"	m	struct:ass_event	access:public
MarginR	.\libass\ass_types.h	/^    int MarginR;$/;"	m	struct:ass_style	access:public
MarginV	.\libass\ass_types.h	/^    int MarginV;$/;"	m	struct:ass_event	access:public
MarginV	.\libass\ass_types.h	/^    int MarginV;$/;"	m	struct:ass_style	access:public
MatchFontsFunc	.\libass\ass_fontselect.h	/^typedef void    (*MatchFontsFunc)(ASS_Library *lib,$/;"	t
NAME_MAX_LENGTH	.\libass\ass_directwrite.c	32;"	d	file:
NBSP	.\libass\ass_parse.c	32;"	d	file:
NEXT	.\libass\ass.c	239;"	d	file:
NUM_FEATURES	.\libass\ass_shaper.c	39;"	d	file:
Name	.\libass\ass_types.h	/^    char *Name;$/;"	m	struct:ass_event	access:public
Name	.\libass\ass_types.h	/^    char *Name;$/;"	m	struct:ass_style	access:public
Normal	.\libass\ass_outline.c	/^} Normal;$/;"	t	typeref:struct:__anon27	file:
OUTLINE_CONTOUR_END	.\libass\ass_outline.h	/^    OUTLINE_CONTOUR_END      = 4   \/\/ last segment in contour flag$/;"	e	enum:__anon34
OUTLINE_COUNT_MASK	.\libass\ass_outline.h	/^    OUTLINE_COUNT_MASK       = 3,  \/\/ spline order mask$/;"	e	enum:__anon34
OUTLINE_CUBIC_SPLINE	.\libass\ass_outline.h	/^    OUTLINE_CUBIC_SPLINE     = 3,  \/\/ cubic spline$/;"	e	enum:__anon34
OUTLINE_DRAWING	.\libass\ass_cache.h	/^        OUTLINE_DRAWING,$/;"	e	enum:outline_hash_key::__anon14
OUTLINE_GLYPH	.\libass\ass_cache.h	/^        OUTLINE_GLYPH,$/;"	e	enum:outline_hash_key::__anon14
OUTLINE_LINE_SEGMENT	.\libass\ass_outline.h	/^    OUTLINE_LINE_SEGMENT     = 1,  \/\/ line segment$/;"	e	enum:__anon34
OUTLINE_MAX	.\libass\ass_outline.h	87;"	d
OUTLINE_MIN	.\libass\ass_outline.h	86;"	d
OUTLINE_QUADRATIC_SPLINE	.\libass\ass_outline.h	/^    OUTLINE_QUADRATIC_SPLINE = 2,  \/\/ quadratic spline$/;"	e	enum:__anon34
Outline	.\libass\ass_types.h	/^    double Outline;$/;"	m	struct:ass_style	access:public
OutlineColour	.\libass\ass_types.h	/^    uint32_t OutlineColour;$/;"	m	struct:ass_style	access:public
OutlineHashKey	.\libass\ass_cache.h	/^} OutlineHashKey;$/;"	t	typeref:struct:outline_hash_key
OutlineHashValue	.\libass\ass_cache.h	/^} OutlineHashValue;$/;"	t	typeref:struct:__anon12
OutlineSegment	.\libass\ass_rasterizer.c	/^} OutlineSegment;$/;"	t	typeref:struct:__anon36	file:
PACKAGE	.\config.h	89;"	d
PACKAGE_BUGREPORT	.\config.h	92;"	d
PACKAGE_NAME	.\config.h	95;"	d
PACKAGE_STRING	.\config.h	98;"	d
PACKAGE_TARNAME	.\config.h	101;"	d
PACKAGE_URL	.\config.h	104;"	d
PACKAGE_VERSION	.\config.h	107;"	d
PARSED_A	.\libass\ass_render.h	50;"	d
PARSED_FADE	.\libass\ass_render.h	49;"	d
PARSE_END	.\libass\ass.c	258;"	d	file:
PARSE_START	.\libass\ass.c	257;"	d	file:
PRE_BLUR1_HORZ	.\libass\x86\blur.asm	/^PRE_BLUR1_HORZ$/;"	l
PRE_BLUR1_VERT	.\libass\x86\blur.asm	/^PRE_BLUR1_VERT$/;"	l
PRE_BLUR2_HORZ	.\libass\x86\blur.asm	/^PRE_BLUR2_HORZ$/;"	l
PRE_BLUR2_VERT	.\libass\x86\blur.asm	/^PRE_BLUR2_VERT$/;"	l
PRE_BLUR3_HORZ	.\libass\x86\blur.asm	/^PRE_BLUR3_HORZ$/;"	l
PRE_BLUR3_VERT	.\libass\x86\blur.asm	/^PRE_BLUR3_VERT$/;"	l
PST_EVENTS	.\libass\ass.c	/^    PST_EVENTS,$/;"	e	enum:__anon1	file:
PST_FONTS	.\libass\ass.c	/^    PST_FONTS$/;"	e	enum:__anon1	file:
PST_INFO	.\libass\ass.c	/^    PST_INFO,$/;"	e	enum:__anon1	file:
PST_STYLES	.\libass\ass.c	/^    PST_STYLES,$/;"	e	enum:__anon1	file:
PST_UNKNOWN	.\libass\ass.c	/^    PST_UNKNOWN = 0,$/;"	e	enum:__anon1	file:
ParamFilterFunc	.\libass\ass_bitmap.h	/^typedef void (*ParamFilterFunc)(int16_t *dst, const int16_t *src,$/;"	t
ParserState	.\libass\ass.c	/^} ParserState;$/;"	t	typeref:enum:__anon1	file:
PlayResX	.\libass\ass_types.h	/^    int PlayResX;$/;"	m	struct:ass_track	access:public
PlayResY	.\libass\ass_types.h	/^    int PlayResY;$/;"	m	struct:ass_track	access:public
PrimaryColour	.\libass\ass_types.h	/^    uint32_t PrimaryColour;$/;"	m	struct:ass_style	access:public
ProviderPrivate	.\libass\ass_directwrite.c	/^} ProviderPrivate;$/;"	t	typeref:struct:__anon23	file:
ProviderPrivate	.\libass\ass_fontconfig.c	/^} ProviderPrivate;$/;"	t	typeref:struct:fc_private	file:
RasterizerData	.\libass\ass_rasterizer.h	/^} RasterizerData;$/;"	t	typeref:struct:__anon39
ReadOrder	.\libass\ass_types.h	/^    int ReadOrder;$/;"	m	struct:ass_event	access:public
Rect	.\libass\ass_render.h	/^} Rect;$/;"	t	typeref:struct:__anon51
RenderContext	.\libass\ass_render.h	/^} RenderContext;$/;"	t	typeref:struct:__anon47
RenderPriv	.\libass\ass_render.h	/^} RenderPriv;$/;"	t	typeref:struct:render_priv
SAFE_CFRelease	.\libass\ass_coretext.c	32;"	d	file:
SCROLL_BT	.\libass\ass_render.h	/^        SCROLL_BT$/;"	e	enum:__anon47::__anon49
SCROLL_LR	.\libass\ass_render.h	/^        SCROLL_LR,              \/\/ left-to-right$/;"	e	enum:__anon47::__anon49
SCROLL_RL	.\libass\ass_render.h	/^        SCROLL_RL,$/;"	e	enum:__anon47::__anon49
SCROLL_TB	.\libass\ass_render.h	/^        SCROLL_TB,              \/\/ top-to-bottom$/;"	e	enum:__anon47::__anon49
SECTION	.\libass\x86\be_blur.asm	/^SECTION .text$/;"	l
SECTION	.\libass\x86\blend_bitmaps.asm	/^SECTION .text$/;"	l
SECTION	.\libass\x86\blur.asm	/^SECTION .text$/;"	l
SECTION	.\libass\x86\cpuid.asm	/^SECTION .text$/;"	l
SECTION	.\libass\x86\rasterizer.asm	/^SECTION .text$/;"	l
SECTION_RODATA	.\libass\x86\be_blur.asm	/^SECTION_RODATA 32$/;"	l
SECTION_RODATA	.\libass\x86\blend_bitmaps.asm	/^SECTION_RODATA 32$/;"	l
SECTION_RODATA	.\libass\x86\blur.asm	/^SECTION_RODATA 32$/;"	l
SECTION_RODATA	.\libass\x86\rasterizer.asm	/^SECTION_RODATA 32$/;"	l
SEGFLAG_DN	.\libass\ass_rasterizer.h	/^    SEGFLAG_DN           =  1,$/;"	e	enum:__anon38
SEGFLAG_EXACT_BOTTOM	.\libass\ass_rasterizer.h	/^    SEGFLAG_EXACT_BOTTOM = 32,$/;"	e	enum:__anon38
SEGFLAG_EXACT_LEFT	.\libass\ass_rasterizer.h	/^    SEGFLAG_EXACT_LEFT   =  4,$/;"	e	enum:__anon38
SEGFLAG_EXACT_RIGHT	.\libass\ass_rasterizer.h	/^    SEGFLAG_EXACT_RIGHT  =  8,$/;"	e	enum:__anon38
SEGFLAG_EXACT_TOP	.\libass\ass_rasterizer.h	/^    SEGFLAG_EXACT_TOP    = 16,$/;"	e	enum:__anon38
SEGFLAG_UL_DR	.\libass\ass_rasterizer.h	/^    SEGFLAG_UL_DR        =  2,$/;"	e	enum:__anon38
SHRINK_HORZ	.\libass\x86\blur.asm	/^SHRINK_HORZ$/;"	l
SHRINK_VERT	.\libass\x86\blur.asm	/^SHRINK_VERT$/;"	l
SIZE_MAX	.\libass\ass_utils.h	35;"	d
STARREDSTRVAL	.\libass\ass.c	269;"	d	file:
START	.\libass\ass_cache_template.h	129;"	d
START	.\libass\ass_cache_template.h	18;"	d
START	.\libass\ass_cache_template.h	38;"	d
START	.\libass\ass_cache_template.h	3;"	d
STDC_HEADERS	.\config.h	110;"	d
STRING	.\libass\ass_cache_template.h	131;"	d
STRING	.\libass\ass_cache_template.h	26;"	d
STRING	.\libass\ass_cache_template.h	45;"	d
STRING	.\libass\ass_cache_template.h	7;"	d
STRIPE_MASK	.\libass\ass_blur.c	47;"	d	file:
STRIPE_PACK	.\libass\x86\blur.asm	/^STRIPE_PACK$/;"	l
STRIPE_UNPACK	.\libass\x86\blur.asm	/^STRIPE_UNPACK$/;"	l
STRIPE_WIDTH	.\libass\ass_blur.c	46;"	d	file:
STRVAL	.\libass\ass.c	264;"	d	file:
STYLEVAL	.\libass\ass.c	282;"	d	file:
SUBPIXEL_ACCURACY	.\libass\ass_render.c	37;"	d	file:
SUBPIXEL_MASK	.\libass\ass_render.c	36;"	d	file:
SUB_BITMAPS	.\libass\x86\blend_bitmaps.asm	/^SUB_BITMAPS$/;"	l
ScaleX	.\libass\ass_types.h	/^    double ScaleX;$/;"	m	struct:ass_style	access:public
ScaleY	.\libass\ass_types.h	/^    double ScaleY;$/;"	m	struct:ass_style	access:public
ScaledBorderAndShadow	.\libass\ass_types.h	/^    int ScaledBorderAndShadow;$/;"	m	struct:ass_track	access:public
SecondaryColour	.\libass\ass_types.h	/^    uint32_t SecondaryColour;$/;"	m	struct:ass_style	access:public
Segment	.\libass\ass_render.h	/^} Segment;$/;"	t	typeref:struct:__anon52
Shadow	.\libass\ass_types.h	/^    double Shadow;$/;"	m	struct:ass_style	access:public
Spacing	.\libass\ass_types.h	/^    double Spacing;$/;"	m	struct:ass_style	access:public
Start	.\libass\ass_types.h	/^    long long Start;            \/\/ ms$/;"	m	struct:ass_event	access:public
StrikeOut	.\libass\ass_types.h	/^    int StrikeOut;$/;"	m	struct:ass_style	access:public
StrokerState	.\libass\ass_outline.c	/^} StrokerState;$/;"	t	typeref:struct:__anon28	file:
Style	.\libass\ass_types.h	/^    int Style;$/;"	m	struct:ass_event	access:public
SubstituteFontFunc	.\libass\ass_fontselect.h	/^typedef void    (*SubstituteFontFunc)(void *priv, const char *name,$/;"	t
TIMEVAL	.\libass\ass.c	278;"	d	file:
TOKEN_B_SPLINE	.\libass\ass_drawing.h	/^    TOKEN_B_SPLINE,$/;"	e	enum:__anon24
TOKEN_CLOSE	.\libass\ass_drawing.h	/^    TOKEN_CLOSE$/;"	e	enum:__anon24
TOKEN_CONIC_BEZIER	.\libass\ass_drawing.h	/^    TOKEN_CONIC_BEZIER,$/;"	e	enum:__anon24
TOKEN_CUBIC_BEZIER	.\libass\ass_drawing.h	/^    TOKEN_CUBIC_BEZIER,$/;"	e	enum:__anon24
TOKEN_EXTEND_SPLINE	.\libass\ass_drawing.h	/^    TOKEN_EXTEND_SPLINE,$/;"	e	enum:__anon24
TOKEN_LINE	.\libass\ass_drawing.h	/^    TOKEN_LINE,$/;"	e	enum:__anon24
TOKEN_MOVE	.\libass\ass_drawing.h	/^    TOKEN_MOVE,$/;"	e	enum:__anon24
TOKEN_MOVE_NC	.\libass\ass_drawing.h	/^    TOKEN_MOVE_NC,$/;"	e	enum:__anon24
TRACK_TYPE_ASS	.\libass\ass_types.h	/^        TRACK_TYPE_ASS,$/;"	e	enum:ass_track::__anon54
TRACK_TYPE_SSA	.\libass\ass_types.h	/^        TRACK_TYPE_SSA$/;"	e	enum:ass_track::__anon54
TRACK_TYPE_UNKNOWN	.\libass\ass_types.h	/^        TRACK_TYPE_UNKNOWN = 0,$/;"	e	enum:ass_track::__anon54
Text	.\libass\ass_types.h	/^    char *Text;$/;"	m	struct:ass_event	access:public
TextInfo	.\libass\ass_render.h	/^} TextInfo;$/;"	t	typeref:struct:__anon46
Timer	.\libass\ass_types.h	/^    double Timer;$/;"	m	struct:ass_track	access:public
Underline	.\libass\ass_types.h	/^    int Underline;$/;"	m	struct:ass_style	access:public
VALIGN_CENTER	.\libass\ass_types.h	26;"	d
VALIGN_SUB	.\libass\ass_types.h	25;"	d
VALIGN_TOP	.\libass\ass_types.h	27;"	d
VECTOR	.\libass\ass_cache_template.h	132;"	d
VECTOR	.\libass\ass_cache_template.h	28;"	d
VECTOR	.\libass\ass_cache_template.h	47;"	d
VECTOR	.\libass\ass_cache_template.h	9;"	d
VERSION	.\config.h	113;"	d
VERT	.\libass\ass_shaper.c	/^    VERT = 0,$/;"	e	enum:__anon53	file:
VERTICAL_LOWER_BOUND	.\libass\ass_font.h	35;"	d
VKNA	.\libass\ass_shaper.c	/^    VKNA,$/;"	e	enum:__anon53	file:
WrapStyle	.\libass\ass_types.h	/^    int WrapStyle;$/;"	m	struct:ass_track	access:public
YCBCR_BT601_PC	.\libass\ass_types.h	/^    YCBCR_BT601_PC,$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_BT601_TV	.\libass\ass_types.h	/^    YCBCR_BT601_TV,$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_BT709_PC	.\libass\ass_types.h	/^    YCBCR_BT709_PC,$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_BT709_TV	.\libass\ass_types.h	/^    YCBCR_BT709_TV,$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_DEFAULT	.\libass\ass_types.h	/^    YCBCR_DEFAULT = 0,  \/\/ Header missing$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_FCC_PC	.\libass\ass_types.h	/^    YCBCR_FCC_PC$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_FCC_TV	.\libass\ass_types.h	/^    YCBCR_FCC_TV,$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_NONE	.\libass\ass_types.h	/^    YCBCR_NONE,         \/\/ "None" special value$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_SMPTE240M_PC	.\libass\ass_types.h	/^    YCBCR_SMPTE240M_PC,$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_SMPTE240M_TV	.\libass\ass_types.h	/^    YCBCR_SMPTE240M_TV,$/;"	e	enum:ASS_YCbCrMatrix
YCBCR_UNKNOWN	.\libass\ass_types.h	/^    YCBCR_UNKNOWN,      \/\/ Header could not be parsed correctly$/;"	e	enum:ASS_YCbCrMatrix
YCbCrMatrix	.\libass\ass_types.h	/^    ASS_YCbCrMatrix YCbCrMatrix;$/;"	m	struct:ass_track	access:public
_CRT_NONSTDC_NO_DEPRECATE	.\libass\ass_compat.h	23;"	d
_CRT_SECURE_NO_WARNINGS	.\libass\ass_compat.h	24;"	d
_USE_MATH_DEFINES	.\libass\ass_compat.h	25;"	d
__INC_DWRITE__	.\libass\dwrite_c.h	11;"	d
__MINGW_DEF_ARG_VAL	.\libass\dwrite_c.h	147;"	d
__MINGW_DEF_ARG_VAL	.\libass\dwrite_c.h	149;"	d
__anon10::bm	.\libass\ass_cache.h	/^    Bitmap *bm;               \/\/ the actual bitmaps$/;"	m	struct:__anon10	access:public
__anon10::bm_o	.\libass\ass_cache.h	/^    Bitmap *bm_o;$/;"	m	struct:__anon10	access:public
__anon10::valid	.\libass\ass_cache.h	/^    bool valid;$/;"	m	struct:__anon10	access:public
__anon11::bm	.\libass\ass_cache.h	/^    Bitmap *bm;$/;"	m	struct:__anon11	access:public
__anon11::bm_o	.\libass\ass_cache.h	/^    Bitmap *bm_o;$/;"	m	struct:__anon11	access:public
__anon11::bm_s	.\libass\ass_cache.h	/^    Bitmap *bm_s;$/;"	m	struct:__anon11	access:public
__anon12::advance	.\libass\ass_cache.h	/^    ASS_Vector advance;         \/\/ 26.6, advance distance to the next outline in line$/;"	m	struct:__anon12	access:public
__anon12::asc	.\libass\ass_cache.h	/^    int asc, desc;              \/\/ ascender\/descender$/;"	m	struct:__anon12	access:public
__anon12::bbox_scaled	.\libass\ass_cache.h	/^    ASS_Rect bbox_scaled;       \/\/ bbox after scaling, but before rotation$/;"	m	struct:__anon12	access:public
__anon12::border	.\libass\ass_cache.h	/^    ASS_Outline border[2];$/;"	m	struct:__anon12	access:public
__anon12::desc	.\libass\ass_cache.h	/^    int asc, desc;              \/\/ ascender\/descender$/;"	m	struct:__anon12	access:public
__anon12::outline	.\libass\ass_cache.h	/^    ASS_Outline outline;$/;"	m	struct:__anon12	access:public
__anon12::valid	.\libass\ass_cache.h	/^    bool valid;$/;"	m	struct:__anon12	access:public
__anon13::metrics	.\libass\ass_cache.h	/^    FT_Glyph_Metrics metrics;$/;"	m	struct:__anon13	access:public
__anon18::image	.\libass\ass_cache.h	/^    BitmapHashValue *image;$/;"	m	struct:__anon18	access:public
__anon18::x	.\libass\ass_cache.h	/^    int x, y;$/;"	m	struct:__anon18	access:public
__anon18::y	.\libass\ass_cache.h	/^    int x, y;$/;"	m	struct:__anon18	access:public
__anon20::bitmap_count	.\libass\ass_cache.h	/^    size_t bitmap_count;$/;"	m	struct:__anon20	access:public
__anon20::bitmaps	.\libass\ass_cache.h	/^    BitmapRef *bitmaps;$/;"	m	struct:__anon20	access:public
__anon20::filter	.\libass\ass_cache.h	/^    FilterDesc filter;$/;"	m	struct:__anon20	access:public
__anon21::compare_func	.\libass\ass_cache.h	/^    HashCompare compare_func;$/;"	m	struct:__anon21	access:public
__anon21::destruct_func	.\libass\ass_cache.h	/^    CacheItemDestructor destruct_func;$/;"	m	struct:__anon21	access:public
__anon21::hash_func	.\libass\ass_cache.h	/^    HashFunction hash_func;$/;"	m	struct:__anon21	access:public
__anon21::key_move_func	.\libass\ass_cache.h	/^    CacheKeyMove key_move_func;$/;"	m	struct:__anon21	access:public
__anon21::key_size	.\libass\ass_cache.h	/^    size_t key_size;$/;"	m	struct:__anon21	access:public
__anon21::value_size	.\libass\ass_cache.h	/^    size_t value_size;$/;"	m	struct:__anon21	access:public
__anon22::face	.\libass\ass_directwrite.c	/^    IDWriteFontFace *face;$/;"	m	struct:__anon22	file:	access:public
__anon22::font	.\libass\ass_directwrite.c	/^    IDWriteFont *font;$/;"	m	struct:__anon22	file:	access:public
__anon22::stream	.\libass\ass_directwrite.c	/^    IDWriteFontFileStream *stream;$/;"	m	struct:__anon22	file:	access:public
__anon23::directwrite_lib	.\libass\ass_directwrite.c	/^    HMODULE directwrite_lib;$/;"	m	struct:__anon23	file:	access:public
__anon23::factory	.\libass\ass_directwrite.c	/^    IDWriteFactory *factory;$/;"	m	struct:__anon23	file:	access:public
__anon25::advance	.\libass\ass_drawing.h	/^    ASS_Vector advance;  \/\/ advance (from cbox)$/;"	m	struct:__anon25	access:public
__anon25::asc	.\libass\ass_drawing.h	/^    int asc;             \/\/ ascender$/;"	m	struct:__anon25	access:public
__anon25::cbox	.\libass\ass_drawing.h	/^    ASS_Rect cbox;   \/\/ bounding box, or let's say... VSFilter's idea of it$/;"	m	struct:__anon25	access:public
__anon25::desc	.\libass\ass_drawing.h	/^    int desc;            \/\/ descender$/;"	m	struct:__anon25	access:public
__anon25::hash	.\libass\ass_drawing.h	/^    int hash;            \/\/ hash value (for caching)$/;"	m	struct:__anon25	access:public
__anon25::library	.\libass\ass_drawing.h	/^    ASS_Library *library;$/;"	m	struct:__anon25	access:public
__anon25::outline	.\libass\ass_drawing.h	/^    ASS_Outline outline; \/\/ target outline$/;"	m	struct:__anon25	access:public
__anon25::pbo	.\libass\ass_drawing.h	/^    double pbo; \/\/ drawing will be shifted in y direction by this amount$/;"	m	struct:__anon25	access:public
__anon25::point_scale_x	.\libass\ass_drawing.h	/^    double point_scale_x;$/;"	m	struct:__anon25	access:public
__anon25::point_scale_y	.\libass\ass_drawing.h	/^    double point_scale_y;$/;"	m	struct:__anon25	access:public
__anon25::scale	.\libass\ass_drawing.h	/^    int scale;  \/\/ scale (1-64) for subpixel accuracy$/;"	m	struct:__anon25	access:public
__anon25::scale_x	.\libass\ass_drawing.h	/^    double scale_x;      \/\/ FontScaleX$/;"	m	struct:__anon25	access:public
__anon25::scale_y	.\libass\ass_drawing.h	/^    double scale_y;      \/\/ FontScaleY$/;"	m	struct:__anon25	access:public
__anon25::text	.\libass\ass_drawing.h	/^    char *text; \/\/ drawing string$/;"	m	struct:__anon25	access:public
__anon25::tokens	.\libass\ass_drawing.h	/^    ASS_DrawingToken *tokens;    \/\/ tokenized drawing$/;"	m	struct:__anon25	access:public
__anon26::data	.\libass\ass_library.h	/^    char *data;$/;"	m	struct:__anon26	access:public
__anon26::name	.\libass\ass_library.h	/^    char *name;$/;"	m	struct:__anon26	access:public
__anon26::size	.\libass\ass_library.h	/^    int size;$/;"	m	struct:__anon26	access:public
__anon27::len	.\libass\ass_outline.c	/^    double len;$/;"	m	struct:__anon27	file:	access:public
__anon27::v	.\libass\ass_outline.c	/^    ASS_DVector v;$/;"	m	struct:__anon27	file:	access:public
__anon28::contour_first	.\libass\ass_outline.c	/^    size_t contour_first[2];  \/\/ start position of last contours$/;"	m	struct:__anon28	file:	access:public
__anon28::contour_start	.\libass\ass_outline.c	/^    bool contour_start;$/;"	m	struct:__anon28	file:	access:public
__anon28::eps	.\libass\ass_outline.c	/^    int eps;                  \/\/ allowable error in coordinate space$/;"	m	struct:__anon28	file:	access:public
__anon28::err_a	.\libass\ass_outline.c	/^    double err_a;$/;"	m	struct:__anon28	file:	access:public
__anon28::err_c	.\libass\ass_outline.c	/^    double err_c;$/;"	m	struct:__anon28	file:	access:public
__anon28::err_q	.\libass\ass_outline.c	/^    double err_q;$/;"	m	struct:__anon28	file:	access:public
__anon28::first_normal	.\libass\ass_outline.c	/^    ASS_DVector first_normal, last_normal;$/;"	m	struct:__anon28	file:	access:public
__anon28::first_point	.\libass\ass_outline.c	/^    ASS_Vector first_point;$/;"	m	struct:__anon28	file:	access:public
__anon28::first_skip	.\libass\ass_outline.c	/^    int first_skip, last_skip;$/;"	m	struct:__anon28	file:	access:public
__anon28::last_normal	.\libass\ass_outline.c	/^    ASS_DVector first_normal, last_normal;$/;"	m	struct:__anon28	file:	access:public
__anon28::last_skip	.\libass\ass_outline.c	/^    int first_skip, last_skip;$/;"	m	struct:__anon28	file:	access:public
__anon28::merge_cos	.\libass\ass_outline.c	/^    double merge_cos;$/;"	m	struct:__anon28	file:	access:public
__anon28::min_len	.\libass\ass_outline.c	/^    double min_len;$/;"	m	struct:__anon28	file:	access:public
__anon28::result	.\libass\ass_outline.c	/^    ASS_Outline *result[2];   \/\/ result outlines$/;"	m	struct:__anon28	file:	access:public
__anon28::split_cos	.\libass\ass_outline.c	/^    double split_cos;$/;"	m	struct:__anon28	file:	access:public
__anon28::xbord	.\libass\ass_outline.c	/^    double xbord, ybord;      \/\/ border sizes$/;"	m	struct:__anon28	file:	access:public
__anon28::xscale	.\libass\ass_outline.c	/^    double xscale, yscale;    \/\/ inverse border sizes$/;"	m	struct:__anon28	file:	access:public
__anon28::ybord	.\libass\ass_outline.c	/^    double xbord, ybord;      \/\/ border sizes$/;"	m	struct:__anon28	file:	access:public
__anon28::yscale	.\libass\ass_outline.c	/^    double xscale, yscale;    \/\/ inverse border sizes$/;"	m	struct:__anon28	file:	access:public
__anon30::x	.\libass\ass_outline.h	/^    int32_t x, y;$/;"	m	struct:__anon30	access:public
__anon30::y	.\libass\ass_outline.h	/^    int32_t x, y;$/;"	m	struct:__anon30	access:public
__anon31::x	.\libass\ass_outline.h	/^    double x, y;$/;"	m	struct:__anon31	access:public
__anon31::y	.\libass\ass_outline.h	/^    double x, y;$/;"	m	struct:__anon31	access:public
__anon32::x_max	.\libass\ass_outline.h	/^    int32_t x_min, y_min, x_max, y_max;$/;"	m	struct:__anon32	access:public
__anon32::x_min	.\libass\ass_outline.h	/^    int32_t x_min, y_min, x_max, y_max;$/;"	m	struct:__anon32	access:public
__anon32::y_max	.\libass\ass_outline.h	/^    int32_t x_min, y_min, x_max, y_max;$/;"	m	struct:__anon32	access:public
__anon32::y_min	.\libass\ass_outline.h	/^    int32_t x_min, y_min, x_max, y_max;$/;"	m	struct:__anon32	access:public
__anon33::x_max	.\libass\ass_outline.h	/^    double x_min, y_min, x_max, y_max;$/;"	m	struct:__anon33	access:public
__anon33::x_min	.\libass\ass_outline.h	/^    double x_min, y_min, x_max, y_max;$/;"	m	struct:__anon33	access:public
__anon33::y_max	.\libass\ass_outline.h	/^    double x_min, y_min, x_max, y_max;$/;"	m	struct:__anon33	access:public
__anon33::y_min	.\libass\ass_outline.h	/^    double x_min, y_min, x_max, y_max;$/;"	m	struct:__anon33	access:public
__anon35::max_points	.\libass\ass_outline.h	/^    size_t n_points, max_points;$/;"	m	struct:__anon35	access:public
__anon35::max_segments	.\libass\ass_outline.h	/^    size_t n_segments, max_segments;$/;"	m	struct:__anon35	access:public
__anon35::n_points	.\libass\ass_outline.h	/^    size_t n_points, max_points;$/;"	m	struct:__anon35	access:public
__anon35::n_segments	.\libass\ass_outline.h	/^    size_t n_segments, max_segments;$/;"	m	struct:__anon35	access:public
__anon35::points	.\libass\ass_outline.h	/^    ASS_Vector *points;$/;"	m	struct:__anon35	access:public
__anon35::segments	.\libass\ass_outline.h	/^    char *segments;$/;"	m	struct:__anon35	access:public
__anon36::er	.\libass\ass_rasterizer.c	/^    int64_t r2, er;$/;"	m	struct:__anon36	file:	access:public
__anon36::r	.\libass\ass_rasterizer.c	/^    ASS_Vector r;$/;"	m	struct:__anon36	file:	access:public
__anon36::r2	.\libass\ass_rasterizer.c	/^    int64_t r2, er;$/;"	m	struct:__anon36	file:	access:public
__anon39::bbox	.\libass\ass_rasterizer.h	/^    ASS_Rect bbox;$/;"	m	struct:__anon39	access:public
__anon39::capacity	.\libass\ass_rasterizer.h	/^    size_t size[2], capacity[2];$/;"	m	struct:__anon39	access:public
__anon39::linebuf	.\libass\ass_rasterizer.h	/^    struct segment *linebuf[2];$/;"	m	struct:__anon39	typeref:struct:__anon39::segment	access:public
__anon39::n_first	.\libass\ass_rasterizer.h	/^    size_t n_first;$/;"	m	struct:__anon39	access:public
__anon39::outline_error	.\libass\ass_rasterizer.h	/^    int outline_error;  \/\/ acceptable error (in 1\/64 pixel units)$/;"	m	struct:__anon39	access:public
__anon39::size	.\libass\ass_rasterizer.h	/^    size_t size[2], capacity[2];$/;"	m	struct:__anon39	access:public
__anon39::tile	.\libass\ass_rasterizer.h	/^    uint8_t *tile;$/;"	m	struct:__anon39	access:public
__anon40::ref_count	.\libass\ass_render.h	/^    size_t ref_count;$/;"	m	struct:__anon40	access:public
__anon40::result	.\libass\ass_render.h	/^    ASS_Image result;$/;"	m	struct:__anon40	access:public
__anon40::source	.\libass\ass_render.h	/^    CompositeHashValue *source;$/;"	m	struct:__anon40	access:public
__anon41::bottom_margin	.\libass\ass_render.h	/^    int bottom_margin;          \/\/ height of bottom margin. (frame_height - top_margin - bottom_margin) is original video height.$/;"	m	struct:__anon41	access:public
__anon41::default_family	.\libass\ass_render.h	/^    char *default_family;$/;"	m	struct:__anon41	access:public
__anon41::default_font	.\libass\ass_render.h	/^    char *default_font;$/;"	m	struct:__anon41	access:public
__anon41::font_size_coeff	.\libass\ass_render.h	/^    double font_size_coeff;     \/\/ font size multiplier$/;"	m	struct:__anon41	access:public
__anon41::frame_height	.\libass\ass_render.h	/^    int frame_height;$/;"	m	struct:__anon41	access:public
__anon41::frame_width	.\libass\ass_render.h	/^    int frame_width;$/;"	m	struct:__anon41	access:public
__anon41::hinting	.\libass\ass_render.h	/^    ASS_Hinting hinting;$/;"	m	struct:__anon41	access:public
__anon41::left_margin	.\libass\ass_render.h	/^    int left_margin;$/;"	m	struct:__anon41	access:public
__anon41::line_position	.\libass\ass_render.h	/^    double line_position;       \/\/ vertical position for subtitles, 0-100 (0 = no change)$/;"	m	struct:__anon41	access:public
__anon41::line_spacing	.\libass\ass_render.h	/^    double line_spacing;        \/\/ additional line spacing (in frame pixels)$/;"	m	struct:__anon41	access:public
__anon41::par	.\libass\ass_render.h	/^    double par;                 \/\/ user defined pixel aspect ratio (0 = unset)$/;"	m	struct:__anon41	access:public
__anon41::right_margin	.\libass\ass_render.h	/^    int right_margin;$/;"	m	struct:__anon41	access:public
__anon41::selective_style_overrides	.\libass\ass_render.h	/^    int selective_style_overrides; \/\/ ASS_OVERRIDE_* flags$/;"	m	struct:__anon41	access:public
__anon41::shaper	.\libass\ass_render.h	/^    ASS_ShapingLevel shaper;$/;"	m	struct:__anon41	access:public
__anon41::storage_height	.\libass\ass_render.h	/^    int storage_height;         \/\/ video height before any rescaling$/;"	m	struct:__anon41	access:public
__anon41::storage_width	.\libass\ass_render.h	/^    int storage_width;          \/\/ video width before any rescaling$/;"	m	struct:__anon41	access:public
__anon41::top_margin	.\libass\ass_render.h	/^    int top_margin;             \/\/ height of top margin. Everything except toptitles is shifted down by top_margin.$/;"	m	struct:__anon41	access:public
__anon41::use_margins	.\libass\ass_render.h	/^    int use_margins;            \/\/ 0 - place all subtitles inside original frame$/;"	m	struct:__anon41	access:public
__anon42::detect_collisions	.\libass\ass_render.h	/^    int detect_collisions;$/;"	m	struct:__anon42	access:public
__anon42::event	.\libass\ass_render.h	/^    ASS_Event *event;$/;"	m	struct:__anon42	access:public
__anon42::height	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:__anon42	access:public
__anon42::imgs	.\libass\ass_render.h	/^    ASS_Image *imgs;$/;"	m	struct:__anon42	access:public
__anon42::left	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:__anon42	access:public
__anon42::shift_direction	.\libass\ass_render.h	/^    int shift_direction;$/;"	m	struct:__anon42	access:public
__anon42::top	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:__anon42	access:public
__anon42::width	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:__anon42	access:public
__anon44::bitmap_count	.\libass\ass_render.h	/^    size_t bitmap_count, max_bitmap_count;$/;"	m	struct:__anon44	access:public
__anon44::bitmaps	.\libass\ass_render.h	/^    BitmapRef *bitmaps;$/;"	m	struct:__anon44	access:public
__anon44::bm	.\libass\ass_render.h	/^    Bitmap *bm, *bm_o, *bm_s;   \/\/ glyphs, outline, shadow bitmaps$/;"	m	struct:__anon44	access:public
__anon44::bm_o	.\libass\ass_render.h	/^    Bitmap *bm, *bm_o, *bm_s;   \/\/ glyphs, outline, shadow bitmaps$/;"	m	struct:__anon44	access:public
__anon44::bm_s	.\libass\ass_render.h	/^    Bitmap *bm, *bm_o, *bm_s;   \/\/ glyphs, outline, shadow bitmaps$/;"	m	struct:__anon44	access:public
__anon44::c	.\libass\ass_render.h	/^    uint32_t c[4];              \/\/ colors$/;"	m	struct:__anon44	access:public
__anon44::effect_timing	.\libass\ass_render.h	/^    int effect_timing;          \/\/ time duration of current karaoke word$/;"	m	struct:__anon44	access:public
__anon44::effect_type	.\libass\ass_render.h	/^    Effect effect_type;$/;"	m	struct:__anon44	access:public
__anon44::filter	.\libass\ass_render.h	/^    FilterDesc filter;$/;"	m	struct:__anon44	access:public
__anon44::first_pos_x	.\libass\ass_render.h	/^    int first_pos_x;$/;"	m	struct:__anon44	access:public
__anon44::image	.\libass\ass_render.h	/^    CompositeHashValue *image;$/;"	m	struct:__anon44	access:public
__anon44::max_bitmap_count	.\libass\ass_render.h	/^    size_t bitmap_count, max_bitmap_count;$/;"	m	struct:__anon44	access:public
__anon44::n_bm	.\libass\ass_render.h	/^    size_t n_bm, n_bm_o;$/;"	m	struct:__anon44	access:public
__anon44::n_bm_o	.\libass\ass_render.h	/^    size_t n_bm, n_bm_o;$/;"	m	struct:__anon44	access:public
__anon44::rect	.\libass\ass_render.h	/^    ASS_Rect rect, rect_o;$/;"	m	struct:__anon44	access:public
__anon44::rect_o	.\libass\ass_render.h	/^    ASS_Rect rect, rect_o;$/;"	m	struct:__anon44	access:public
__anon44::x	.\libass\ass_render.h	/^    int x, y;$/;"	m	struct:__anon44	access:public
__anon44::y	.\libass\ass_render.h	/^    int x, y;$/;"	m	struct:__anon44	access:public
__anon45::asc	.\libass\ass_render.h	/^    double asc, desc;$/;"	m	struct:__anon45	access:public
__anon45::desc	.\libass\ass_render.h	/^    double asc, desc;$/;"	m	struct:__anon45	access:public
__anon45::len	.\libass\ass_render.h	/^    int offset, len;$/;"	m	struct:__anon45	access:public
__anon45::offset	.\libass\ass_render.h	/^    int offset, len;$/;"	m	struct:__anon45	access:public
__anon46::combined_bitmaps	.\libass\ass_render.h	/^    CombinedBitmapInfo *combined_bitmaps;$/;"	m	struct:__anon46	access:public
__anon46::glyphs	.\libass\ass_render.h	/^    GlyphInfo *glyphs;$/;"	m	struct:__anon46	access:public
__anon46::height	.\libass\ass_render.h	/^    double height;$/;"	m	struct:__anon46	access:public
__anon46::length	.\libass\ass_render.h	/^    int length;$/;"	m	struct:__anon46	access:public
__anon46::lines	.\libass\ass_render.h	/^    LineInfo *lines;$/;"	m	struct:__anon46	access:public
__anon46::max_bitmaps	.\libass\ass_render.h	/^    unsigned max_bitmaps;$/;"	m	struct:__anon46	access:public
__anon46::max_glyphs	.\libass\ass_render.h	/^    int max_glyphs;$/;"	m	struct:__anon46	access:public
__anon46::max_lines	.\libass\ass_render.h	/^    int max_lines;$/;"	m	struct:__anon46	access:public
__anon46::n_bitmaps	.\libass\ass_render.h	/^    unsigned n_bitmaps;$/;"	m	struct:__anon46	access:public
__anon46::n_lines	.\libass\ass_render.h	/^    int n_lines;$/;"	m	struct:__anon46	access:public
__anon47::EVENT_HSCROLL	.\libass\ass_render.h	/^        EVENT_HSCROLL,          \/\/ "Banner" transition effect, text_width is unlimited$/;"	e	enum:__anon47::__anon48
__anon47::EVENT_NORMAL	.\libass\ass_render.h	/^        EVENT_NORMAL,           \/\/ "normal" top-, sub- or mid- title$/;"	e	enum:__anon47::__anon48
__anon47::EVENT_POSITIONED	.\libass\ass_render.h	/^        EVENT_POSITIONED,       \/\/ happens after pos(,), margins are ignored$/;"	e	enum:__anon47::__anon48
__anon47::EVENT_VSCROLL	.\libass\ass_render.h	/^        EVENT_VSCROLL           \/\/ "Scroll up", "Scroll down" transition effects$/;"	e	enum:__anon47::__anon48
__anon47::SCROLL_BT	.\libass\ass_render.h	/^        SCROLL_BT$/;"	e	enum:__anon47::__anon49
__anon47::SCROLL_LR	.\libass\ass_render.h	/^        SCROLL_LR,              \/\/ left-to-right$/;"	e	enum:__anon47::__anon49
__anon47::SCROLL_RL	.\libass\ass_render.h	/^        SCROLL_RL,$/;"	e	enum:__anon47::__anon49
__anon47::SCROLL_TB	.\libass\ass_render.h	/^        SCROLL_TB,              \/\/ top-to-bottom$/;"	e	enum:__anon47::__anon49
__anon47::alignment	.\libass\ass_render.h	/^    int alignment;              \/\/ alignment overrides go here; if zero, style value will be used$/;"	m	struct:__anon47	access:public
__anon47::apply_font_scale	.\libass\ass_render.h	/^    int apply_font_scale;$/;"	m	struct:__anon47	access:public
__anon47::be	.\libass\ass_render.h	/^    char be;                    \/\/ blur edges$/;"	m	struct:__anon47	access:public
__anon47::blur	.\libass\ass_render.h	/^    double blur;                \/\/ gaussian blur$/;"	m	struct:__anon47	access:public
__anon47::bold	.\libass\ass_render.h	/^    unsigned bold;$/;"	m	struct:__anon47	access:public
__anon47::border_style	.\libass\ass_render.h	/^    int border_style;$/;"	m	struct:__anon47	access:public
__anon47::border_x	.\libass\ass_render.h	/^    double border_x;            \/\/ outline width$/;"	m	struct:__anon47	access:public
__anon47::border_y	.\libass\ass_render.h	/^    double border_y;$/;"	m	struct:__anon47	access:public
__anon47::c	.\libass\ass_render.h	/^    uint32_t c[4];              \/\/ colors(Primary, Secondary, so on) in RGBA$/;"	m	struct:__anon47	access:public
__anon47::clip_drawing	.\libass\ass_render.h	/^    ASS_Drawing *clip_drawing;  \/\/ clip vector$/;"	m	struct:__anon47	access:public
__anon47::clip_drawing_mode	.\libass\ass_render.h	/^    int clip_drawing_mode;      \/\/ 0 = regular clip, 1 = inverse clip$/;"	m	struct:__anon47	access:public
__anon47::clip_mode	.\libass\ass_render.h	/^    char clip_mode;             \/\/ 1 = iclip$/;"	m	struct:__anon47	access:public
__anon47::clip_x0	.\libass\ass_render.h	/^    int clip_x0, clip_y0, clip_x1, clip_y1;$/;"	m	struct:__anon47	access:public
__anon47::clip_x1	.\libass\ass_render.h	/^    int clip_x0, clip_y0, clip_x1, clip_y1;$/;"	m	struct:__anon47	access:public
__anon47::clip_y0	.\libass\ass_render.h	/^    int clip_x0, clip_y0, clip_x1, clip_y1;$/;"	m	struct:__anon47	access:public
__anon47::clip_y1	.\libass\ass_render.h	/^    int clip_x0, clip_y0, clip_x1, clip_y1;$/;"	m	struct:__anon47	access:public
__anon47::detect_collisions	.\libass\ass_render.h	/^    char detect_collisions;$/;"	m	struct:__anon47	access:public
__anon47::drawing_scale	.\libass\ass_render.h	/^    int drawing_scale;          \/\/ currently reading: regular text if 0, drawing otherwise$/;"	m	struct:__anon47	access:public
__anon47::effect_skip_timing	.\libass\ass_render.h	/^    int effect_skip_timing;$/;"	m	struct:__anon47	access:public
__anon47::effect_timing	.\libass\ass_render.h	/^    int effect_timing;$/;"	m	struct:__anon47	access:public
__anon47::effect_type	.\libass\ass_render.h	/^    Effect effect_type;$/;"	m	struct:__anon47	access:public
__anon47::event	.\libass\ass_render.h	/^    ASS_Event *event;$/;"	m	struct:__anon47	access:public
__anon47::evt_type	.\libass\ass_render.h	/^    } evt_type;$/;"	m	struct:__anon47	typeref:enum:__anon47::__anon48	access:public
__anon47::fade	.\libass\ass_render.h	/^    int fade;                   \/\/ alpha from \\fad$/;"	m	struct:__anon47	access:public
__anon47::family	.\libass\ass_render.h	/^    char *family;$/;"	m	struct:__anon47	access:public
__anon47::fax	.\libass\ass_render.h	/^    double fax, fay;            \/\/ text shearing$/;"	m	struct:__anon47	access:public
__anon47::fay	.\libass\ass_render.h	/^    double fax, fay;            \/\/ text shearing$/;"	m	struct:__anon47	access:public
__anon47::flags	.\libass\ass_render.h	/^    int flags;                  \/\/ decoration flags (underline\/strike-through)$/;"	m	struct:__anon47	access:public
__anon47::font	.\libass\ass_render.h	/^    ASS_Font *font;$/;"	m	struct:__anon47	access:public
__anon47::font_encoding	.\libass\ass_render.h	/^    int font_encoding;$/;"	m	struct:__anon47	access:public
__anon47::font_size	.\libass\ass_render.h	/^    double font_size;$/;"	m	struct:__anon47	access:public
__anon47::frx	.\libass\ass_render.h	/^    double frx, fry, frz;$/;"	m	struct:__anon47	access:public
__anon47::fry	.\libass\ass_render.h	/^    double frx, fry, frz;$/;"	m	struct:__anon47	access:public
__anon47::frz	.\libass\ass_render.h	/^    double frx, fry, frz;$/;"	m	struct:__anon47	access:public
__anon47::have_origin	.\libass\ass_render.h	/^    char have_origin;           \/\/ origin is explicitly defined; if 0, get_base_point() is used$/;"	m	struct:__anon47	access:public
__anon47::hspacing	.\libass\ass_render.h	/^    double hspacing;            \/\/ distance between letters, in pixels$/;"	m	struct:__anon47	access:public
__anon47::italic	.\libass\ass_render.h	/^    unsigned italic;$/;"	m	struct:__anon47	access:public
__anon47::justify	.\libass\ass_render.h	/^    int justify;                \/\/ justify instructions$/;"	m	struct:__anon47	access:public
__anon47::org_x	.\libass\ass_render.h	/^    double org_x, org_y;        \/\/ origin$/;"	m	struct:__anon47	access:public
__anon47::org_y	.\libass\ass_render.h	/^    double org_x, org_y;        \/\/ origin$/;"	m	struct:__anon47	access:public
__anon47::override_style_temp_storage	.\libass\ass_render.h	/^    ASS_Style override_style_temp_storage;$/;"	m	struct:__anon47	access:public
__anon47::overrides	.\libass\ass_render.h	/^    unsigned overrides;$/;"	m	struct:__anon47	access:public
__anon47::parsed_tags	.\libass\ass_render.h	/^    int parsed_tags;$/;"	m	struct:__anon47	access:public
__anon47::pbo	.\libass\ass_render.h	/^    double pbo;                 \/\/ drawing baseline offset$/;"	m	struct:__anon47	access:public
__anon47::pos_x	.\libass\ass_render.h	/^    double pos_x, pos_y;        \/\/ position$/;"	m	struct:__anon47	access:public
__anon47::pos_y	.\libass\ass_render.h	/^    double pos_x, pos_y;        \/\/ position$/;"	m	struct:__anon47	access:public
__anon47::scale_x	.\libass\ass_render.h	/^    double scale_x, scale_y;$/;"	m	struct:__anon47	access:public
__anon47::scale_y	.\libass\ass_render.h	/^    double scale_x, scale_y;$/;"	m	struct:__anon47	access:public
__anon47::scroll_direction	.\libass\ass_render.h	/^    } scroll_direction;         \/\/ for EVENT_HSCROLL, EVENT_VSCROLL$/;"	m	struct:__anon47	typeref:enum:__anon47::__anon49	access:public
__anon47::scroll_shift	.\libass\ass_render.h	/^    int scroll_shift;$/;"	m	struct:__anon47	access:public
__anon47::shadow_x	.\libass\ass_render.h	/^    double shadow_x;$/;"	m	struct:__anon47	access:public
__anon47::shadow_y	.\libass\ass_render.h	/^    double shadow_y;$/;"	m	struct:__anon47	access:public
__anon47::style	.\libass\ass_render.h	/^    ASS_Style *style;$/;"	m	struct:__anon47	access:public
__anon47::treat_family_as_pattern	.\libass\ass_render.h	/^    int treat_family_as_pattern;$/;"	m	struct:__anon47	access:public
__anon47::wrap_style	.\libass\ass_render.h	/^    int wrap_style;$/;"	m	struct:__anon47	access:public
__anon50::bitmap_cache	.\libass\ass_render.h	/^    Cache *bitmap_cache;$/;"	m	struct:__anon50	access:public
__anon50::bitmap_max_size	.\libass\ass_render.h	/^    size_t bitmap_max_size;$/;"	m	struct:__anon50	access:public
__anon50::composite_cache	.\libass\ass_render.h	/^    Cache *composite_cache;$/;"	m	struct:__anon50	access:public
__anon50::composite_max_size	.\libass\ass_render.h	/^    size_t composite_max_size;$/;"	m	struct:__anon50	access:public
__anon50::font_cache	.\libass\ass_render.h	/^    Cache *font_cache;$/;"	m	struct:__anon50	access:public
__anon50::glyph_max	.\libass\ass_render.h	/^    size_t glyph_max;$/;"	m	struct:__anon50	access:public
__anon50::outline_cache	.\libass\ass_render.h	/^    Cache *outline_cache;$/;"	m	struct:__anon50	access:public
__anon51::x0	.\libass\ass_render.h	/^    int x0;$/;"	m	struct:__anon51	access:public
__anon51::x1	.\libass\ass_render.h	/^    int x1;$/;"	m	struct:__anon51	access:public
__anon51::y0	.\libass\ass_render.h	/^    int y0;$/;"	m	struct:__anon51	access:public
__anon51::y1	.\libass\ass_render.h	/^    int y1;$/;"	m	struct:__anon51	access:public
__anon52::a	.\libass\ass_render.h	/^    int a, b;                   \/\/ top and height$/;"	m	struct:__anon52	access:public
__anon52::b	.\libass\ass_render.h	/^    int a, b;                   \/\/ top and height$/;"	m	struct:__anon52	access:public
__anon52::ha	.\libass\ass_render.h	/^    int ha, hb;                 \/\/ left and width$/;"	m	struct:__anon52	access:public
__anon52::hb	.\libass\ass_render.h	/^    int ha, hb;                 \/\/ left and width$/;"	m	struct:__anon52	access:public
__anon7::add_bitmaps	.\libass\ass_bitmap.h	/^    BitmapBlendFunc add_bitmaps, sub_bitmaps;$/;"	m	struct:__anon7	access:public
__anon7::align_order	.\libass\ass_bitmap.h	/^    int align_order;  \/\/ log2(alignment)$/;"	m	struct:__anon7	access:public
__anon7::be_blur	.\libass\ass_bitmap.h	/^    BeBlurFunc be_blur;$/;"	m	struct:__anon7	access:public
__anon7::expand_horz	.\libass\ass_bitmap.h	/^    FilterFunc expand_horz, expand_vert;$/;"	m	struct:__anon7	access:public
__anon7::expand_vert	.\libass\ass_bitmap.h	/^    FilterFunc expand_horz, expand_vert;$/;"	m	struct:__anon7	access:public
__anon7::fill_generic	.\libass\ass_bitmap.h	/^    FillGenericTileFunc fill_generic;$/;"	m	struct:__anon7	access:public
__anon7::fill_halfplane	.\libass\ass_bitmap.h	/^    FillHalfplaneTileFunc fill_halfplane;$/;"	m	struct:__anon7	access:public
__anon7::fill_solid	.\libass\ass_bitmap.h	/^    FillSolidTileFunc fill_solid;$/;"	m	struct:__anon7	access:public
__anon7::main_blur_horz	.\libass\ass_bitmap.h	/^    ParamFilterFunc main_blur_horz[3], main_blur_vert[3];$/;"	m	struct:__anon7	access:public
__anon7::main_blur_vert	.\libass\ass_bitmap.h	/^    ParamFilterFunc main_blur_horz[3], main_blur_vert[3];$/;"	m	struct:__anon7	access:public
__anon7::mul_bitmaps	.\libass\ass_bitmap.h	/^    BitmapMulFunc mul_bitmaps;$/;"	m	struct:__anon7	access:public
__anon7::pre_blur_horz	.\libass\ass_bitmap.h	/^    FilterFunc pre_blur_horz[3], pre_blur_vert[3];$/;"	m	struct:__anon7	access:public
__anon7::pre_blur_vert	.\libass\ass_bitmap.h	/^    FilterFunc pre_blur_horz[3], pre_blur_vert[3];$/;"	m	struct:__anon7	access:public
__anon7::shrink_horz	.\libass\ass_bitmap.h	/^    FilterFunc shrink_horz, shrink_vert;$/;"	m	struct:__anon7	access:public
__anon7::shrink_vert	.\libass\ass_bitmap.h	/^    FilterFunc shrink_horz, shrink_vert;$/;"	m	struct:__anon7	access:public
__anon7::stripe_pack	.\libass\ass_bitmap.h	/^    Convert16to8Func stripe_pack;$/;"	m	struct:__anon7	access:public
__anon7::stripe_unpack	.\libass\ass_bitmap.h	/^    Convert8to16Func stripe_unpack;$/;"	m	struct:__anon7	access:public
__anon7::sub_bitmaps	.\libass\ass_bitmap.h	/^    BitmapBlendFunc add_bitmaps, sub_bitmaps;$/;"	m	struct:__anon7	access:public
__anon7::tile_order	.\libass\ass_bitmap.h	/^    int tile_order;  \/\/ log2(tile_size)$/;"	m	struct:__anon7	access:public
__anon8::buffer	.\libass\ass_bitmap.h	/^    unsigned char *buffer;      \/\/ h * stride buffer$/;"	m	struct:__anon8	access:public
__anon8::h	.\libass\ass_bitmap.h	/^    int w, h;                   \/\/ width, height$/;"	m	struct:__anon8	access:public
__anon8::left	.\libass\ass_bitmap.h	/^    int left, top;$/;"	m	struct:__anon8	access:public
__anon8::stride	.\libass\ass_bitmap.h	/^    int stride;$/;"	m	struct:__anon8	access:public
__anon8::top	.\libass\ass_bitmap.h	/^    int left, top;$/;"	m	struct:__anon8	access:public
__anon8::w	.\libass\ass_bitmap.h	/^    int w, h;                   \/\/ width, height$/;"	m	struct:__anon8	access:public
__anon9::coeff	.\libass\ass_blur.c	/^    int16_t coeff[4];$/;"	m	struct:__anon9	file:	access:public
__anon9::filter	.\libass\ass_blur.c	/^    int level, prefilter, filter;$/;"	m	struct:__anon9	file:	access:public
__anon9::level	.\libass\ass_blur.c	/^    int level, prefilter, filter;$/;"	m	struct:__anon9	file:	access:public
__anon9::prefilter	.\libass\ass_blur.c	/^    int level, prefilter, filter;$/;"	m	struct:__anon9	file:	access:public
_a	.\libass\ass_parse.h	27;"	d
_a	.\test\test.c	131;"	d	file:
_b	.\libass\ass_parse.h	26;"	d
_b	.\test\test.c	130;"	d	file:
_g	.\libass\ass_parse.h	25;"	d
_g	.\test\test.c	129;"	d	file:
_r	.\libass\ass_parse.h	24;"	d
_r	.\test\test.c	128;"	d	file:
a	.\libass\ass_rasterizer.h	/^    int32_t a, b, scale, flags;$/;"	m	struct:segment	access:public
a	.\libass\ass_render.h	/^    int a, b;                   \/\/ top and height$/;"	m	struct:__anon52	access:public
add_background	.\libass\ass_render.c	/^static void add_background(ASS_Renderer *render_priv, EventImages *event_images)$/;"	f	file:	signature:(ASS_Renderer *render_priv, EventImages *event_images)
add_bitmaps	.\libass\ass_bitmap.h	/^    BitmapBlendFunc add_bitmaps, sub_bitmaps;$/;"	m	struct:__anon7	access:public
add_bitmaps	.\libass\ass_func_template.h	/^void DECORATE(add_bitmaps)(uint8_t *dst, intptr_t dst_stride,$/;"	p	signature:(uint8_t *dst, intptr_t dst_stride, uint8_t *src, intptr_t src_stride, intptr_t height, intptr_t width)
add_cubic	.\libass\ass_outline.c	/^static bool add_cubic(StrokerState *str, const ASS_Vector *pt, int dir)$/;"	f	file:	signature:(StrokerState *str, const ASS_Vector *pt, int dir)
add_cubic	.\libass\ass_rasterizer.c	/^static bool add_cubic(RasterizerData *rst, const ASS_Vector *pt)$/;"	f	file:	signature:(RasterizerData *rst, const ASS_Vector *pt)
add_face	.\libass\ass_font.c	/^static int add_face(ASS_FontSelector *fontsel, ASS_Font *font, uint32_t ch)$/;"	f	file:	signature:(ASS_FontSelector *fontsel, ASS_Font *font, uint32_t ch)
add_font	.\libass\ass_directwrite.c	/^static void add_font(IDWriteFont *font, IDWriteFontFamily *fontFamily,$/;"	f	file:	signature:(IDWriteFont *font, IDWriteFontFamily *fontFamily, ASS_FontProvider *provider)
add_line	.\libass\ass_font.c	/^static void add_line(FT_Outline *ol, int bear, int advance, int dir, int pos, int size) {$/;"	f	file:	signature:(FT_Outline *ol, int bear, int advance, int dir, int pos, int size)
add_line	.\libass\ass_outline.c	/^static bool add_line(StrokerState *str, ASS_Vector pt0, ASS_Vector pt1, int dir)$/;"	f	file:	signature:(StrokerState *str, ASS_Vector pt0, ASS_Vector pt1, int dir)
add_line	.\libass\ass_rasterizer.c	/^static bool add_line(RasterizerData *rst, ASS_Vector pt0, ASS_Vector pt1)$/;"	f	file:	signature:(RasterizerData *rst, ASS_Vector pt0, ASS_Vector pt1)
add_quadratic	.\libass\ass_outline.c	/^static bool add_quadratic(StrokerState *str, const ASS_Vector *pt, int dir)$/;"	f	file:	signature:(StrokerState *str, const ASS_Vector *pt, int dir)
add_quadratic	.\libass\ass_rasterizer.c	/^static bool add_quadratic(RasterizerData *rst, const ASS_Vector *pt)$/;"	f	file:	signature:(RasterizerData *rst, const ASS_Vector *pt)
advance	.\libass\ass_cache.h	/^    ASS_Vector advance;         \/\/ 26.6, advance distance to the next outline in line$/;"	m	struct:__anon12	access:public
advance	.\libass\ass_drawing.h	/^    ASS_Vector advance;  \/\/ advance (from cbox)$/;"	m	struct:__anon25	access:public
advance	.\libass\ass_render.h	/^    ASS_Vector advance;         \/\/ 26.6$/;"	m	struct:glyph_info	access:public
align_cache	.\libass\ass_cache.c	/^static inline size_t align_cache(size_t size)$/;"	f	file:	signature:(size_t size)
align_lines	.\libass\ass_render.c	/^static void align_lines(ASS_Renderer *render_priv, double max_text_width)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double max_text_width)
align_order	.\libass\ass_bitmap.h	/^    int align_order;  \/\/ log2(alignment)$/;"	m	struct:__anon7	access:public
alignment	.\libass\ass_render.h	/^    int alignment;              \/\/ alignment overrides go here; if zero, style value will be used$/;"	m	struct:__anon47	access:public
alloc_bitmap	.\libass\ass_bitmap.c	/^Bitmap *alloc_bitmap(const BitmapEngine *engine, int w, int h, bool zero)$/;"	f	signature:(const BitmapEngine *engine, int w, int h, bool zero)
alloc_bitmap	.\libass\ass_bitmap.h	/^Bitmap *alloc_bitmap(const BitmapEngine *engine, int w, int h, bool zero);$/;"	p	signature:(const BitmapEngine *engine, int w, int h, bool zero)
alloc_bitmap_buffer	.\libass\ass_bitmap.c	/^static bool alloc_bitmap_buffer(const BitmapEngine *engine, Bitmap *bm, int w, int h,$/;"	f	file:	signature:(const BitmapEngine *engine, Bitmap *bm, int w, int h, bool zero)
alloc_font	.\libass\ass_fontselect.c	/^    int alloc_font;$/;"	m	struct:font_selector	file:	access:public
apply_font_scale	.\libass\ass_render.h	/^    int apply_font_scale;$/;"	m	struct:__anon47	access:public
apply_transition_effects	.\libass\ass_parse.c	/^void apply_transition_effects(ASS_Renderer *render_priv, ASS_Event *event)$/;"	f	signature:(ASS_Renderer *render_priv, ASS_Event *event)
apply_transition_effects	.\libass\ass_parse.h	/^void apply_transition_effects(ASS_Renderer *render_priv, ASS_Event *event);$/;"	p	signature:(ASS_Renderer *render_priv, ASS_Event *event)
arg	.\libass\ass_parse.c	/^struct arg {$/;"	s	file:
arg::end	.\libass\ass_parse.c	/^    char *start, *end;$/;"	m	struct:arg	file:	access:public
arg::start	.\libass\ass_parse.c	/^    char *start, *end;$/;"	m	struct:arg	file:	access:public
argtod	.\libass\ass_parse.c	/^static inline double argtod(struct arg arg)$/;"	f	file:	signature:(struct arg arg)
argtoi	.\libass\ass_parse.c	/^static inline int argtoi(struct arg arg)$/;"	f	file:	signature:(struct arg arg)
argtoll	.\libass\ass_parse.c	/^static inline long long argtoll(struct arg arg)$/;"	f	file:	signature:(struct arg arg)
asc	.\libass\ass_cache.h	/^    int asc, desc;              \/\/ ascender\/descender$/;"	m	struct:__anon12	access:public
asc	.\libass\ass_drawing.h	/^    int asc;             \/\/ ascender$/;"	m	struct:__anon25	access:public
asc	.\libass\ass_render.h	/^    double asc, desc;$/;"	m	struct:__anon45	access:public
asc	.\libass\ass_render.h	/^    int asc, desc;              \/\/ font max ascender and descender$/;"	m	struct:glyph_info	access:public
ascent	.\libass\dwrite_c.h	/^  UINT16 ascent;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
ass_add_bitmaps_c	.\libass\ass_bitmap.c	/^void ass_add_bitmaps_c(uint8_t *dst, intptr_t dst_stride,$/;"	f	signature:(uint8_t *dst, intptr_t dst_stride, uint8_t *src, intptr_t src_stride, intptr_t height, intptr_t width)
ass_add_font	.\libass\ass.h	/^void ass_add_font(ASS_Library *library, char *name, char *data,$/;"	p	signature:(ASS_Library *library, char *name, char *data, int data_size)
ass_add_font	.\libass\ass_library.c	/^void ass_add_font(ASS_Library *priv, char *name, char *data, int size)$/;"	f	signature:(ASS_Library *priv, char *name, char *data, int size)
ass_align	.\libass\ass_utils.h	/^static inline size_t ass_align(size_t alignment, size_t s)$/;"	f	signature:(size_t alignment, size_t s)
ass_aligned_alloc	.\libass\ass_utils.c	/^void *ass_aligned_alloc(size_t alignment, size_t size, bool zero)$/;"	f	signature:(size_t alignment, size_t size, bool zero)
ass_aligned_alloc	.\libass\ass_utils.h	/^void *ass_aligned_alloc(size_t alignment, size_t size, bool zero);$/;"	p	signature:(size_t alignment, size_t size, bool zero)
ass_aligned_free	.\libass\ass_utils.c	/^void ass_aligned_free(void *ptr)$/;"	f	signature:(void *ptr)
ass_aligned_free	.\libass\ass_utils.h	/^void ass_aligned_free(void *ptr);$/;"	p	signature:(void *ptr)
ass_alloc_event	.\libass\ass.c	/^int ass_alloc_event(ASS_Track *track)$/;"	f	signature:(ASS_Track *track)
ass_alloc_event	.\libass\ass.h	/^int ass_alloc_event(ASS_Track *track);$/;"	p	signature:(ASS_Track *track)
ass_alloc_style	.\libass\ass.c	/^int ass_alloc_style(ASS_Track *track)$/;"	f	signature:(ASS_Track *track)
ass_alloc_style	.\libass\ass.h	/^int ass_alloc_style(ASS_Track *track);$/;"	p	signature:(ASS_Track *track)
ass_atof	.\libass\ass.c	40;"	d	file:
ass_be_blur_c	.\libass\ass_bitmap.c	/^void ass_be_blur_c(uint8_t *buf, intptr_t w, intptr_t h,$/;"	f	signature:(uint8_t *buf, intptr_t w, intptr_t h, intptr_t stride, uint16_t *tmp)
ass_bitmap_cache_create	.\libass\ass_cache.c	/^Cache *ass_bitmap_cache_create(void)$/;"	f	signature:(void)
ass_bitmap_cache_create	.\libass\ass_cache.h	/^Cache *ass_bitmap_cache_create(void);$/;"	p	signature:(void)
ass_blur1234_horz_c	.\libass\ass_blur.c	/^void ass_blur1234_horz_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
ass_blur1234_vert_c	.\libass\ass_blur.c	/^void ass_blur1234_vert_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
ass_blur1235_horz_c	.\libass\ass_blur.c	/^void ass_blur1235_horz_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
ass_blur1235_vert_c	.\libass\ass_blur.c	/^void ass_blur1235_vert_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
ass_blur1246_horz_c	.\libass\ass_blur.c	/^void ass_blur1246_horz_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
ass_blur1246_vert_c	.\libass\ass_blur.c	/^void ass_blur1246_vert_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
ass_bswap32	.\libass\ass_utils.h	/^static inline uint32_t ass_bswap32(uint32_t x)$/;"	f	signature:(uint32_t x)
ass_cache_commit	.\libass\ass_cache.c	/^void ass_cache_commit(void *value, size_t item_size)$/;"	f	signature:(void *value, size_t item_size)
ass_cache_commit	.\libass\ass_cache.h	/^void ass_cache_commit(void *value, size_t item_size);$/;"	p	signature:(void *value, size_t item_size)
ass_cache_create	.\libass\ass_cache.c	/^Cache *ass_cache_create(const CacheDesc *desc)$/;"	f	signature:(const CacheDesc *desc)
ass_cache_create	.\libass\ass_cache.h	/^Cache *ass_cache_create(const CacheDesc *desc);$/;"	p	signature:(const CacheDesc *desc)
ass_cache_cut	.\libass\ass_cache.c	/^void ass_cache_cut(Cache *cache, size_t max_size)$/;"	f	signature:(Cache *cache, size_t max_size)
ass_cache_cut	.\libass\ass_cache.h	/^void ass_cache_cut(Cache *cache, size_t max_size);$/;"	p	signature:(Cache *cache, size_t max_size)
ass_cache_dec_ref	.\libass\ass_cache.c	/^void ass_cache_dec_ref(void *value)$/;"	f	signature:(void *value)
ass_cache_dec_ref	.\libass\ass_cache.h	/^void ass_cache_dec_ref(void *value);$/;"	p	signature:(void *value)
ass_cache_done	.\libass\ass_cache.c	/^void ass_cache_done(Cache *cache)$/;"	f	signature:(Cache *cache)
ass_cache_done	.\libass\ass_cache.h	/^void ass_cache_done(Cache *cache);$/;"	p	signature:(Cache *cache)
ass_cache_empty	.\libass\ass_cache.c	/^void ass_cache_empty(Cache *cache)$/;"	f	signature:(Cache *cache)
ass_cache_empty	.\libass\ass_cache.h	/^void ass_cache_empty(Cache *cache);$/;"	p	signature:(Cache *cache)
ass_cache_get	.\libass\ass_cache.c	/^bool ass_cache_get(Cache *cache, void *key, void *value_ptr)$/;"	f	signature:(Cache *cache, void *key, void *value_ptr)
ass_cache_get	.\libass\ass_cache.h	/^bool ass_cache_get(Cache *cache, void *key, void *value_ptr);$/;"	p	signature:(Cache *cache, void *key, void *value_ptr)
ass_cache_inc_ref	.\libass\ass_cache.c	/^void ass_cache_inc_ref(void *value)$/;"	f	signature:(void *value)
ass_cache_inc_ref	.\libass\ass_cache.h	/^void ass_cache_inc_ref(void *value);$/;"	p	signature:(void *value)
ass_cache_key	.\libass\ass_cache.c	/^void *ass_cache_key(void *value)$/;"	f	signature:(void *value)
ass_cache_key	.\libass\ass_cache.h	/^void *ass_cache_key(void *value);$/;"	p	signature:(void *value)
ass_cache_stats	.\libass\ass_cache.c	/^void ass_cache_stats(Cache *cache, size_t *size, unsigned *hits,$/;"	f	signature:(Cache *cache, size_t *size, unsigned *hits, unsigned *misses, unsigned *count)
ass_cache_stats	.\libass\ass_cache.h	/^void ass_cache_stats(Cache *cache, size_t *size, unsigned *hits,$/;"	p	signature:(Cache *cache, size_t *size, unsigned *hits, unsigned *misses, unsigned *count)
ass_clear_fonts	.\libass\ass.h	/^void ass_clear_fonts(ASS_Library *library);$/;"	p	signature:(ASS_Library *library)
ass_clear_fonts	.\libass\ass_library.c	/^void ass_clear_fonts(ASS_Library *priv)$/;"	f	signature:(ASS_Library *priv)
ass_composite_cache_create	.\libass\ass_cache.c	/^Cache *ass_composite_cache_create(void)$/;"	f	signature:(void)
ass_composite_cache_create	.\libass\ass_cache.h	/^Cache *ass_composite_cache_create(void);$/;"	p	signature:(void)
ass_coretext_add_provider	.\libass\ass_coretext.c	/^ass_coretext_add_provider(ASS_Library *lib, ASS_FontSelector *selector,$/;"	f	signature:(ASS_Library *lib, ASS_FontSelector *selector, const char *config)
ass_coretext_add_provider	.\libass\ass_coretext.h	/^ass_coretext_add_provider(ASS_Library *lib, ASS_FontSelector *selector,$/;"	p	signature:(ASS_Library *lib, ASS_FontSelector *selector, const char *config)
ass_create_font_provider	.\libass\ass_fontselect.h	/^ass_create_font_provider(ASS_Renderer *priv, ASS_FontProviderFuncs *funcs,$/;"	p	signature:(ASS_Renderer *priv, ASS_FontProviderFuncs *funcs, void *data)
ass_create_font_provider	.\libass\ass_render_api.c	/^ass_create_font_provider(ASS_Renderer *priv, ASS_FontProviderFuncs *funcs,$/;"	f	signature:(ASS_Renderer *priv, ASS_FontProviderFuncs *funcs, void *data)
ass_detect_change	.\libass\ass_render.c	/^static int ass_detect_change(ASS_Renderer *priv)$/;"	f	file:	signature:(ASS_Renderer *priv)
ass_directwrite_add_provider	.\libass\ass_directwrite.c	/^ASS_FontProvider *ass_directwrite_add_provider(ASS_Library *lib,$/;"	f	signature:(ASS_Library *lib, ASS_FontSelector *selector, const char *config)
ass_directwrite_add_provider	.\libass\ass_directwrite.h	/^ass_directwrite_add_provider(ASS_Library *lib, ASS_FontSelector *selector,$/;"	p	signature:(ASS_Library *lib, ASS_FontSelector *selector, const char *config)
ass_drawing_free	.\libass\ass_drawing.c	/^void ass_drawing_free(ASS_Drawing *drawing)$/;"	f	signature:(ASS_Drawing *drawing)
ass_drawing_free	.\libass\ass_drawing.h	/^void ass_drawing_free(ASS_Drawing *drawing);$/;"	p	signature:(ASS_Drawing *drawing)
ass_drawing_hash	.\libass\ass_drawing.c	/^void ass_drawing_hash(ASS_Drawing *drawing)$/;"	f	signature:(ASS_Drawing *drawing)
ass_drawing_hash	.\libass\ass_drawing.h	/^void ass_drawing_hash(ASS_Drawing *drawing);$/;"	p	signature:(ASS_Drawing *drawing)
ass_drawing_new	.\libass\ass_drawing.c	/^ASS_Drawing *ass_drawing_new(ASS_Library *lib)$/;"	f	signature:(ASS_Library *lib)
ass_drawing_new	.\libass\ass_drawing.h	/^ASS_Drawing *ass_drawing_new(ASS_Library *lib);$/;"	p	signature:(ASS_Library *lib)
ass_drawing_parse	.\libass\ass_drawing.c	/^ASS_Outline *ass_drawing_parse(ASS_Drawing *drawing, bool raw_mode)$/;"	f	signature:(ASS_Drawing *drawing, bool raw_mode)
ass_drawing_parse	.\libass\ass_drawing.h	/^ASS_Outline *ass_drawing_parse(ASS_Drawing *drawing, bool raw_mode);$/;"	p	signature:(ASS_Drawing *drawing, bool raw_mode)
ass_drawing_set_text	.\libass\ass_drawing.c	/^void ass_drawing_set_text(ASS_Drawing *drawing, char *str, size_t len)$/;"	f	signature:(ASS_Drawing *drawing, char *str, size_t len)
ass_drawing_set_text	.\libass\ass_drawing.h	/^void ass_drawing_set_text(ASS_Drawing *drawing, char *str, size_t n);$/;"	p	signature:(ASS_Drawing *drawing, char *str, size_t n)
ass_drawing_token	.\libass\ass_drawing.h	/^typedef struct ass_drawing_token {$/;"	s
ass_drawing_token::next	.\libass\ass_drawing.h	/^    struct ass_drawing_token *next;$/;"	m	struct:ass_drawing_token	typeref:struct:ass_drawing_token::ass_drawing_token	access:public
ass_drawing_token::point	.\libass\ass_drawing.h	/^    ASS_Vector point;$/;"	m	struct:ass_drawing_token	access:public
ass_drawing_token::prev	.\libass\ass_drawing.h	/^    struct ass_drawing_token *prev;$/;"	m	struct:ass_drawing_token	typeref:struct:ass_drawing_token::ass_drawing_token	access:public
ass_drawing_token::type	.\libass\ass_drawing.h	/^    ASS_TokenType type;$/;"	m	struct:ass_drawing_token	access:public
ass_embedded_fonts_add_provider	.\libass\ass_fontselect.c	/^ass_embedded_fonts_add_provider(ASS_Library *lib, ASS_FontSelector *selector,$/;"	f	file:	signature:(ASS_Library *lib, ASS_FontSelector *selector, FT_Library ftlib)
ass_event	.\libass\ass_types.h	/^typedef struct ass_event {$/;"	s
ass_event::Duration	.\libass\ass_types.h	/^    long long Duration;         \/\/ ms$/;"	m	struct:ass_event	access:public
ass_event::Effect	.\libass\ass_types.h	/^    char *Effect;$/;"	m	struct:ass_event	access:public
ass_event::Layer	.\libass\ass_types.h	/^    int Layer;$/;"	m	struct:ass_event	access:public
ass_event::MarginL	.\libass\ass_types.h	/^    int MarginL;$/;"	m	struct:ass_event	access:public
ass_event::MarginR	.\libass\ass_types.h	/^    int MarginR;$/;"	m	struct:ass_event	access:public
ass_event::MarginV	.\libass\ass_types.h	/^    int MarginV;$/;"	m	struct:ass_event	access:public
ass_event::Name	.\libass\ass_types.h	/^    char *Name;$/;"	m	struct:ass_event	access:public
ass_event::ReadOrder	.\libass\ass_types.h	/^    int ReadOrder;$/;"	m	struct:ass_event	access:public
ass_event::Start	.\libass\ass_types.h	/^    long long Start;            \/\/ ms$/;"	m	struct:ass_event	access:public
ass_event::Style	.\libass\ass_types.h	/^    int Style;$/;"	m	struct:ass_event	access:public
ass_event::Text	.\libass\ass_types.h	/^    char *Text;$/;"	m	struct:ass_event	access:public
ass_event::render_priv	.\libass\ass_types.h	/^    ASS_RenderPriv *render_priv;$/;"	m	struct:ass_event	access:public
ass_expand_horz_c	.\libass\ass_blur.c	/^void ass_expand_horz_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_expand_vert_c	.\libass\ass_blur.c	/^void ass_expand_vert_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_face_set_size	.\libass\ass_font.c	/^void ass_face_set_size(FT_Face face, double size)$/;"	f	signature:(FT_Face face, double size)
ass_face_set_size	.\libass\ass_font.h	/^void ass_face_set_size(FT_Face face, double size);$/;"	p	signature:(FT_Face face, double size)
ass_fill_generic_tile16_c	.\libass\ass_rasterizer_c.c	/^void ass_fill_generic_tile16_c(uint8_t *buf, ptrdiff_t stride,$/;"	f	signature:(uint8_t *buf, ptrdiff_t stride, const struct segment *line, size_t n_lines, int winding)
ass_fill_generic_tile32_c	.\libass\ass_rasterizer_c.c	/^void ass_fill_generic_tile32_c(uint8_t *buf, ptrdiff_t stride,$/;"	f	signature:(uint8_t *buf, ptrdiff_t stride, const struct segment *line, size_t n_lines, int winding)
ass_fill_halfplane_tile16_c	.\libass\ass_rasterizer_c.c	/^void ass_fill_halfplane_tile16_c(uint8_t *buf, ptrdiff_t stride,$/;"	f	signature:(uint8_t *buf, ptrdiff_t stride, int32_t a, int32_t b, int64_t c, int32_t scale)
ass_fill_halfplane_tile32_c	.\libass\ass_rasterizer_c.c	/^void ass_fill_halfplane_tile32_c(uint8_t *buf, ptrdiff_t stride,$/;"	f	signature:(uint8_t *buf, ptrdiff_t stride, int32_t a, int32_t b, int64_t c, int32_t scale)
ass_fill_solid_tile16_c	.\libass\ass_rasterizer_c.c	/^void ass_fill_solid_tile16_c(uint8_t *buf, ptrdiff_t stride, int set)$/;"	f	signature:(uint8_t *buf, ptrdiff_t stride, int set)
ass_fill_solid_tile32_c	.\libass\ass_rasterizer_c.c	/^void ass_fill_solid_tile32_c(uint8_t *buf, ptrdiff_t stride, int set)$/;"	f	signature:(uint8_t *buf, ptrdiff_t stride, int set)
ass_flush_events	.\libass\ass.c	/^void ass_flush_events(ASS_Track *track)$/;"	f	signature:(ASS_Track *track)
ass_flush_events	.\libass\ass.h	/^void ass_flush_events(ASS_Track *track);$/;"	p	signature:(ASS_Track *track)
ass_font	.\libass\ass_font.h	/^struct ass_font {$/;"	s
ass_font::desc	.\libass\ass_font.h	/^    ASS_FontDesc desc;$/;"	m	struct:ass_font	access:public
ass_font::faces	.\libass\ass_font.h	/^    FT_Face faces[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_font	access:public
ass_font::faces_uid	.\libass\ass_font.h	/^    int faces_uid[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_font	access:public
ass_font::ftlibrary	.\libass\ass_font.h	/^    FT_Library ftlibrary;$/;"	m	struct:ass_font	access:public
ass_font::library	.\libass\ass_font.h	/^    ASS_Library *library;$/;"	m	struct:ass_font	access:public
ass_font::n_faces	.\libass\ass_font.h	/^    int n_faces;$/;"	m	struct:ass_font	access:public
ass_font::scale_x	.\libass\ass_font.h	/^    double scale_x, scale_y;    \/\/ current transform$/;"	m	struct:ass_font	access:public
ass_font::scale_y	.\libass\ass_font.h	/^    double scale_x, scale_y;    \/\/ current transform$/;"	m	struct:ass_font	access:public
ass_font::shaper_priv	.\libass\ass_font.h	/^    ASS_ShaperFontData *shaper_priv;$/;"	m	struct:ass_font	access:public
ass_font::size	.\libass\ass_font.h	/^    double size;$/;"	m	struct:ass_font	access:public
ass_font::v	.\libass\ass_font.h	/^    FT_Vector v;                \/\/ current shift$/;"	m	struct:ass_font	access:public
ass_font_cache_create	.\libass\ass_cache.c	/^Cache *ass_font_cache_create(void)$/;"	f	signature:(void)
ass_font_cache_create	.\libass\ass_cache.h	/^Cache *ass_font_cache_create(void);$/;"	p	signature:(void)
ass_font_clear	.\libass\ass_font.c	/^void ass_font_clear(ASS_Font *font)$/;"	f	signature:(ASS_Font *font)
ass_font_clear	.\libass\ass_font.h	/^void ass_font_clear(ASS_Font *font);$/;"	p	signature:(ASS_Font *font)
ass_font_desc	.\libass\ass_font.h	/^struct ass_font_desc {$/;"	s
ass_font_desc::bold	.\libass\ass_font.h	/^    unsigned bold;$/;"	m	struct:ass_font_desc	access:public
ass_font_desc::family	.\libass\ass_font.h	/^    char *family;$/;"	m	struct:ass_font_desc	access:public
ass_font_desc::italic	.\libass\ass_font.h	/^    unsigned italic;$/;"	m	struct:ass_font_desc	access:public
ass_font_desc::vertical	.\libass\ass_font.h	/^    int vertical;               \/\/ @font vertical layout$/;"	m	struct:ass_font_desc	access:public
ass_font_get_asc_desc	.\libass\ass_font.c	/^void ass_font_get_asc_desc(ASS_Font *font, uint32_t ch, int *asc,$/;"	f	signature:(ASS_Font *font, uint32_t ch, int *asc, int *desc)
ass_font_get_asc_desc	.\libass\ass_font.h	/^void ass_font_get_asc_desc(ASS_Font *font, uint32_t ch, int *asc,$/;"	p	signature:(ASS_Font *font, uint32_t ch, int *asc, int *desc)
ass_font_get_glyph	.\libass\ass_font.c	/^FT_Glyph ass_font_get_glyph(ASS_Font *font, uint32_t ch, int face_index,$/;"	f	signature:(ASS_Font *font, uint32_t ch, int face_index, int index, ASS_Hinting hinting, int deco)
ass_font_get_glyph	.\libass\ass_font.h	/^FT_Glyph ass_font_get_glyph(ASS_Font *font,$/;"	p	signature:(ASS_Font *font, uint32_t ch, int face_index, int index, ASS_Hinting hinting, int deco)
ass_font_get_index	.\libass\ass_font.c	/^int ass_font_get_index(ASS_FontSelector *fontsel, ASS_Font *font,$/;"	f	signature:(ASS_FontSelector *fontsel, ASS_Font *font, uint32_t symbol, int *face_index, int *glyph_index)
ass_font_get_index	.\libass\ass_font.h	/^int ass_font_get_index(ASS_FontSelector *fontsel, ASS_Font *font,$/;"	p	signature:(ASS_FontSelector *fontsel, ASS_Font *font, uint32_t symbol, int *face_index, int *glyph_index)
ass_font_index_magic	.\libass\ass_font.c	/^uint32_t ass_font_index_magic(FT_Face face, uint32_t symbol)$/;"	f	signature:(FT_Face face, uint32_t symbol)
ass_font_index_magic	.\libass\ass_font.h	/^uint32_t ass_font_index_magic(FT_Face face, uint32_t symbol);$/;"	p	signature:(FT_Face face, uint32_t symbol)
ass_font_mapping	.\libass\ass_fontselect.h	/^struct ass_font_mapping {$/;"	s
ass_font_mapping::from	.\libass\ass_fontselect.h	/^    const char *from;$/;"	m	struct:ass_font_mapping	access:public
ass_font_mapping::to	.\libass\ass_fontselect.h	/^    const char *to;$/;"	m	struct:ass_font_mapping	access:public
ass_font_new	.\libass\ass_font.c	/^ASS_Font *ass_font_new(Cache *font_cache, ASS_Library *library,$/;"	f	signature:(Cache *font_cache, ASS_Library *library, FT_Library ftlibrary, ASS_FontSelector *fontsel, ASS_FontDesc *desc)
ass_font_new	.\libass\ass_font.h	/^ASS_Font *ass_font_new(Cache *font_cache, ASS_Library *library,$/;"	p	signature:(Cache *font_cache, ASS_Library *library, FT_Library ftlibrary, ASS_FontSelector *fontsel, ASS_FontDesc *desc)
ass_font_provider_add_font	.\libass\ass_fontselect.c	/^ass_font_provider_add_font(ASS_FontProvider *provider,$/;"	f	signature:(ASS_FontProvider *provider, ASS_FontProviderMetaData *meta, const char *path, int index, void *data)
ass_font_provider_add_font	.\libass\ass_fontselect.h	/^ass_font_provider_add_font(ASS_FontProvider *provider,$/;"	p	signature:(ASS_FontProvider *provider, ASS_FontProviderMetaData *meta, const char *path, int index, void *data)
ass_font_provider_free	.\libass\ass_fontselect.c	/^void ass_font_provider_free(ASS_FontProvider *provider)$/;"	f	signature:(ASS_FontProvider *provider)
ass_font_provider_free	.\libass\ass_fontselect.h	/^void ass_font_provider_free(ASS_FontProvider *provider);$/;"	p	signature:(ASS_FontProvider *provider)
ass_font_provider_free_fontinfo	.\libass\ass_fontselect.c	/^static void ass_font_provider_free_fontinfo(ASS_FontInfo *info)$/;"	f	file:	signature:(ASS_FontInfo *info)
ass_font_provider_meta_data	.\libass\ass_fontselect.h	/^struct ass_font_provider_meta_data {$/;"	s
ass_font_provider_meta_data::families	.\libass\ass_fontselect.h	/^    char **families;$/;"	m	struct:ass_font_provider_meta_data	access:public
ass_font_provider_meta_data::fullnames	.\libass\ass_fontselect.h	/^    char **fullnames;$/;"	m	struct:ass_font_provider_meta_data	access:public
ass_font_provider_meta_data::n_family	.\libass\ass_fontselect.h	/^    int n_family;       \/\/ Number of localized family names$/;"	m	struct:ass_font_provider_meta_data	access:public
ass_font_provider_meta_data::n_fullname	.\libass\ass_fontselect.h	/^    int n_fullname;     \/\/ Number of localized full names$/;"	m	struct:ass_font_provider_meta_data	access:public
ass_font_provider_meta_data::postscript_name	.\libass\ass_fontselect.h	/^    char *postscript_name;$/;"	m	struct:ass_font_provider_meta_data	access:public
ass_font_provider_meta_data::slant	.\libass\ass_fontselect.h	/^    int slant;          \/\/ Font slant value from FONT_SLANT_*$/;"	m	struct:ass_font_provider_meta_data	access:public
ass_font_provider_meta_data::weight	.\libass\ass_fontselect.h	/^    int weight;         \/\/ Font weight in TrueType scale, 100-900$/;"	m	struct:ass_font_provider_meta_data	access:public
ass_font_provider_meta_data::width	.\libass\ass_fontselect.h	/^    int width;          \/\/ Font weight in percent, normally 100$/;"	m	struct:ass_font_provider_meta_data	access:public
ass_font_provider_new	.\libass\ass_fontselect.c	/^ass_font_provider_new(ASS_FontSelector *selector, ASS_FontProviderFuncs *funcs,$/;"	f	signature:(ASS_FontSelector *selector, ASS_FontProviderFuncs *funcs, void *data)
ass_font_provider_new	.\libass\ass_fontselect.h	/^ASS_FontProvider *ass_font_provider_new(ASS_FontSelector *selector,$/;"	p	signature:(ASS_FontSelector *selector, ASS_FontProviderFuncs *funcs, void *data)
ass_font_select	.\libass\ass_fontselect.c	/^char *ass_font_select(ASS_FontSelector *priv, ASS_Library *library,$/;"	f	signature:(ASS_FontSelector *priv, ASS_Library *library, ASS_Font *font, int *index, char **postscript_name, int *uid, ASS_FontStream *data, uint32_t code)
ass_font_select	.\libass\ass_fontselect.h	/^char *ass_font_select(ASS_FontSelector *priv, ASS_Library *library,$/;"	p	signature:(ASS_FontSelector *priv, ASS_Library *library, ASS_Font *font, int *index, char **postscript_name, int *uid, ASS_FontStream *data, uint32_t code)
ass_font_set_size	.\libass\ass_font.c	/^void ass_font_set_size(ASS_Font *font, double size)$/;"	f	signature:(ASS_Font *font, double size)
ass_font_set_size	.\libass\ass_font.h	/^void ass_font_set_size(ASS_Font *font, double size);$/;"	p	signature:(ASS_Font *font, double size)
ass_font_set_transform	.\libass\ass_font.c	/^void ass_font_set_transform(ASS_Font *font, double scale_x,$/;"	f	signature:(ASS_Font *font, double scale_x, double scale_y, FT_Vector *v)
ass_font_set_transform	.\libass\ass_font.h	/^void ass_font_set_transform(ASS_Font *font, double scale_x,$/;"	p	signature:(ASS_Font *font, double scale_x, double scale_y, FT_Vector *v)
ass_font_stream	.\libass\ass_fontselect.h	/^struct ass_font_stream {$/;"	s
ass_font_stream::func	.\libass\ass_fontselect.h	/^    size_t  (*func)(void *font_priv, unsigned char *data,$/;"	m	struct:ass_font_stream	access:public
ass_font_stream::priv	.\libass\ass_fontselect.h	/^    void *priv;$/;"	m	struct:ass_font_stream	access:public
ass_fontconfig_add_provider	.\libass\ass_fontconfig.c	/^ass_fontconfig_add_provider(ASS_Library *lib, ASS_FontSelector *selector,$/;"	f	signature:(ASS_Library *lib, ASS_FontSelector *selector, const char *config)
ass_fontconfig_add_provider	.\libass\ass_fontconfig.h	/^ass_fontconfig_add_provider(ASS_Library *lib, ASS_FontSelector *selector,$/;"	p	signature:(ASS_Library *lib, ASS_FontSelector *selector, const char *config)
ass_fonts_update	.\libass\ass.h	/^int ass_fonts_update(ASS_Renderer *priv);$/;"	p	signature:(ASS_Renderer *priv)
ass_fonts_update	.\libass\ass_render_api.c	/^int ass_fonts_update(ASS_Renderer *render_priv)$/;"	f	signature:(ASS_Renderer *render_priv)
ass_fontselect_cleanup	.\libass\ass_fontselect.c	/^static void ass_fontselect_cleanup(ASS_FontSelector *selector)$/;"	f	file:	signature:(ASS_FontSelector *selector)
ass_fontselect_free	.\libass\ass_fontselect.c	/^void ass_fontselect_free(ASS_FontSelector *priv)$/;"	f	signature:(ASS_FontSelector *priv)
ass_fontselect_free	.\libass\ass_fontselect.h	/^void ass_fontselect_free(ASS_FontSelector *priv);$/;"	p	signature:(ASS_FontSelector *priv)
ass_fontselect_init	.\libass\ass_fontselect.c	/^ass_fontselect_init(ASS_Library *library,$/;"	f	signature:(ASS_Library *library, FT_Library ftlibrary, const char *family, const char *path, const char *config, ASS_DefaultFontProvider dfp)
ass_fontselect_init	.\libass\ass_fontselect.h	/^ass_fontselect_init(ASS_Library *library,$/;"	p	signature:(ASS_Library *library, FT_Library ftlibrary, const char *family, const char *path, const char *config, ASS_DefaultFontProvider dfp)
ass_frame_ref	.\libass\ass_render.c	/^void ass_frame_ref(ASS_Image *img)$/;"	f	signature:(ASS_Image *img)
ass_frame_ref	.\libass\ass_render.h	/^void ass_frame_ref(ASS_Image *img);$/;"	p	signature:(ASS_Image *img)
ass_frame_unref	.\libass\ass_render.c	/^void ass_frame_unref(ASS_Image *img)$/;"	f	signature:(ASS_Image *img)
ass_frame_unref	.\libass\ass_render.h	/^void ass_frame_unref(ASS_Image *img);$/;"	p	signature:(ASS_Image *img)
ass_free_bitmap	.\libass\ass_bitmap.c	/^void ass_free_bitmap(Bitmap *bm)$/;"	f	signature:(Bitmap *bm)
ass_free_bitmap	.\libass\ass_bitmap.h	/^void ass_free_bitmap(Bitmap *bm);$/;"	p	signature:(Bitmap *bm)
ass_free_event	.\libass\ass.c	/^void ass_free_event(ASS_Track *track, int eid)$/;"	f	signature:(ASS_Track *track, int eid)
ass_free_event	.\libass\ass.h	/^void ass_free_event(ASS_Track *track, int eid);$/;"	p	signature:(ASS_Track *track, int eid)
ass_free_style	.\libass\ass.c	/^void ass_free_style(ASS_Track *track, int sid)$/;"	f	signature:(ASS_Track *track, int sid)
ass_free_style	.\libass\ass.h	/^void ass_free_style(ASS_Track *track, int sid);$/;"	p	signature:(ASS_Track *track, int sid)
ass_free_track	.\libass\ass.c	/^void ass_free_track(ASS_Track *track)$/;"	f	signature:(ASS_Track *track)
ass_free_track	.\libass\ass.h	/^void ass_free_track(ASS_Track *track);$/;"	p	signature:(ASS_Track *track)
ass_gaussian_blur	.\libass\ass_bitmap.h	/^bool ass_gaussian_blur(const BitmapEngine *engine, Bitmap *bm, double r2);$/;"	p	signature:(const BitmapEngine *engine, Bitmap *bm, double r2)
ass_gaussian_blur	.\libass\ass_blur.c	/^bool ass_gaussian_blur(const BitmapEngine *engine, Bitmap *bm, double r2)$/;"	f	signature:(const BitmapEngine *engine, Bitmap *bm, double r2)
ass_get_available_font_providers	.\libass\ass.h	/^void ass_get_available_font_providers(ASS_Library *priv,$/;"	p	signature:(ASS_Library *priv, ASS_DefaultFontProvider **providers, size_t *size)
ass_get_available_font_providers	.\libass\ass_fontselect.c	/^void ass_get_available_font_providers(ASS_Library *priv,$/;"	f	signature:(ASS_Library *priv, ASS_DefaultFontProvider **providers, size_t *size)
ass_get_cpuid	.\libass\x86\cpuid.h	/^void ass_get_cpuid( uint32_t *eax, uint32_t *ebx, uint32_t *ecx, uint32_t *edx);$/;"	p	signature:( uint32_t *eax, uint32_t *ebx, uint32_t *ecx, uint32_t *edx)
ass_get_xgetbv	.\libass\x86\cpuid.h	/^void ass_get_xgetbv( uint32_t op, uint32_t *eax, uint32_t *edx );$/;"	p	signature:( uint32_t op, uint32_t *eax, uint32_t *edx )
ass_glyph_embolden	.\libass\ass_font.c	/^static void ass_glyph_embolden(FT_GlyphSlot slot)$/;"	f	file:	signature:(FT_GlyphSlot slot)
ass_glyph_metrics_cache_create	.\libass\ass_cache.c	/^Cache *ass_glyph_metrics_cache_create(void)$/;"	f	signature:(void)
ass_glyph_metrics_cache_create	.\libass\ass_cache.h	/^Cache *ass_glyph_metrics_cache_create(void);$/;"	p	signature:(void)
ass_image	.\libass\ass.h	/^typedef struct ass_image {$/;"	s
ass_image::IMAGE_TYPE_CHARACTER	.\libass\ass.h	/^        IMAGE_TYPE_CHARACTER,$/;"	e	enum:ass_image::__anon2
ass_image::IMAGE_TYPE_OUTLINE	.\libass\ass.h	/^        IMAGE_TYPE_OUTLINE,$/;"	e	enum:ass_image::__anon2
ass_image::IMAGE_TYPE_SHADOW	.\libass\ass.h	/^        IMAGE_TYPE_SHADOW$/;"	e	enum:ass_image::__anon2
ass_image::bitmap	.\libass\ass.h	/^    unsigned char *bitmap;      \/\/ 1bpp stride*h alpha buffer$/;"	m	struct:ass_image	access:public
ass_image::color	.\libass\ass.h	/^    uint32_t color;             \/\/ Bitmap color and alpha, RGBA$/;"	m	struct:ass_image	access:public
ass_image::dst_x	.\libass\ass.h	/^    int dst_x, dst_y;           \/\/ Bitmap placement inside the video frame$/;"	m	struct:ass_image	access:public
ass_image::dst_y	.\libass\ass.h	/^    int dst_x, dst_y;           \/\/ Bitmap placement inside the video frame$/;"	m	struct:ass_image	access:public
ass_image::h	.\libass\ass.h	/^    int w, h;                   \/\/ Bitmap width\/height$/;"	m	struct:ass_image	access:public
ass_image::next	.\libass\ass.h	/^    struct ass_image *next;   \/\/ Next image, or NULL$/;"	m	struct:ass_image	typeref:struct:ass_image::ass_image	access:public
ass_image::stride	.\libass\ass.h	/^    int stride;                 \/\/ Bitmap stride$/;"	m	struct:ass_image	access:public
ass_image::type	.\libass\ass.h	/^    } type;$/;"	m	struct:ass_image	typeref:enum:ass_image::__anon2	access:public
ass_image::w	.\libass\ass.h	/^    int w, h;                   \/\/ Bitmap width\/height$/;"	m	struct:ass_image	access:public
ass_image_compare	.\libass\ass_render.c	/^static int ass_image_compare(ASS_Image *i1, ASS_Image *i2)$/;"	f	file:	signature:(ASS_Image *i1, ASS_Image *i2)
ass_isdigit	.\libass\ass_string.h	/^static inline int ass_isdigit(int c)$/;"	f	signature:(int c)
ass_isspace	.\libass\ass_string.h	/^static inline int ass_isspace(int c)$/;"	f	signature:(int c)
ass_lazy_track_init	.\libass\ass.c	/^void ass_lazy_track_init(ASS_Library *lib, ASS_Track *track)$/;"	f	signature:(ASS_Library *lib, ASS_Track *track)
ass_lazy_track_init	.\libass\ass_render.h	/^void ass_lazy_track_init(ASS_Library *lib, ASS_Track *track);$/;"	p	signature:(ASS_Library *lib, ASS_Track *track)
ass_library	.\libass\ass_library.h	/^struct ass_library {$/;"	s
ass_library	.\profile\profile.c	/^ASS_Library *ass_library;$/;"	v
ass_library	.\test\test.c	/^ASS_Library *ass_library;$/;"	v
ass_library::extract_fonts	.\libass\ass_library.h	/^    int extract_fonts;$/;"	m	struct:ass_library	access:public
ass_library::fontdata	.\libass\ass_library.h	/^    ASS_Fontdata *fontdata;$/;"	m	struct:ass_library	access:public
ass_library::fonts_dir	.\libass\ass_library.h	/^    char *fonts_dir;$/;"	m	struct:ass_library	access:public
ass_library::msg_callback	.\libass\ass_library.h	/^    void (*msg_callback)(int, const char *, va_list, void *);$/;"	m	struct:ass_library	access:public
ass_library::msg_callback_data	.\libass\ass_library.h	/^    void *msg_callback_data;$/;"	m	struct:ass_library	access:public
ass_library::num_fontdata	.\libass\ass_library.h	/^    int num_fontdata;$/;"	m	struct:ass_library	access:public
ass_library::style_overrides	.\libass\ass_library.h	/^    char **style_overrides;$/;"	m	struct:ass_library	access:public
ass_library_done	.\libass\ass.h	/^void ass_library_done(ASS_Library *priv);$/;"	p	signature:(ASS_Library *priv)
ass_library_done	.\libass\ass_library.c	/^void ass_library_done(ASS_Library *priv)$/;"	f	signature:(ASS_Library *priv)
ass_library_init	.\libass\ass.h	/^ASS_Library *ass_library_init(void);$/;"	p	signature:(void)
ass_library_init	.\libass\ass_library.c	/^ASS_Library *ass_library_init(void)$/;"	f	signature:(void)
ass_library_version	.\libass\ass.c	/^int ass_library_version(void)$/;"	f	signature:(void)
ass_library_version	.\libass\ass.h	/^int ass_library_version(void);$/;"	p	signature:(void)
ass_map_font	.\libass\ass_fontselect.c	/^void ass_map_font(const ASS_FontMapping *map, int len, const char *name,$/;"	f	signature:(const ASS_FontMapping *map, int len, const char *name, ASS_FontProviderMetaData *meta)
ass_map_font	.\libass\ass_fontselect.h	/^void ass_map_font(const ASS_FontMapping *map, int len, const char *name,$/;"	p	signature:(const ASS_FontMapping *map, int len, const char *name, ASS_FontProviderMetaData *meta)
ass_msg	.\libass\ass_utils.c	/^void ass_msg(ASS_Library *priv, int lvl, const char *fmt, ...)$/;"	f	signature:(ASS_Library *priv, int lvl, const char *fmt, ...)
ass_msg	.\libass\ass_utils.h	/^void ass_msg(ASS_Library *priv, int lvl, const char *fmt, ...);$/;"	p	signature:(ASS_Library *priv, int lvl, const char *fmt, ...)
ass_msg_handler	.\libass\ass_library.c	/^static void ass_msg_handler(int level, const char *fmt, va_list va, void *data)$/;"	f	file:	signature:(int level, const char *fmt, va_list va, void *data)
ass_mul_bitmaps_c	.\libass\ass_bitmap.c	/^void ass_mul_bitmaps_c(uint8_t *dst, intptr_t dst_stride,$/;"	f	signature:(uint8_t *dst, intptr_t dst_stride, uint8_t *src1, intptr_t src1_stride, uint8_t *src2, intptr_t src2_stride, intptr_t w, intptr_t h)
ass_new_track	.\libass\ass.c	/^ASS_Track *ass_new_track(ASS_Library *library)$/;"	f	signature:(ASS_Library *library)
ass_new_track	.\libass\ass.h	/^ASS_Track *ass_new_track(ASS_Library *);$/;"	p	signature:(ASS_Library *)
ass_outline_cache_create	.\libass\ass_cache.c	/^Cache *ass_outline_cache_create(void)$/;"	f	signature:(void)
ass_outline_cache_create	.\libass\ass_cache.h	/^Cache *ass_outline_cache_create(void);$/;"	p	signature:(void)
ass_pre_blur1_horz_c	.\libass\ass_blur.c	/^void ass_pre_blur1_horz_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_pre_blur1_vert_c	.\libass\ass_blur.c	/^void ass_pre_blur1_vert_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_pre_blur2_horz_c	.\libass\ass_blur.c	/^void ass_pre_blur2_horz_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_pre_blur2_vert_c	.\libass\ass_blur.c	/^void ass_pre_blur2_vert_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_pre_blur3_horz_c	.\libass\ass_blur.c	/^void ass_pre_blur3_horz_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_pre_blur3_vert_c	.\libass\ass_blur.c	/^void ass_pre_blur3_vert_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_process_chunk	.\libass\ass.c	/^void ass_process_chunk(ASS_Track *track, char *data, int size,$/;"	f	signature:(ASS_Track *track, char *data, int size, long long timecode, long long duration)
ass_process_chunk	.\libass\ass.h	/^void ass_process_chunk(ASS_Track *track, char *data, int size,$/;"	p	signature:(ASS_Track *track, char *data, int size, long long timecode, long long duration)
ass_process_codec_private	.\libass\ass.c	/^void ass_process_codec_private(ASS_Track *track, char *data, int size)$/;"	f	signature:(ASS_Track *track, char *data, int size)
ass_process_codec_private	.\libass\ass.h	/^void ass_process_codec_private(ASS_Track *track, char *data, int size);$/;"	p	signature:(ASS_Track *track, char *data, int size)
ass_process_data	.\libass\ass.c	/^void ass_process_data(ASS_Track *track, char *data, int size)$/;"	f	signature:(ASS_Track *track, char *data, int size)
ass_process_data	.\libass\ass.h	/^void ass_process_data(ASS_Track *track, char *data, int size);$/;"	p	signature:(ASS_Track *track, char *data, int size)
ass_process_force_style	.\libass\ass.c	/^void ass_process_force_style(ASS_Track *track)$/;"	f	signature:(ASS_Track *track)
ass_process_force_style	.\libass\ass.h	/^void ass_process_force_style(ASS_Track *track);$/;"	p	signature:(ASS_Track *track)
ass_read_file	.\libass\ass.c	/^ASS_Track *ass_read_file(ASS_Library *library, char *fname,$/;"	f	signature:(ASS_Library *library, char *fname, char *codepage)
ass_read_file	.\libass\ass.h	/^ASS_Track *ass_read_file(ASS_Library *library, char *fname,$/;"	p	signature:(ASS_Library *library, char *fname, char *codepage)
ass_read_memory	.\libass\ass.c	/^ASS_Track *ass_read_memory(ASS_Library *library, char *buf,$/;"	f	signature:(ASS_Library *library, char *buf, size_t bufsize, char *codepage)
ass_read_memory	.\libass\ass.h	/^ASS_Track *ass_read_memory(ASS_Library *library, char *buf,$/;"	p	signature:(ASS_Library *library, char *buf, size_t bufsize, char *codepage)
ass_read_styles	.\libass\ass.c	/^int ass_read_styles(ASS_Track *track, char *fname, char *codepage)$/;"	f	signature:(ASS_Track *track, char *fname, char *codepage)
ass_read_styles	.\libass\ass.h	/^int ass_read_styles(ASS_Track *track, char *fname, char *codepage);$/;"	p	signature:(ASS_Track *track, char *fname, char *codepage)
ass_read_utf16be	.\libass\ass_utils.c	/^static uint32_t ass_read_utf16be(uint8_t **src, size_t bytes)$/;"	f	file:	signature:(uint8_t **src, size_t bytes)
ass_realloc_array	.\libass\ass_utils.c	/^void *ass_realloc_array(void *ptr, size_t nmemb, size_t size)$/;"	f	signature:(void *ptr, size_t nmemb, size_t size)
ass_realloc_array	.\libass\ass_utils.h	/^void *ass_realloc_array(void *ptr, size_t nmemb, size_t size);$/;"	p	signature:(void *ptr, size_t nmemb, size_t size)
ass_reconfigure	.\libass\ass_render_api.c	/^static void ass_reconfigure(ASS_Renderer *priv)$/;"	f	file:	signature:(ASS_Renderer *priv)
ass_render_event	.\libass\ass_render.c	/^ass_render_event(ASS_Renderer *render_priv, ASS_Event *event,$/;"	f	file:	signature:(ASS_Renderer *render_priv, ASS_Event *event, EventImages *event_images)
ass_render_frame	.\libass\ass.h	/^ASS_Image *ass_render_frame(ASS_Renderer *priv, ASS_Track *track,$/;"	p	signature:(ASS_Renderer *priv, ASS_Track *track, long long now, int *detect_change)
ass_render_frame	.\libass\ass_render.c	/^ASS_Image *ass_render_frame(ASS_Renderer *priv, ASS_Track *track,$/;"	f	signature:(ASS_Renderer *priv, ASS_Track *track, long long now, int *detect_change)
ass_renderer	.\libass\ass_render.h	/^struct ass_renderer {$/;"	s
ass_renderer	.\profile\profile.c	/^ASS_Renderer *ass_renderer;$/;"	v
ass_renderer	.\test\test.c	/^ASS_Renderer *ass_renderer;$/;"	v
ass_renderer::blur_scale	.\libass\ass_render.h	/^    double blur_scale;$/;"	m	struct:ass_renderer	access:public
ass_renderer::border_scale	.\libass\ass_render.h	/^    double border_scale;$/;"	m	struct:ass_renderer	access:public
ass_renderer::cache	.\libass\ass_render.h	/^    CacheStore cache;$/;"	m	struct:ass_renderer	access:public
ass_renderer::eimg	.\libass\ass_render.h	/^    EventImages *eimg;          \/\/ temporary buffer for sorting rendered events$/;"	m	struct:ass_renderer	access:public
ass_renderer::eimg_size	.\libass\ass_render.h	/^    int eimg_size;              \/\/ allocated buffer size$/;"	m	struct:ass_renderer	access:public
ass_renderer::engine	.\libass\ass_render.h	/^    const BitmapEngine *engine;$/;"	m	struct:ass_renderer	access:public
ass_renderer::font_scale	.\libass\ass_render.h	/^    double font_scale;$/;"	m	struct:ass_renderer	access:public
ass_renderer::font_scale_x	.\libass\ass_render.h	/^    double font_scale_x;        \/\/ x scale applied to all glyphs to preserve text aspect ratio$/;"	m	struct:ass_renderer	access:public
ass_renderer::fontselect	.\libass\ass_render.h	/^    ASS_FontSelector *fontselect;$/;"	m	struct:ass_renderer	access:public
ass_renderer::ftlibrary	.\libass\ass_render.h	/^    FT_Library ftlibrary;$/;"	m	struct:ass_renderer	access:public
ass_renderer::height	.\libass\ass_render.h	/^    int width, height;          \/\/ screen dimensions$/;"	m	struct:ass_renderer	access:public
ass_renderer::images_root	.\libass\ass_render.h	/^    ASS_Image *images_root;     \/\/ rendering result is stored here$/;"	m	struct:ass_renderer	access:public
ass_renderer::library	.\libass\ass_render.h	/^    ASS_Library *library;$/;"	m	struct:ass_renderer	access:public
ass_renderer::orig_height	.\libass\ass_render.h	/^    int orig_height;            \/\/ frame height ( = screen height - margins )$/;"	m	struct:ass_renderer	access:public
ass_renderer::orig_height_nocrop	.\libass\ass_render.h	/^    int orig_height_nocrop;     \/\/ frame height ( = screen height - margins + cropheight)$/;"	m	struct:ass_renderer	access:public
ass_renderer::orig_width	.\libass\ass_render.h	/^    int orig_width;             \/\/ frame width ( = screen width - margins )$/;"	m	struct:ass_renderer	access:public
ass_renderer::orig_width_nocrop	.\libass\ass_render.h	/^    int orig_width_nocrop;      \/\/ frame width ( = screen width - margins + cropwidth)$/;"	m	struct:ass_renderer	access:public
ass_renderer::prev_images_root	.\libass\ass_render.h	/^    ASS_Image *prev_images_root;$/;"	m	struct:ass_renderer	access:public
ass_renderer::rasterizer	.\libass\ass_render.h	/^    RasterizerData rasterizer;$/;"	m	struct:ass_renderer	access:public
ass_renderer::render_id	.\libass\ass_render.h	/^    int render_id;$/;"	m	struct:ass_renderer	access:public
ass_renderer::settings	.\libass\ass_render.h	/^    ASS_Settings settings;$/;"	m	struct:ass_renderer	access:public
ass_renderer::shaper	.\libass\ass_render.h	/^    ASS_Shaper *shaper;$/;"	m	struct:ass_renderer	access:public
ass_renderer::state	.\libass\ass_render.h	/^    RenderContext state;$/;"	m	struct:ass_renderer	access:public
ass_renderer::text_info	.\libass\ass_render.h	/^    TextInfo text_info;$/;"	m	struct:ass_renderer	access:public
ass_renderer::time	.\libass\ass_render.h	/^    long long time;             \/\/ frame's timestamp, ms$/;"	m	struct:ass_renderer	access:public
ass_renderer::track	.\libass\ass_render.h	/^    ASS_Track *track;$/;"	m	struct:ass_renderer	access:public
ass_renderer::user_override_style	.\libass\ass_render.h	/^    ASS_Style user_override_style;$/;"	m	struct:ass_renderer	access:public
ass_renderer::width	.\libass\ass_render.h	/^    int width, height;          \/\/ screen dimensions$/;"	m	struct:ass_renderer	access:public
ass_renderer_done	.\libass\ass.h	/^void ass_renderer_done(ASS_Renderer *priv);$/;"	p	signature:(ASS_Renderer *priv)
ass_renderer_done	.\libass\ass_render.c	/^void ass_renderer_done(ASS_Renderer *render_priv)$/;"	f	signature:(ASS_Renderer *render_priv)
ass_renderer_init	.\libass\ass.h	/^ASS_Renderer *ass_renderer_init(ASS_Library *);$/;"	p	signature:(ASS_Library *)
ass_renderer_init	.\libass\ass_render.c	/^ASS_Renderer *ass_renderer_init(ASS_Library *library)$/;"	f	signature:(ASS_Library *library)
ass_set_aspect_ratio	.\libass\ass.h	/^void ass_set_aspect_ratio(ASS_Renderer *priv, double dar, double sar);$/;"	p	signature:(ASS_Renderer *priv, double dar, double sar)
ass_set_aspect_ratio	.\libass\ass_render_api.c	/^void ass_set_aspect_ratio(ASS_Renderer *priv, double dar, double sar)$/;"	f	signature:(ASS_Renderer *priv, double dar, double sar)
ass_set_cache_limits	.\libass\ass.h	/^void ass_set_cache_limits(ASS_Renderer *priv, int glyph_max,$/;"	p	signature:(ASS_Renderer *priv, int glyph_max, int bitmap_max_size)
ass_set_cache_limits	.\libass\ass_render_api.c	/^void ass_set_cache_limits(ASS_Renderer *render_priv, int glyph_max,$/;"	f	signature:(ASS_Renderer *render_priv, int glyph_max, int bitmap_max)
ass_set_check_readorder	.\libass\ass.c	/^void ass_set_check_readorder(ASS_Track *track, int check_readorder)$/;"	f	signature:(ASS_Track *track, int check_readorder)
ass_set_check_readorder	.\libass\ass.h	/^void ass_set_check_readorder(ASS_Track *track, int check_readorder);$/;"	p	signature:(ASS_Track *track, int check_readorder)
ass_set_extract_fonts	.\libass\ass.h	/^void ass_set_extract_fonts(ASS_Library *priv, int extract);$/;"	p	signature:(ASS_Library *priv, int extract)
ass_set_extract_fonts	.\libass\ass_library.c	/^void ass_set_extract_fonts(ASS_Library *priv, int extract)$/;"	f	signature:(ASS_Library *priv, int extract)
ass_set_font_scale	.\libass\ass.h	/^void ass_set_font_scale(ASS_Renderer *priv, double font_scale);$/;"	p	signature:(ASS_Renderer *priv, double font_scale)
ass_set_font_scale	.\libass\ass_render_api.c	/^void ass_set_font_scale(ASS_Renderer *priv, double font_scale)$/;"	f	signature:(ASS_Renderer *priv, double font_scale)
ass_set_fonts	.\libass\ass.h	/^void ass_set_fonts(ASS_Renderer *priv, const char *default_font,$/;"	p	signature:(ASS_Renderer *priv, const char *default_font, const char *default_family, int dfp, const char *config, int update)
ass_set_fonts	.\libass\ass_render_api.c	/^void ass_set_fonts(ASS_Renderer *priv, const char *default_font,$/;"	f	signature:(ASS_Renderer *priv, const char *default_font, const char *default_family, int dfp, const char *config, int update)
ass_set_fonts_dir	.\libass\ass.h	/^void ass_set_fonts_dir(ASS_Library *priv, const char *fonts_dir);$/;"	p	signature:(ASS_Library *priv, const char *fonts_dir)
ass_set_fonts_dir	.\libass\ass_library.c	/^void ass_set_fonts_dir(ASS_Library *priv, const char *fonts_dir)$/;"	f	signature:(ASS_Library *priv, const char *fonts_dir)
ass_set_frame_size	.\libass\ass.h	/^void ass_set_frame_size(ASS_Renderer *priv, int w, int h);$/;"	p	signature:(ASS_Renderer *priv, int w, int h)
ass_set_frame_size	.\libass\ass_render_api.c	/^void ass_set_frame_size(ASS_Renderer *priv, int w, int h)$/;"	f	signature:(ASS_Renderer *priv, int w, int h)
ass_set_hinting	.\libass\ass.h	/^void ass_set_hinting(ASS_Renderer *priv, ASS_Hinting ht);$/;"	p	signature:(ASS_Renderer *priv, ASS_Hinting ht)
ass_set_hinting	.\libass\ass_render_api.c	/^void ass_set_hinting(ASS_Renderer *priv, ASS_Hinting ht)$/;"	f	signature:(ASS_Renderer *priv, ASS_Hinting ht)
ass_set_line_position	.\libass\ass.h	/^void ass_set_line_position(ASS_Renderer *priv, double line_position);$/;"	p	signature:(ASS_Renderer *priv, double line_position)
ass_set_line_position	.\libass\ass_render_api.c	/^void ass_set_line_position(ASS_Renderer *priv, double line_position)$/;"	f	signature:(ASS_Renderer *priv, double line_position)
ass_set_line_spacing	.\libass\ass.h	/^void ass_set_line_spacing(ASS_Renderer *priv, double line_spacing);$/;"	p	signature:(ASS_Renderer *priv, double line_spacing)
ass_set_line_spacing	.\libass\ass_render_api.c	/^void ass_set_line_spacing(ASS_Renderer *priv, double line_spacing)$/;"	f	signature:(ASS_Renderer *priv, double line_spacing)
ass_set_margins	.\libass\ass.h	/^void ass_set_margins(ASS_Renderer *priv, int t, int b, int l, int r);$/;"	p	signature:(ASS_Renderer *priv, int t, int b, int l, int r)
ass_set_margins	.\libass\ass_render_api.c	/^void ass_set_margins(ASS_Renderer *priv, int t, int b, int l, int r)$/;"	f	signature:(ASS_Renderer *priv, int t, int b, int l, int r)
ass_set_message_cb	.\libass\ass.h	/^void ass_set_message_cb(ASS_Library *priv, void (*msg_cb)$/;"	p	signature:(ASS_Library *priv, void (*msg_cb) (int level, const char *fmt, va_list args, void *data), void *data)
ass_set_message_cb	.\libass\ass_library.c	/^void ass_set_message_cb(ASS_Library *priv,$/;"	f	signature:(ASS_Library *priv, void (*msg_cb)(int, const char *, va_list, void *), void *data)
ass_set_pixel_aspect	.\libass\ass.h	/^void ass_set_pixel_aspect(ASS_Renderer *priv, double par);$/;"	p	signature:(ASS_Renderer *priv, double par)
ass_set_pixel_aspect	.\libass\ass_render_api.c	/^void ass_set_pixel_aspect(ASS_Renderer *priv, double par)$/;"	f	signature:(ASS_Renderer *priv, double par)
ass_set_selective_style_override	.\libass\ass.h	/^void ass_set_selective_style_override(ASS_Renderer *priv, ASS_Style *style);$/;"	p	signature:(ASS_Renderer *priv, ASS_Style *style)
ass_set_selective_style_override	.\libass\ass_render_api.c	/^void ass_set_selective_style_override(ASS_Renderer *priv, ASS_Style *style)$/;"	f	signature:(ASS_Renderer *priv, ASS_Style *style)
ass_set_selective_style_override_enabled	.\libass\ass.h	/^void ass_set_selective_style_override_enabled(ASS_Renderer *priv, int bits);$/;"	p	signature:(ASS_Renderer *priv, int bits)
ass_set_selective_style_override_enabled	.\libass\ass_render_api.c	/^void ass_set_selective_style_override_enabled(ASS_Renderer *priv, int bits)$/;"	f	signature:(ASS_Renderer *priv, int bits)
ass_set_shaper	.\libass\ass.h	/^void ass_set_shaper(ASS_Renderer *priv, ASS_ShapingLevel level);$/;"	p	signature:(ASS_Renderer *priv, ASS_ShapingLevel level)
ass_set_shaper	.\libass\ass_render_api.c	/^void ass_set_shaper(ASS_Renderer *priv, ASS_ShapingLevel level)$/;"	f	signature:(ASS_Renderer *priv, ASS_ShapingLevel level)
ass_set_storage_size	.\libass\ass.h	/^void ass_set_storage_size(ASS_Renderer *priv, int w, int h);$/;"	p	signature:(ASS_Renderer *priv, int w, int h)
ass_set_storage_size	.\libass\ass_render_api.c	/^void ass_set_storage_size(ASS_Renderer *priv, int w, int h)$/;"	f	signature:(ASS_Renderer *priv, int w, int h)
ass_set_style_overrides	.\libass\ass.h	/^void ass_set_style_overrides(ASS_Library *priv, char **list);$/;"	p	signature:(ASS_Library *priv, char **list)
ass_set_style_overrides	.\libass\ass_library.c	/^void ass_set_style_overrides(ASS_Library *priv, char **list)$/;"	f	signature:(ASS_Library *priv, char **list)
ass_set_use_margins	.\libass\ass.h	/^void ass_set_use_margins(ASS_Renderer *priv, int use);$/;"	p	signature:(ASS_Renderer *priv, int use)
ass_set_use_margins	.\libass\ass_render_api.c	/^void ass_set_use_margins(ASS_Renderer *priv, int use)$/;"	f	signature:(ASS_Renderer *priv, int use)
ass_shaper	.\libass\ass_shaper.c	/^struct ass_shaper {$/;"	s	file:
ass_shaper::base_direction	.\libass\ass_shaper.c	/^    FriBidiParType base_direction;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::cmap	.\libass\ass_shaper.c	/^    FriBidiStrIndex *cmap;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::ctypes	.\libass\ass_shaper.c	/^    FriBidiCharType *ctypes;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::emblevels	.\libass\ass_shaper.c	/^    FriBidiLevel *emblevels;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::event_text	.\libass\ass_shaper.c	/^    FriBidiChar *event_text;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::features	.\libass\ass_shaper.c	/^    hb_feature_t *features;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::language	.\libass\ass_shaper.c	/^    hb_language_t language;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::metrics_cache	.\libass\ass_shaper.c	/^    Cache *metrics_cache;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::n_features	.\libass\ass_shaper.c	/^    int n_features;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::n_glyphs	.\libass\ass_shaper.c	/^    int n_glyphs;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper::shaping_level	.\libass\ass_shaper.c	/^    ASS_ShapingLevel shaping_level;$/;"	m	struct:ass_shaper	file:	access:public
ass_shaper_cleanup	.\libass\ass_shaper.c	/^void ass_shaper_cleanup(ASS_Shaper *shaper, TextInfo *text_info)$/;"	f	signature:(ASS_Shaper *shaper, TextInfo *text_info)
ass_shaper_cleanup	.\libass\ass_shaper.h	/^void ass_shaper_cleanup(ASS_Shaper *shaper, TextInfo *text_info);$/;"	p	signature:(ASS_Shaper *shaper, TextInfo *text_info)
ass_shaper_determine_script	.\libass\ass_shaper.c	/^void ass_shaper_determine_script(ASS_Shaper *shaper, GlyphInfo *glyphs,$/;"	f	signature:(ASS_Shaper *shaper, GlyphInfo *glyphs, size_t len)
ass_shaper_empty_cache	.\libass\ass_shaper.c	/^void ass_shaper_empty_cache(ASS_Shaper *shaper)$/;"	f	signature:(ASS_Shaper *shaper)
ass_shaper_empty_cache	.\libass\ass_shaper.h	/^void ass_shaper_empty_cache(ASS_Shaper *shaper);$/;"	p	signature:(ASS_Shaper *shaper)
ass_shaper_find_runs	.\libass\ass_shaper.c	/^void ass_shaper_find_runs(ASS_Shaper *shaper, ASS_Renderer *render_priv,$/;"	f	signature:(ASS_Shaper *shaper, ASS_Renderer *render_priv, GlyphInfo *glyphs, size_t len)
ass_shaper_find_runs	.\libass\ass_shaper.h	/^void ass_shaper_find_runs(ASS_Shaper *shaper, ASS_Renderer *render_priv,$/;"	p	signature:(ASS_Shaper *shaper, ASS_Renderer *render_priv, GlyphInfo *glyphs, size_t len)
ass_shaper_font_data	.\libass\ass_shaper.c	/^struct ass_shaper_font_data {$/;"	s	file:
ass_shaper_font_data::font_funcs	.\libass\ass_shaper.c	/^    hb_font_funcs_t *font_funcs[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_shaper_font_data	file:	access:public
ass_shaper_font_data::fonts	.\libass\ass_shaper.c	/^    hb_font_t *fonts[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_shaper_font_data	file:	access:public
ass_shaper_font_data::metrics_data	.\libass\ass_shaper.c	/^    struct ass_shaper_metrics_data *metrics_data[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_shaper_font_data	typeref:struct:ass_shaper_font_data::ass_shaper_metrics_data	file:	access:public
ass_shaper_font_data_free	.\libass\ass_shaper.c	/^void ass_shaper_font_data_free(ASS_ShaperFontData *priv)$/;"	f	signature:(ASS_ShaperFontData *priv)
ass_shaper_font_data_free	.\libass\ass_shaper.h	/^void ass_shaper_font_data_free(ASS_ShaperFontData *priv);$/;"	p	signature:(ASS_ShaperFontData *priv)
ass_shaper_free	.\libass\ass_shaper.c	/^void ass_shaper_free(ASS_Shaper *shaper)$/;"	f	signature:(ASS_Shaper *shaper)
ass_shaper_free	.\libass\ass_shaper.h	/^void ass_shaper_free(ASS_Shaper *shaper);$/;"	p	signature:(ASS_Shaper *shaper)
ass_shaper_info	.\libass\ass_shaper.c	/^void ass_shaper_info(ASS_Library *lib)$/;"	f	signature:(ASS_Library *lib)
ass_shaper_info	.\libass\ass_shaper.h	/^void ass_shaper_info(ASS_Library *lib);$/;"	p	signature:(ASS_Library *lib)
ass_shaper_metrics_data	.\libass\ass_shaper.c	/^struct ass_shaper_metrics_data {$/;"	s	file:
ass_shaper_metrics_data::hash_key	.\libass\ass_shaper.c	/^    GlyphMetricsHashKey hash_key;$/;"	m	struct:ass_shaper_metrics_data	file:	access:public
ass_shaper_metrics_data::metrics_cache	.\libass\ass_shaper.c	/^    Cache *metrics_cache;$/;"	m	struct:ass_shaper_metrics_data	file:	access:public
ass_shaper_metrics_data::vertical	.\libass\ass_shaper.c	/^    int vertical;$/;"	m	struct:ass_shaper_metrics_data	file:	access:public
ass_shaper_new	.\libass\ass_shaper.c	/^ASS_Shaper *ass_shaper_new(size_t prealloc)$/;"	f	signature:(size_t prealloc)
ass_shaper_new	.\libass\ass_shaper.h	/^ASS_Shaper *ass_shaper_new(size_t prealloc);$/;"	p	signature:(size_t prealloc)
ass_shaper_reorder	.\libass\ass_shaper.c	/^FriBidiStrIndex *ass_shaper_reorder(ASS_Shaper *shaper, TextInfo *text_info)$/;"	f	signature:(ASS_Shaper *shaper, TextInfo *text_info)
ass_shaper_reorder	.\libass\ass_shaper.h	/^FriBidiStrIndex *ass_shaper_reorder(ASS_Shaper *shaper, TextInfo *text_info);$/;"	p	signature:(ASS_Shaper *shaper, TextInfo *text_info)
ass_shaper_set_base_direction	.\libass\ass_shaper.c	/^void ass_shaper_set_base_direction(ASS_Shaper *shaper, FriBidiParType dir)$/;"	f	signature:(ASS_Shaper *shaper, FriBidiParType dir)
ass_shaper_set_base_direction	.\libass\ass_shaper.h	/^void ass_shaper_set_base_direction(ASS_Shaper *shaper, FriBidiParType dir);$/;"	p	signature:(ASS_Shaper *shaper, FriBidiParType dir)
ass_shaper_set_kerning	.\libass\ass_shaper.c	/^void ass_shaper_set_kerning(ASS_Shaper *shaper, int kern)$/;"	f	signature:(ASS_Shaper *shaper, int kern)
ass_shaper_set_kerning	.\libass\ass_shaper.h	/^void ass_shaper_set_kerning(ASS_Shaper *shaper, int kern);$/;"	p	signature:(ASS_Shaper *shaper, int kern)
ass_shaper_set_language	.\libass\ass_shaper.c	/^void ass_shaper_set_language(ASS_Shaper *shaper, const char *code)$/;"	f	signature:(ASS_Shaper *shaper, const char *code)
ass_shaper_set_language	.\libass\ass_shaper.h	/^void ass_shaper_set_language(ASS_Shaper *shaper, const char *code);$/;"	p	signature:(ASS_Shaper *shaper, const char *code)
ass_shaper_set_level	.\libass\ass_shaper.c	/^void ass_shaper_set_level(ASS_Shaper *shaper, ASS_ShapingLevel level)$/;"	f	signature:(ASS_Shaper *shaper, ASS_ShapingLevel level)
ass_shaper_set_level	.\libass\ass_shaper.h	/^void ass_shaper_set_level(ASS_Shaper *shaper, ASS_ShapingLevel level);$/;"	p	signature:(ASS_Shaper *shaper, ASS_ShapingLevel level)
ass_shaper_shape	.\libass\ass_shaper.c	/^int ass_shaper_shape(ASS_Shaper *shaper, TextInfo *text_info)$/;"	f	signature:(ASS_Shaper *shaper, TextInfo *text_info)
ass_shaper_shape	.\libass\ass_shaper.h	/^int ass_shaper_shape(ASS_Shaper *shaper, TextInfo *text_info);$/;"	p	signature:(ASS_Shaper *shaper, TextInfo *text_info)
ass_shaper_skip_characters	.\libass\ass_shaper.c	/^static void ass_shaper_skip_characters(TextInfo *text_info)$/;"	f	file:	signature:(TextInfo *text_info)
ass_shrink_horz_c	.\libass\ass_blur.c	/^void ass_shrink_horz_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_shrink_vert_c	.\libass\ass_blur.c	/^void ass_shrink_vert_c(int16_t *dst, const int16_t *src,$/;"	f	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
ass_start_frame	.\libass\ass_render.c	/^ass_start_frame(ASS_Renderer *render_priv, ASS_Track *track,$/;"	f	file:	signature:(ASS_Renderer *render_priv, ASS_Track *track, long long now)
ass_step_sub	.\libass\ass.c	/^long long ass_step_sub(ASS_Track *track, long long now, int movement)$/;"	f	signature:(ASS_Track *track, long long now, int movement)
ass_step_sub	.\libass\ass.h	/^long long ass_step_sub(ASS_Track *track, long long now, int movement);$/;"	p	signature:(ASS_Track *track, long long now, int movement)
ass_strcasecmp	.\libass\ass_string.c	/^int ass_strcasecmp(const char *s1, const char *s2)$/;"	f	signature:(const char *s1, const char *s2)
ass_strcasecmp	.\libass\ass_string.h	/^int ass_strcasecmp(const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
ass_strike_outline_glyph	.\libass\ass_font.c	/^static int ass_strike_outline_glyph(FT_Face face, ASS_Font *font,$/;"	f	file:	signature:(FT_Face face, ASS_Font *font, FT_Glyph glyph, int under, int through)
ass_stripe_pack_c	.\libass\ass_blur.c	/^void ass_stripe_pack_c(uint8_t *dst, ptrdiff_t dst_stride, const int16_t *src,$/;"	f	signature:(uint8_t *dst, ptrdiff_t dst_stride, const int16_t *src, uintptr_t width, uintptr_t height)
ass_stripe_unpack_c	.\libass\ass_blur.c	/^void ass_stripe_unpack_c(int16_t *dst, const uint8_t *src, ptrdiff_t src_stride,$/;"	f	signature:(int16_t *dst, const uint8_t *src, ptrdiff_t src_stride, uintptr_t width, uintptr_t height)
ass_strncasecmp	.\libass\ass_string.c	/^int ass_strncasecmp(const char *s1, const char *s2, size_t n)$/;"	f	signature:(const char *s1, const char *s2, size_t n)
ass_strncasecmp	.\libass\ass_string.h	/^int ass_strncasecmp(const char *s1, const char *s2, size_t n);$/;"	p	signature:(const char *s1, const char *s2, size_t n)
ass_strndup	.\libass\ass_utils.c	/^char *ass_strndup(const char *s, size_t n)$/;"	f	signature:(const char *s, size_t n)
ass_strndup	.\libass\ass_utils.h	/^char *ass_strndup(const char *s, size_t n);$/;"	p	signature:(const char *s, size_t n)
ass_strtod	.\libass\ass_strtod.c	/^ass_strtod($/;"	f	signature:( const char *string, char **endPtr )
ass_strtod	.\libass\ass_utils.h	/^double ass_strtod(const char *string, char **endPtr);$/;"	p	signature:(const char *string, char **endPtr)
ass_style	.\libass\ass_types.h	/^typedef struct ass_style {$/;"	s
ass_style::Alignment	.\libass\ass_types.h	/^    int Alignment;$/;"	m	struct:ass_style	access:public
ass_style::Angle	.\libass\ass_types.h	/^    double Angle;$/;"	m	struct:ass_style	access:public
ass_style::BackColour	.\libass\ass_types.h	/^    uint32_t BackColour;$/;"	m	struct:ass_style	access:public
ass_style::Blur	.\libass\ass_types.h	/^    double Blur;$/;"	m	struct:ass_style	access:public
ass_style::Bold	.\libass\ass_types.h	/^    int Bold;$/;"	m	struct:ass_style	access:public
ass_style::BorderStyle	.\libass\ass_types.h	/^    int BorderStyle;$/;"	m	struct:ass_style	access:public
ass_style::Encoding	.\libass\ass_types.h	/^    int Encoding;$/;"	m	struct:ass_style	access:public
ass_style::FontName	.\libass\ass_types.h	/^    char *FontName;$/;"	m	struct:ass_style	access:public
ass_style::FontSize	.\libass\ass_types.h	/^    double FontSize;$/;"	m	struct:ass_style	access:public
ass_style::Italic	.\libass\ass_types.h	/^    int Italic;$/;"	m	struct:ass_style	access:public
ass_style::Justify	.\libass\ass_types.h	/^    int Justify;$/;"	m	struct:ass_style	access:public
ass_style::MarginL	.\libass\ass_types.h	/^    int MarginL;$/;"	m	struct:ass_style	access:public
ass_style::MarginR	.\libass\ass_types.h	/^    int MarginR;$/;"	m	struct:ass_style	access:public
ass_style::MarginV	.\libass\ass_types.h	/^    int MarginV;$/;"	m	struct:ass_style	access:public
ass_style::Name	.\libass\ass_types.h	/^    char *Name;$/;"	m	struct:ass_style	access:public
ass_style::Outline	.\libass\ass_types.h	/^    double Outline;$/;"	m	struct:ass_style	access:public
ass_style::OutlineColour	.\libass\ass_types.h	/^    uint32_t OutlineColour;$/;"	m	struct:ass_style	access:public
ass_style::PrimaryColour	.\libass\ass_types.h	/^    uint32_t PrimaryColour;$/;"	m	struct:ass_style	access:public
ass_style::ScaleX	.\libass\ass_types.h	/^    double ScaleX;$/;"	m	struct:ass_style	access:public
ass_style::ScaleY	.\libass\ass_types.h	/^    double ScaleY;$/;"	m	struct:ass_style	access:public
ass_style::SecondaryColour	.\libass\ass_types.h	/^    uint32_t SecondaryColour;$/;"	m	struct:ass_style	access:public
ass_style::Shadow	.\libass\ass_types.h	/^    double Shadow;$/;"	m	struct:ass_style	access:public
ass_style::Spacing	.\libass\ass_types.h	/^    double Spacing;$/;"	m	struct:ass_style	access:public
ass_style::StrikeOut	.\libass\ass_types.h	/^    int StrikeOut;$/;"	m	struct:ass_style	access:public
ass_style::Underline	.\libass\ass_types.h	/^    int Underline;$/;"	m	struct:ass_style	access:public
ass_style::treat_fontname_as_pattern	.\libass\ass_types.h	/^    int treat_fontname_as_pattern;$/;"	m	struct:ass_style	access:public
ass_sub_bitmaps_c	.\libass\ass_bitmap.c	/^void ass_sub_bitmaps_c(uint8_t *dst, intptr_t dst_stride,$/;"	f	signature:(uint8_t *dst, intptr_t dst_stride, uint8_t *src, intptr_t src_stride, intptr_t height, intptr_t width)
ass_synth_blur	.\libass\ass_bitmap.c	/^void ass_synth_blur(const BitmapEngine *engine, int opaque_box, int be,$/;"	f	signature:(const BitmapEngine *engine, int opaque_box, int be, double blur_radius, Bitmap *bm_g, Bitmap *bm_o)
ass_synth_blur	.\libass\ass_bitmap.h	/^void ass_synth_blur(const BitmapEngine *engine, int opaque_box, int be,$/;"	p	signature:(const BitmapEngine *engine, int opaque_box, int be, double blur_radius, Bitmap *bm_g, Bitmap *bm_o)
ass_track	.\libass\ass_types.h	/^typedef struct ass_track {$/;"	s
ass_track::Kerning	.\libass\ass_types.h	/^    int Kerning;$/;"	m	struct:ass_track	access:public
ass_track::Language	.\libass\ass_types.h	/^    char *Language;$/;"	m	struct:ass_track	access:public
ass_track::PlayResX	.\libass\ass_types.h	/^    int PlayResX;$/;"	m	struct:ass_track	access:public
ass_track::PlayResY	.\libass\ass_types.h	/^    int PlayResY;$/;"	m	struct:ass_track	access:public
ass_track::ScaledBorderAndShadow	.\libass\ass_types.h	/^    int ScaledBorderAndShadow;$/;"	m	struct:ass_track	access:public
ass_track::TRACK_TYPE_ASS	.\libass\ass_types.h	/^        TRACK_TYPE_ASS,$/;"	e	enum:ass_track::__anon54
ass_track::TRACK_TYPE_SSA	.\libass\ass_types.h	/^        TRACK_TYPE_SSA$/;"	e	enum:ass_track::__anon54
ass_track::TRACK_TYPE_UNKNOWN	.\libass\ass_types.h	/^        TRACK_TYPE_UNKNOWN = 0,$/;"	e	enum:ass_track::__anon54
ass_track::Timer	.\libass\ass_types.h	/^    double Timer;$/;"	m	struct:ass_track	access:public
ass_track::WrapStyle	.\libass\ass_types.h	/^    int WrapStyle;$/;"	m	struct:ass_track	access:public
ass_track::YCbCrMatrix	.\libass\ass_types.h	/^    ASS_YCbCrMatrix YCbCrMatrix;$/;"	m	struct:ass_track	access:public
ass_track::default_style	.\libass\ass_types.h	/^    int default_style;      \/\/ index of default style$/;"	m	struct:ass_track	access:public
ass_track::event_format	.\libass\ass_types.h	/^    char *event_format;     \/\/ event format line$/;"	m	struct:ass_track	access:public
ass_track::events	.\libass\ass_types.h	/^    ASS_Event *events;    \/\/ the same as styles$/;"	m	struct:ass_track	access:public
ass_track::library	.\libass\ass_types.h	/^    ASS_Library *library;$/;"	m	struct:ass_track	access:public
ass_track::max_events	.\libass\ass_types.h	/^    int max_events;$/;"	m	struct:ass_track	access:public
ass_track::max_styles	.\libass\ass_types.h	/^    int max_styles;         \/\/ amount allocated$/;"	m	struct:ass_track	access:public
ass_track::n_events	.\libass\ass_types.h	/^    int n_events;$/;"	m	struct:ass_track	access:public
ass_track::n_styles	.\libass\ass_types.h	/^    int n_styles;           \/\/ amount used$/;"	m	struct:ass_track	access:public
ass_track::name	.\libass\ass_types.h	/^    char *name;             \/\/ file name in case of external subs, 0 for streams$/;"	m	struct:ass_track	access:public
ass_track::parser_priv	.\libass\ass_types.h	/^    ASS_ParserPriv *parser_priv;$/;"	m	struct:ass_track	access:public
ass_track::style_format	.\libass\ass_types.h	/^    char *style_format;     \/\/ style format line (everything after "Format: ")$/;"	m	struct:ass_track	access:public
ass_track::styles	.\libass\ass_types.h	/^    ASS_Style *styles;    \/\/ array of styles, max_styles length, n_styles used$/;"	m	struct:ass_track	access:public
ass_track::track_type	.\libass\ass_types.h	/^    } track_type;$/;"	m	struct:ass_track	typeref:enum:ass_track::__anon54	access:public
ass_try_realloc_array	.\libass\ass_utils.c	/^void *ass_try_realloc_array(void *ptr, size_t nmemb, size_t size)$/;"	f	signature:(void *ptr, size_t nmemb, size_t size)
ass_try_realloc_array	.\libass\ass_utils.h	/^void *ass_try_realloc_array(void *ptr, size_t nmemb, size_t size);$/;"	p	signature:(void *ptr, size_t nmemb, size_t size)
ass_utf16be_to_utf8	.\libass\ass_utils.c	/^void ass_utf16be_to_utf8(char *dst, size_t dst_size, uint8_t *src, size_t src_size)$/;"	f	signature:(char *dst, size_t dst_size, uint8_t *src, size_t src_size)
ass_utf16be_to_utf8	.\libass\ass_utils.h	/^void ass_utf16be_to_utf8(char *dst, size_t dst_size, uint8_t *src, size_t src_size);$/;"	p	signature:(char *dst, size_t dst_size, uint8_t *src, size_t src_size)
ass_utf8_get_char	.\libass\ass_utils.c	/^unsigned ass_utf8_get_char(char **str)$/;"	f	signature:(char **str)
ass_utf8_get_char	.\libass\ass_utils.h	/^unsigned ass_utf8_get_char(char **str);$/;"	p	signature:(char **str)
ass_utf8_put_char	.\libass\ass_utils.c	/^unsigned ass_utf8_put_char(char *dest, uint32_t ch)$/;"	f	signature:(char *dest, uint32_t ch)
ass_utf8_put_char	.\libass\ass_utils.h	/^unsigned ass_utf8_put_char(char *dest, uint32_t ch);$/;"	p	signature:(char *dest, uint32_t ch)
b	.\libass\ass_rasterizer.h	/^    int32_t a, b, scale, flags;$/;"	m	struct:segment	access:public
b	.\libass\ass_render.h	/^    int a, b;                   \/\/ top and height$/;"	m	struct:__anon52	access:public
base_direction	.\libass\ass_shaper.c	/^    FriBidiParType base_direction;$/;"	m	struct:ass_shaper	file:	access:public
bbox	.\libass\ass_rasterizer.h	/^    ASS_Rect bbox;$/;"	m	struct:__anon39	access:public
bbox	.\libass\ass_render.h	/^    ASS_Rect bbox;$/;"	m	struct:glyph_info	access:public
bbox_scaled	.\libass\ass_cache.h	/^    ASS_Rect bbox_scaled;       \/\/ bbox after scaling, but before rotation$/;"	m	struct:__anon12	access:public
be	.\libass\ass_render.h	/^    char be;                    \/\/ blur edges$/;"	m	struct:__anon47	access:public
be	.\libass\ass_render.h	/^    int be;                     \/\/ blur edges$/;"	m	struct:glyph_info	access:public
be_blur	.\libass\ass_bitmap.h	/^    BeBlurFunc be_blur;$/;"	m	struct:__anon7	access:public
be_blur	.\libass\ass_func_template.h	/^void DECORATE(be_blur)(uint8_t *buf, intptr_t w, intptr_t h,$/;"	p	signature:(uint8_t *buf, intptr_t w, intptr_t h, intptr_t stride, uint16_t *tmp)
be_blur_post	.\libass\ass_bitmap.c	/^void be_blur_post(uint8_t *buf, intptr_t w, intptr_t h, intptr_t stride)$/;"	f	signature:(uint8_t *buf, intptr_t w, intptr_t h, intptr_t stride)
be_blur_post	.\libass\ass_bitmap.h	/^void be_blur_post(uint8_t *buf, intptr_t w,$/;"	p	signature:(uint8_t *buf, intptr_t w, intptr_t h, intptr_t stride)
be_blur_pre	.\libass\ass_bitmap.c	/^void be_blur_pre(uint8_t *buf, intptr_t w, intptr_t h, intptr_t stride)$/;"	f	signature:(uint8_t *buf, intptr_t w, intptr_t h, intptr_t stride)
be_blur_pre	.\libass\ass_bitmap.h	/^void be_blur_pre(uint8_t *buf, intptr_t w,$/;"	p	signature:(uint8_t *buf, intptr_t w, intptr_t h, intptr_t stride)
be_padding	.\libass\ass_bitmap.c	/^int be_padding(int be)$/;"	f	signature:(int be)
be_padding	.\libass\ass_bitmap.h	/^int be_padding(int be);$/;"	p	signature:(int be)
bidiLevel	.\libass\dwrite_c.h	/^  UINT32                    bidiLevel;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
bitmap	.\libass\ass.h	/^    unsigned char *bitmap;      \/\/ 1bpp stride*h alpha buffer$/;"	m	struct:ass_image	access:public
bitmap_cache	.\libass\ass_render.h	/^    Cache *bitmap_cache;$/;"	m	struct:__anon50	access:public
bitmap_cache_desc	.\libass\ass_cache.c	/^const CacheDesc bitmap_cache_desc = {$/;"	v
bitmap_compare	.\libass\ass_cache.c	/^static unsigned bitmap_compare(void *a, void *b, size_t key_size)$/;"	f	file:	signature:(void *a, void *b, size_t key_size)
bitmap_count	.\libass\ass_cache.h	/^    size_t bitmap_count;$/;"	m	struct:__anon20	access:public
bitmap_count	.\libass\ass_render.h	/^    size_t bitmap_count, max_bitmap_count;$/;"	m	struct:__anon44	access:public
bitmap_destruct	.\libass\ass_cache.c	/^static void bitmap_destruct(void *key, void *value)$/;"	f	file:	signature:(void *key, void *value)
bitmap_engine	.\libass\ass_func_template.h	/^const BitmapEngine DECORATE(bitmap_engine) = {$/;"	v
bitmap_hash	.\libass\ass_cache.c	/^static unsigned bitmap_hash(void *key, size_t key_size)$/;"	f	file:	signature:(void *key, size_t key_size)
bitmap_hash_key	.\libass\ass_cache.h	/^typedef struct bitmap_hash_key {$/;"	s
bitmap_hash_key::BITMAP_CLIP	.\libass\ass_cache.h	/^        BITMAP_CLIP,$/;"	e	enum:bitmap_hash_key::__anon16
bitmap_hash_key::BITMAP_OUTLINE	.\libass\ass_cache.h	/^        BITMAP_OUTLINE,$/;"	e	enum:bitmap_hash_key::__anon16
bitmap_hash_key::__anon17::clip	.\libass\ass_cache.h	/^        ClipMaskHashKey clip;$/;"	m	union:bitmap_hash_key::__anon17	access:public
bitmap_hash_key::__anon17::outline	.\libass\ass_cache.h	/^        OutlineBitmapHashKey outline;$/;"	m	union:bitmap_hash_key::__anon17	access:public
bitmap_hash_key::type	.\libass\ass_cache.h	/^    } type;$/;"	m	struct:bitmap_hash_key	typeref:enum:bitmap_hash_key::__anon16	access:public
bitmap_hash_key::u	.\libass\ass_cache.h	/^    } u;$/;"	m	struct:bitmap_hash_key	typeref:union:bitmap_hash_key::__anon17	access:public
bitmap_key_move	.\libass\ass_cache.c	/^static bool bitmap_key_move(void *dst, void *src, size_t key_size)$/;"	f	file:	signature:(void *dst, void *src, size_t key_size)
bitmap_max_size	.\libass\ass_render.h	/^    size_t bitmap_max_size;$/;"	m	struct:__anon50	access:public
bitmap_size	.\libass\ass_render.c	/^static inline size_t bitmap_size(Bitmap *bm)$/;"	f	file:	signature:(Bitmap *bm)
bitmaps	.\libass\ass_cache.h	/^    BitmapRef *bitmaps;$/;"	m	struct:__anon20	access:public
bitmaps	.\libass\ass_render.h	/^    BitmapRef *bitmaps;$/;"	m	struct:__anon44	access:public
blend	.\test\test.c	/^static void blend(image_t * frame, ASS_Image *img)$/;"	f	file:	signature:(image_t * frame, ASS_Image *img)
blend_single	.\test\test.c	/^static void blend_single(image_t * frame, ASS_Image *img)$/;"	f	file:	signature:(image_t * frame, ASS_Image *img)
blend_vector_clip	.\libass\ass_render.c	/^static void blend_vector_clip(ASS_Renderer *render_priv,$/;"	f	file:	signature:(ASS_Renderer *render_priv, ASS_Image *head)
blur	.\libass\ass_render.h	/^    double blur;                \/\/ gaussian blur$/;"	m	struct:__anon47	access:public
blur	.\libass\ass_render.h	/^    double blur;                \/\/ gaussian blur$/;"	m	struct:glyph_info	access:public
blur1234_horz	.\libass\ass_func_template.h	/^void DECORATE(blur1234_horz)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
blur1234_vert	.\libass\ass_func_template.h	/^void DECORATE(blur1234_vert)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
blur1235_horz	.\libass\ass_func_template.h	/^void DECORATE(blur1235_horz)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
blur1235_vert	.\libass\ass_func_template.h	/^void DECORATE(blur1235_vert)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
blur1246_horz	.\libass\ass_func_template.h	/^void DECORATE(blur1246_horz)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
blur1246_vert	.\libass\ass_func_template.h	/^void DECORATE(blur1246_vert)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height, const int16_t *param)
blur_func	.\libass\ass_blur.c	/^static inline int16_t blur_func(int16_t p4, int16_t p3, int16_t p2, int16_t p1, int16_t z0,$/;"	f	file:	signature:(int16_t p4, int16_t p3, int16_t p2, int16_t p1, int16_t z0, int16_t n1, int16_t n2, int16_t n3, int16_t n4, const int16_t c[])
blur_scale	.\libass\ass_render.h	/^    double blur_scale;$/;"	m	struct:ass_renderer	access:public
bm	.\libass\ass_cache.h	/^    Bitmap *bm;               \/\/ the actual bitmaps$/;"	m	struct:__anon10	access:public
bm	.\libass\ass_cache.h	/^    Bitmap *bm;$/;"	m	struct:__anon11	access:public
bm	.\libass\ass_render.h	/^    Bitmap *bm, *bm_o, *bm_s;   \/\/ glyphs, outline, shadow bitmaps$/;"	m	struct:__anon44	access:public
bm_o	.\libass\ass_cache.h	/^    Bitmap *bm_o;$/;"	m	struct:__anon10	access:public
bm_o	.\libass\ass_cache.h	/^    Bitmap *bm_o;$/;"	m	struct:__anon11	access:public
bm_o	.\libass\ass_render.h	/^    Bitmap *bm, *bm_o, *bm_s;   \/\/ glyphs, outline, shadow bitmaps$/;"	m	struct:__anon44	access:public
bm_s	.\libass\ass_cache.h	/^    Bitmap *bm_s;$/;"	m	struct:__anon11	access:public
bm_s	.\libass\ass_render.h	/^    Bitmap *bm, *bm_o, *bm_s;   \/\/ glyphs, outline, shadow bitmaps$/;"	m	struct:__anon44	access:public
bold	.\libass\ass_font.h	/^    unsigned bold;$/;"	m	struct:ass_font_desc	access:public
bold	.\libass\ass_render.h	/^    unsigned bold;$/;"	m	struct:__anon47	access:public
bold	.\libass\ass_render.h	/^    unsigned bold;$/;"	m	struct:glyph_info	access:public
border	.\libass\ass_cache.h	/^    ASS_Outline border[2];$/;"	m	struct:__anon12	access:public
border	.\libass\ass_render.h	/^    ASS_Outline *border[2];$/;"	m	struct:glyph_info	access:public
border_scale	.\libass\ass_render.h	/^    double border_scale;$/;"	m	struct:ass_renderer	access:public
border_style	.\libass\ass_render.h	/^    int border_style;$/;"	m	struct:__anon47	access:public
border_style	.\libass\ass_render.h	/^    int border_style;$/;"	m	struct:glyph_info	access:public
border_x	.\libass\ass_render.h	/^    double border_x, border_y;$/;"	m	struct:glyph_info	access:public
border_x	.\libass\ass_render.h	/^    double border_x;            \/\/ outline width$/;"	m	struct:__anon47	access:public
border_y	.\libass\ass_render.h	/^    double border_x, border_y;$/;"	m	struct:glyph_info	access:public
border_y	.\libass\ass_render.h	/^    double border_y;$/;"	m	struct:__anon47	access:public
bottom_margin	.\libass\ass_render.h	/^    int bottom_margin;          \/\/ height of bottom margin. (frame_height - top_margin - bottom_margin) is original video height.$/;"	m	struct:__anon41	access:public
buckets	.\libass\ass_cache.c	/^    unsigned buckets;$/;"	m	struct:cache	file:	access:public
buffer	.\libass\ass_bitmap.h	/^    unsigned char *buffer;      \/\/ h * stride buffer$/;"	m	struct:__anon8	access:public
buffer	.\profile\profile.c	/^    unsigned char *buffer;      \/\/ RGB24$/;"	m	struct:image_s	file:	access:public
buffer	.\test\test.c	/^    unsigned char *buffer;      \/\/ RGB24$/;"	m	struct:image_s	file:	access:public
buggy_font_workaround	.\libass\ass_font.c	/^static void buggy_font_workaround(FT_Face face)$/;"	f	file:	signature:(FT_Face face)
c	.\libass\ass_rasterizer.h	/^    int64_t c;$/;"	m	struct:segment	access:public
c	.\libass\ass_render.h	/^    uint32_t c[4];              \/\/ colors$/;"	m	struct:__anon44	access:public
c	.\libass\ass_render.h	/^    uint32_t c[4];              \/\/ colors$/;"	m	struct:glyph_info	access:public
c	.\libass\ass_render.h	/^    uint32_t c[4];              \/\/ colors(Primary, Secondary, so on) in RGBA$/;"	m	struct:__anon47	access:public
cache	.\libass\ass_cache.c	/^    Cache *cache;$/;"	m	struct:cache_item	file:	access:public
cache	.\libass\ass_cache.c	/^struct cache {$/;"	s	file:
cache	.\libass\ass_render.h	/^    CacheStore cache;$/;"	m	struct:ass_renderer	access:public
cache::buckets	.\libass\ass_cache.c	/^    unsigned buckets;$/;"	m	struct:cache	file:	access:public
cache::cache_size	.\libass\ass_cache.c	/^    size_t cache_size;$/;"	m	struct:cache	file:	access:public
cache::desc	.\libass\ass_cache.c	/^    const CacheDesc *desc;$/;"	m	struct:cache	file:	access:public
cache::hits	.\libass\ass_cache.c	/^    unsigned hits;$/;"	m	struct:cache	file:	access:public
cache::items	.\libass\ass_cache.c	/^    unsigned items;$/;"	m	struct:cache	file:	access:public
cache::map	.\libass\ass_cache.c	/^    CacheItem **map;$/;"	m	struct:cache	file:	access:public
cache::misses	.\libass\ass_cache.c	/^    unsigned misses;$/;"	m	struct:cache	file:	access:public
cache::queue_first	.\libass\ass_cache.c	/^    CacheItem *queue_first, **queue_last;$/;"	m	struct:cache	file:	access:public
cache::queue_last	.\libass\ass_cache.c	/^    CacheItem *queue_first, **queue_last;$/;"	m	struct:cache	file:	access:public
cache_fallbacks	.\libass\ass_fontconfig.c	/^static void cache_fallbacks(ProviderPrivate *fc)$/;"	f	file:	signature:(ProviderPrivate *fc)
cache_item	.\libass\ass_cache.c	/^typedef struct cache_item {$/;"	s	file:
cache_item::cache	.\libass\ass_cache.c	/^    Cache *cache;$/;"	m	struct:cache_item	file:	access:public
cache_item::desc	.\libass\ass_cache.c	/^    const CacheDesc *desc;$/;"	m	struct:cache_item	file:	access:public
cache_item::next	.\libass\ass_cache.c	/^    struct cache_item *next, **prev;$/;"	m	struct:cache_item	typeref:struct:cache_item::cache_item	file:	access:public
cache_item::prev	.\libass\ass_cache.c	/^    struct cache_item *next, **prev;$/;"	m	struct:cache_item	typeref:struct:cache_item::	file:	access:public
cache_item::queue_next	.\libass\ass_cache.c	/^    struct cache_item *queue_next, **queue_prev;$/;"	m	struct:cache_item	typeref:struct:cache_item::cache_item	file:	access:public
cache_item::queue_prev	.\libass\ass_cache.c	/^    struct cache_item *queue_next, **queue_prev;$/;"	m	struct:cache_item	typeref:struct:cache_item::	file:	access:public
cache_item::ref_count	.\libass\ass_cache.c	/^    size_t size, ref_count;$/;"	m	struct:cache_item	file:	access:public
cache_item::size	.\libass\ass_cache.c	/^    size_t size, ref_count;$/;"	m	struct:cache_item	file:	access:public
cache_size	.\libass\ass_cache.c	/^    size_t cache_size;$/;"	m	struct:cache	file:	access:public
cached_extents	.\libass\ass_shaper.c	/^cached_extents(hb_font_t *font, void *font_data, hb_codepoint_t glyph,$/;"	f	file:	signature:(hb_font_t *font, void *font_data, hb_codepoint_t glyph, hb_glyph_extents_t *extents, void *user_data)
cached_h_advance	.\libass\ass_shaper.c	/^cached_h_advance(hb_font_t *font, void *font_data, hb_codepoint_t glyph,$/;"	f	file:	signature:(hb_font_t *font, void *font_data, hb_codepoint_t glyph, void *user_data)
cached_h_origin	.\libass\ass_shaper.c	/^cached_h_origin(hb_font_t *font, void *font_data, hb_codepoint_t glyph,$/;"	f	file:	signature:(hb_font_t *font, void *font_data, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y, void *user_data)
cached_v_advance	.\libass\ass_shaper.c	/^cached_v_advance(hb_font_t *font, void *font_data, hb_codepoint_t glyph,$/;"	f	file:	signature:(hb_font_t *font, void *font_data, hb_codepoint_t glyph, void *user_data)
cached_v_origin	.\libass\ass_shaper.c	/^cached_v_origin(hb_font_t *font, void *font_data, hb_codepoint_t glyph,$/;"	f	file:	signature:(hb_font_t *font, void *font_data, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y, void *user_data)
calc_coeff	.\libass\ass_blur.c	/^static void calc_coeff(double mu[4], const int index[4], int prefilter, double r2, double mul)$/;"	f	file:	signature:(double mu[4], const int index[4], int prefilter, double r2, double mul)
calc_gauss	.\libass\ass_blur.c	/^static void calc_gauss(double *res, int n, double r2)$/;"	f	file:	signature:(double *res, int n, double r2)
calc_matrix	.\libass\ass_blur.c	/^static void calc_matrix(double mat[4][4], const double *mat_freq, const int *index)$/;"	f	file:	signature:(double mat[4][4], const double *mat_freq, const int *index)
calc_transform_matrix	.\libass\ass_render.c	/^calc_transform_matrix(ASS_Vector shift,$/;"	f	file:	signature:(ASS_Vector shift, double frx, double fry, double frz, double fax, double fay, double scale, int yshift, double m[3][3])
calculate_rotation_params	.\libass\ass_render.c	/^static void calculate_rotation_params(ASS_Renderer *render_priv, ASS_DRect *bbox,$/;"	f	file:	signature:(ASS_Renderer *render_priv, ASS_DRect *bbox, double device_x, double device_y)
capHeight	.\libass\dwrite_c.h	/^  UINT16 capHeight;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
capacity	.\libass\ass_rasterizer.h	/^    size_t size[2], capacity[2];$/;"	m	struct:__anon39	access:public
cbox	.\libass\ass_drawing.h	/^    ASS_Rect cbox;   \/\/ bounding box, or let's say... VSFilter's idea of it$/;"	m	struct:__anon25	access:public
cfstr2buf	.\libass\ass_coretext.c	/^static char *cfstr2buf(CFStringRef string)$/;"	f	file:	signature:(CFStringRef string)
cglobal	.\libass\x86\be_blur.asm	/^cglobal be_blur, 5,15,9$/;"	l
cglobal	.\libass\x86\blend_bitmaps.asm	/^cglobal add_bitmaps_x86, 6,7$/;"	l
cglobal	.\libass\x86\blend_bitmaps.asm	/^cglobal mul_bitmaps, 8,12$/;"	l
cglobal	.\libass\x86\blend_bitmaps.asm	/^cglobal mul_bitmaps_x86, 8,12$/;"	l
cglobal	.\libass\x86\blend_bitmaps.asm	/^cglobal sub_bitmaps_x86, 6,10$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal blur%1_horz, 5,7,8$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal blur%1_horz, 5,8,10$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal blur%1_vert, 5,7,8$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal blur%1_vert, 5,7,9$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal expand_horz, 4,7,5$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal expand_horz, 4,9,5$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal expand_vert, 4,7,5$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur1_horz, 4,7,4$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur1_horz, 4,8,4$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur1_vert, 4,7,4$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur2_horz, 4,7,7$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur2_horz, 4,8,7$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur2_vert, 4,7,8$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur2_vert, 4,7,9$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur3_horz, 4,7,8$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur3_horz, 4,8,9$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal pre_blur3_vert, 4,7,8$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal shrink_horz, 4,7,8$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal shrink_horz, 4,9,9$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal shrink_vert, 4,7,8$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal shrink_vert, 4,7,9$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal stripe_pack, 5,7,5$/;"	l
cglobal	.\libass\x86\blur.asm	/^cglobal stripe_unpack, 5,6,3$/;"	l
cglobal	.\libass\x86\cpuid.asm	/^cglobal get_cpuid, 4, 5, 0$/;"	l
cglobal	.\libass\x86\cpuid.asm	/^cglobal get_xgetbv, 3, 7, 0$/;"	l
cglobal	.\libass\x86\rasterizer.asm	/^cglobal fill_generic_tile%2, 0,7,8$/;"	l
cglobal	.\libass\x86\rasterizer.asm	/^cglobal fill_generic_tile%2, 5,14,11$/;"	l
cglobal	.\libass\x86\rasterizer.asm	/^cglobal fill_generic_tile%2, 5,14,12$/;"	l
cglobal	.\libass\x86\rasterizer.asm	/^cglobal fill_halfplane_tile%2, 6,7,8$/;"	l
cglobal	.\libass\x86\rasterizer.asm	/^cglobal fill_halfplane_tile%2, 6,7,9$/;"	l
cglobal	.\libass\x86\rasterizer.asm	/^cglobal fill_solid_tile%2, 3,4,1$/;"	l
change_alpha	.\libass\ass_parse.c	/^inline void change_alpha(uint32_t *var, int32_t new, double pwr)$/;"	f	signature:(uint32_t *var, int32_t new, double pwr)
change_alpha	.\libass\ass_parse.h	/^extern void change_alpha(uint32_t *var, int32_t new, double pwr);$/;"	p	signature:(uint32_t *var, int32_t new, double pwr)
change_color	.\libass\ass_parse.c	/^static void change_color(uint32_t *var, uint32_t new, double pwr)$/;"	f	file:	signature:(uint32_t *var, uint32_t new, double pwr)
change_font_size	.\libass\ass_parse.c	/^static void change_font_size(ASS_Renderer *render_priv, double sz)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double sz)
charmap_magic	.\libass\ass_font.c	/^void charmap_magic(ASS_Library *library, FT_Face face)$/;"	f	signature:(ASS_Library *library, FT_Face face)
charmap_magic	.\libass\ass_font.h	/^void charmap_magic(ASS_Library *library, FT_Face face);$/;"	p	signature:(ASS_Library *library, FT_Face face)
check_allocations	.\libass\ass_shaper.c	/^static bool check_allocations(ASS_Shaper *shaper, size_t new_size)$/;"	f	file:	signature:(ASS_Shaper *shaper, size_t new_size)
check_cache_limits	.\libass\ass_render.c	/^static void check_cache_limits(ASS_Renderer *priv, CacheStore *cache)$/;"	f	file:	signature:(ASS_Renderer *priv, CacheStore *cache)
check_capacity	.\libass\ass_rasterizer.c	/^static inline bool check_capacity(RasterizerData *rst, int index, size_t delta)$/;"	f	file:	signature:(RasterizerData *rst, int index, size_t delta)
check_duplicate_event	.\libass\ass.c	/^static int check_duplicate_event(ASS_Track *track, int ReadOrder)$/;"	f	file:	signature:(ASS_Track *track, int ReadOrder)
check_glyph	.\libass\ass_coretext.c	/^static bool check_glyph(void *priv, uint32_t code)$/;"	f	file:	signature:(void *priv, uint32_t code)
check_glyph	.\libass\ass_directwrite.c	/^static bool check_glyph(void *data, uint32_t code)$/;"	f	file:	signature:(void *data, uint32_t code)
check_glyph	.\libass\ass_fontconfig.c	/^static bool check_glyph(void *priv, uint32_t code)$/;"	f	file:	signature:(void *priv, uint32_t code)
check_glyph	.\libass\ass_fontselect.c	/^static bool check_glyph(ASS_FontInfo *fi, uint32_t code)$/;"	f	file:	signature:(ASS_FontInfo *fi, uint32_t code)
check_glyph	.\libass\ass_fontselect.h	/^    CheckGlyphFunc      check_glyph;            \/* mandatory *\/$/;"	m	struct:font_provider_funcs	access:public
check_glyph_ft	.\libass\ass_fontselect.c	/^static bool check_glyph_ft(void *data, uint32_t codepoint)$/;"	f	file:	signature:(void *data, uint32_t codepoint)
check_postscript	.\libass\ass_coretext.c	/^static bool check_postscript(void *priv)$/;"	f	file:	signature:(void *priv)
check_postscript	.\libass\ass_directwrite.c	/^static bool check_postscript(void *data)$/;"	f	file:	signature:(void *data)
check_postscript	.\libass\ass_fontconfig.c	/^static bool check_postscript(void *priv)$/;"	f	file:	signature:(void *priv)
check_postscript	.\libass\ass_fontselect.c	/^static bool check_postscript(ASS_FontInfo *fi)$/;"	f	file:	signature:(ASS_FontInfo *fi)
check_postscript	.\libass\ass_fontselect.h	/^    CheckPostscriptFunc check_postscript;       \/* mandatory *\/$/;"	m	struct:font_provider_funcs	access:public
check_postscript_ft	.\libass\ass_fontselect.c	/^static bool check_postscript_ft(void *data)$/;"	f	file:	signature:(void *data)
check_readorder	.\libass\ass.c	/^    int check_readorder;$/;"	m	struct:parser_priv	file:	access:public
clip	.\libass\ass_cache.h	/^        ClipMaskHashKey clip;$/;"	m	union:bitmap_hash_key::__anon17	access:public
clip_drawing	.\libass\ass_render.h	/^    ASS_Drawing *clip_drawing;  \/\/ clip vector$/;"	m	struct:__anon47	access:public
clip_drawing_mode	.\libass\ass_render.h	/^    int clip_drawing_mode;      \/\/ 0 = regular clip, 1 = inverse clip$/;"	m	struct:__anon47	access:public
clip_mode	.\libass\ass_render.h	/^    char clip_mode;             \/\/ 1 = iclip$/;"	m	struct:__anon47	access:public
clip_x0	.\libass\ass_render.h	/^    int clip_x0, clip_y0, clip_x1, clip_y1;$/;"	m	struct:__anon47	access:public
clip_x1	.\libass\ass_render.h	/^    int clip_x0, clip_y0, clip_x1, clip_y1;$/;"	m	struct:__anon47	access:public
clip_y0	.\libass\ass_render.h	/^    int clip_x0, clip_y0, clip_x1, clip_y1;$/;"	m	struct:__anon47	access:public
clip_y1	.\libass\ass_render.h	/^    int clip_x0, clip_y0, clip_x1, clip_y1;$/;"	m	struct:__anon47	access:public
close_contour	.\libass\ass_outline.c	/^static bool close_contour(StrokerState *str, ASS_Vector last_point, int dir)$/;"	f	file:	signature:(StrokerState *str, ASS_Vector last_point, int dir)
close_stream_font	.\libass\ass_font.c	/^close_stream_font(FT_Stream stream)$/;"	f	file:	signature:(FT_Stream stream)
cluster_advance	.\libass\ass_render.h	/^    ASS_Vector cluster_advance;$/;"	m	struct:glyph_info	access:public
cmap	.\libass\ass_shaper.c	/^    FriBidiStrIndex *cmap;$/;"	m	struct:ass_shaper	file:	access:public
cmp_event_layer	.\libass\ass_render.c	/^static int cmp_event_layer(const void *p1, const void *p2)$/;"	f	file:	signature:(const void *p1, const void *p2)
cmp_segment	.\libass\ass_render.c	/^static int cmp_segment(const void *p1, const void *p2)$/;"	f	file:	signature:(const void *p1, const void *p2)
coeff	.\libass\ass_blur.c	/^    int16_t coeff[4];$/;"	m	struct:__anon9	file:	access:public
coeff_blur121	.\libass\ass_blur.c	/^static void coeff_blur121(double *coeff, int n)$/;"	f	file:	signature:(double *coeff, int n)
coeff_filter	.\libass\ass_blur.c	/^static void coeff_filter(double *coeff, int n, const double kernel[4])$/;"	f	file:	signature:(double *coeff, int n, const double kernel[4])
color	.\libass\ass.h	/^    uint32_t color;             \/\/ Bitmap color and alpha, RGBA$/;"	m	struct:ass_image	access:public
combined_bitmaps	.\libass\ass_render.h	/^    CombinedBitmapInfo *combined_bitmaps;$/;"	m	struct:__anon46	access:public
compare_func	.\libass\ass_cache.h	/^    HashCompare compare_func;$/;"	m	struct:__anon21	access:public
complex_tag	.\libass\ass_parse.c	295;"	d	file:
composite_cache	.\libass\ass_render.h	/^    Cache *composite_cache;$/;"	m	struct:__anon50	access:public
composite_cache_desc	.\libass\ass_cache.c	/^const CacheDesc composite_cache_desc = {$/;"	v
composite_compare	.\libass\ass_cache.c	/^static unsigned composite_compare(void *a, void *b, size_t key_size)$/;"	f	file:	signature:(void *a, void *b, size_t key_size)
composite_destruct	.\libass\ass_cache.c	/^static void composite_destruct(void *key, void *value)$/;"	f	file:	signature:(void *key, void *value)
composite_hash	.\libass\ass_cache.c	/^static unsigned composite_hash(void *key, size_t key_size)$/;"	f	file:	signature:(void *key, size_t key_size)
composite_key_move	.\libass\ass_cache.c	/^static bool composite_key_move(void *dst, void *src, size_t key_size)$/;"	f	file:	signature:(void *dst, void *src, size_t key_size)
composite_max_size	.\libass\ass_render.h	/^    size_t composite_max_size;$/;"	m	struct:__anon50	access:public
compute_string_bbox	.\libass\ass_render.c	/^static void compute_string_bbox(TextInfo *text, ASS_DRect *bbox)$/;"	f	file:	signature:(TextInfo *text, ASS_DRect *bbox)
config	.\libass\ass_fontconfig.c	/^    FcConfig *config;$/;"	m	struct:fc_private	file:	access:public
constructor	.\libass\ass_fontselect.c	/^    ASS_FontProvider *(*constructor)(ASS_Library *, ASS_FontSelector *,$/;"	m	struct:font_constructors	file:	access:public
contour_first	.\libass\ass_outline.c	/^    size_t contour_first[2];  \/\/ start position of last contours$/;"	m	struct:__anon28	file:	access:public
contour_start	.\libass\ass_outline.c	/^    bool contour_start;$/;"	m	struct:__anon28	file:	access:public
copy_bitmap	.\libass\ass_bitmap.c	/^Bitmap *copy_bitmap(const BitmapEngine *engine, const Bitmap *src)$/;"	f	signature:(const BitmapEngine *engine, const Bitmap *src)
copy_bitmap	.\libass\ass_bitmap.h	/^Bitmap *copy_bitmap(const BitmapEngine *engine, const Bitmap *src);$/;"	p	signature:(const BitmapEngine *engine, const Bitmap *src)
copy_line	.\libass\ass_blur.c	/^inline static void copy_line(int16_t *buf, const int16_t *ptr, uintptr_t offs, uintptr_t size)$/;"	f	file:	signature:(int16_t *buf, const int16_t *ptr, uintptr_t offs, uintptr_t size)
coretext_callbacks	.\libass\ass_coretext.c	/^static ASS_FontProviderFuncs coretext_callbacks = {$/;"	v	file:
ctypes	.\libass\ass_shaper.c	/^    FriBidiCharType *ctypes;$/;"	m	struct:ass_shaper	file:	access:public
d16_to_d6	.\libass\ass_utils.h	/^static inline int d16_to_d6(int x)$/;"	f	signature:(int x)
d16_to_double	.\libass\ass_utils.h	/^static inline double d16_to_double(int x)$/;"	f	signature:(int x)
d16_to_int	.\libass\ass_utils.h	/^static inline int d16_to_int(int x)$/;"	f	signature:(int x)
d22_to_double	.\libass\ass_utils.h	/^static inline double d22_to_double(int x)$/;"	f	signature:(int x)
d6_to_d16	.\libass\ass_utils.h	/^static inline int d6_to_d16(int x)$/;"	f	signature:(int x)
d6_to_double	.\libass\ass_utils.h	/^static inline double d6_to_double(int x)$/;"	f	signature:(int x)
d6_to_int	.\libass\ass_utils.h	/^static inline int d6_to_int(int x)$/;"	f	signature:(int x)
data	.\libass\ass_library.h	/^    char *data;$/;"	m	struct:__anon26	access:public
decode_chars	.\libass\ass.c	/^static unsigned char *decode_chars(const unsigned char *src,$/;"	f	file:	signature:(const unsigned char *src, unsigned char *dst, int cnt_in)
decode_font	.\libass\ass.c	/^static int decode_font(ASS_Track *track)$/;"	f	file:	signature:(ASS_Track *track)
default_family	.\libass\ass_render.h	/^    char *default_family;$/;"	m	struct:__anon41	access:public
default_font	.\libass\ass_render.h	/^    char *default_font;$/;"	m	struct:__anon41	access:public
default_provider	.\libass\ass_fontselect.c	/^    ASS_FontProvider *default_provider;$/;"	m	struct:font_selector	file:	access:public
default_style	.\libass\ass_types.h	/^    int default_style;      \/\/ index of default style$/;"	m	struct:ass_track	access:public
desc	.\libass\ass_cache.c	/^    const CacheDesc *desc;$/;"	m	struct:cache	file:	access:public
desc	.\libass\ass_cache.c	/^    const CacheDesc *desc;$/;"	m	struct:cache_item	file:	access:public
desc	.\libass\ass_cache.h	/^    int asc, desc;              \/\/ ascender\/descender$/;"	m	struct:__anon12	access:public
desc	.\libass\ass_drawing.h	/^    int desc;            \/\/ descender$/;"	m	struct:__anon25	access:public
desc	.\libass\ass_font.h	/^    ASS_FontDesc desc;$/;"	m	struct:ass_font	access:public
desc	.\libass\ass_render.h	/^    double asc, desc;$/;"	m	struct:__anon45	access:public
desc	.\libass\ass_render.h	/^    int asc, desc;              \/\/ font max ascender and descender$/;"	m	struct:glyph_info	access:public
descent	.\libass\dwrite_c.h	/^  UINT16 descent;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
designUnitsPerEm	.\libass\dwrite_c.h	/^  UINT16 designUnitsPerEm;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
destroy	.\libass\ass_fontconfig.c	/^static void destroy(void *priv)$/;"	f	file:	signature:(void *priv)
destroy_font	.\libass\ass_coretext.c	/^static void destroy_font(void *priv)$/;"	f	file:	signature:(void *priv)
destroy_font	.\libass\ass_directwrite.c	/^static void destroy_font(void *data)$/;"	f	file:	signature:(void *data)
destroy_font	.\libass\ass_fontselect.h	/^    DestroyFontFunc     destroy_font;           \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
destroy_font_ft	.\libass\ass_fontselect.c	/^static void destroy_font_ft(void *data)$/;"	f	file:	signature:(void *data)
destroy_item	.\libass\ass_cache.c	/^static inline void destroy_item(const CacheDesc *desc, CacheItem *item)$/;"	f	file:	signature:(const CacheDesc *desc, CacheItem *item)
destroy_provider	.\libass\ass_directwrite.c	/^static void destroy_provider(void *priv)$/;"	f	file:	signature:(void *priv)
destroy_provider	.\libass\ass_fontselect.h	/^    DestroyProviderFunc destroy_provider;       \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
destruct_func	.\libass\ass_cache.h	/^    CacheItemDestructor destruct_func;$/;"	m	struct:__anon21	access:public
detect_collisions	.\libass\ass_render.h	/^    char detect_collisions;$/;"	m	struct:__anon47	access:public
detect_collisions	.\libass\ass_render.h	/^    int detect_collisions;$/;"	m	struct:__anon42	access:public
directwrite_callbacks	.\libass\ass_directwrite.c	/^static ASS_FontProviderFuncs directwrite_callbacks = {$/;"	v	file:
directwrite_lib	.\libass\ass_directwrite.c	/^    HMODULE directwrite_lib;$/;"	m	struct:__anon23	file:	access:public
dither_line	.\libass\ass_blur.c	/^static int16_t dither_line[2 * STRIPE_WIDTH] = {$/;"	v	file:
double_to_d16	.\libass\ass_utils.h	/^static inline int double_to_d16(double x)$/;"	f	signature:(double x)
double_to_d22	.\libass\ass_utils.h	/^static inline int double_to_d22(double x)$/;"	f	signature:(double x)
double_to_d6	.\libass\ass_utils.h	/^static inline int double_to_d6(double x)$/;"	f	signature:(double x)
draw_arc	.\libass\ass_outline.c	/^static bool draw_arc(StrokerState *str, ASS_Vector pt,$/;"	f	file:	signature:(StrokerState *str, ASS_Vector pt, ASS_DVector normal0, ASS_DVector normal1, double c, int dir)
draw_circle	.\libass\ass_outline.c	/^static bool draw_circle(StrokerState *str, ASS_Vector pt, int dir)$/;"	f	file:	signature:(StrokerState *str, ASS_Vector pt, int dir)
draw_opaque_box	.\libass\ass_render.c	/^static void draw_opaque_box(ASS_Renderer *render_priv, GlyphInfo *info,$/;"	f	file:	signature:(ASS_Renderer *render_priv, GlyphInfo *info, int asc, int desc, ASS_Outline *ol, ASS_Vector advance, int sx, int sy)
drawing	.\libass\ass_cache.h	/^        DrawingHashKey drawing;$/;"	m	union:outline_hash_key::__anon15	access:public
drawing	.\libass\ass_render.h	/^    ASS_Drawing *drawing;$/;"	m	struct:glyph_info	access:public
drawing_add_curve	.\libass\ass_drawing.c	/^static bool drawing_add_curve(ASS_Drawing *drawing, ASS_DrawingToken *token,$/;"	f	file:	signature:(ASS_Drawing *drawing, ASS_DrawingToken *token, bool spline, int started)
drawing_finish	.\libass\ass_drawing.c	/^static void drawing_finish(ASS_Drawing *drawing, bool raw_mode)$/;"	f	file:	signature:(ASS_Drawing *drawing, bool raw_mode)
drawing_free_tokens	.\libass\ass_drawing.c	/^static void drawing_free_tokens(ASS_DrawingToken *token)$/;"	f	file:	signature:(ASS_DrawingToken *token)
drawing_prepare	.\libass\ass_drawing.c	/^static void drawing_prepare(ASS_Drawing *drawing)$/;"	f	file:	signature:(ASS_Drawing *drawing)
drawing_scale	.\libass\ass_render.h	/^    int drawing_scale;          \/\/ currently reading: regular text if 0, drawing otherwise$/;"	m	struct:__anon47	access:public
drawing_tokenize	.\libass\ass_drawing.c	/^static ASS_DrawingToken *drawing_tokenize(char *str)$/;"	f	file:	signature:(char *str)
dst_x	.\libass\ass.h	/^    int dst_x, dst_y;           \/\/ Bitmap placement inside the video frame$/;"	m	struct:ass_image	access:public
dst_y	.\libass\ass.h	/^    int dst_x, dst_y;           \/\/ Bitmap placement inside the video frame$/;"	m	struct:ass_image	access:public
dw_factory	.\libass\ass_directwrite.c	/^    IDWriteFactory *dw_factory;$/;"	m	struct:FallbackLogTextRenderer	file:	access:public
dwords_32	.\libass\x86\blur.asm	/^dwords_32: times 8 dd 32$/;"	l
dwords_lomask	.\libass\x86\blur.asm	/^dwords_lomask: times 8 dd 0xFFFF$/;"	l
dwords_round	.\libass\x86\blur.asm	/^dwords_round: times 8 dd 0x8000$/;"	l
dwords_two	.\libass\x86\blur.asm	/^dwords_two: times 8 dd 2$/;"	l
effect	.\libass\ass_render.h	/^    char effect;                \/\/ the first (leading) glyph of some effect ?$/;"	m	struct:glyph_info	access:public
effect_skip_timing	.\libass\ass_render.h	/^    int effect_skip_timing;     \/\/ delay after the end of last karaoke word$/;"	m	struct:glyph_info	access:public
effect_skip_timing	.\libass\ass_render.h	/^    int effect_skip_timing;$/;"	m	struct:__anon47	access:public
effect_timing	.\libass\ass_render.h	/^    int effect_timing;          \/\/ time duration of current karaoke word$/;"	m	struct:__anon44	access:public
effect_timing	.\libass\ass_render.h	/^    int effect_timing;          \/\/ time duration of current karaoke word$/;"	m	struct:glyph_info	access:public
effect_timing	.\libass\ass_render.h	/^    int effect_timing;$/;"	m	struct:__anon47	access:public
effect_type	.\libass\ass_render.h	/^    Effect effect_type;$/;"	m	struct:__anon44	access:public
effect_type	.\libass\ass_render.h	/^    Effect effect_type;$/;"	m	struct:__anon47	access:public
effect_type	.\libass\ass_render.h	/^    Effect effect_type;$/;"	m	struct:glyph_info	access:public
eimg	.\libass\ass_render.h	/^    EventImages *eimg;          \/\/ temporary buffer for sorting rendered events$/;"	m	struct:ass_renderer	access:public
eimg_size	.\libass\ass_render.h	/^    int eimg_size;              \/\/ allocated buffer size$/;"	m	struct:ass_renderer	access:public
embedded_provider	.\libass\ass_fontselect.c	/^    ASS_FontProvider *embedded_provider;$/;"	m	struct:font_selector	file:	access:public
emblevels	.\libass\ass_shaper.c	/^    FriBidiLevel *emblevels;$/;"	m	struct:ass_shaper	file:	access:public
emit_first_point	.\libass\ass_outline.c	/^static bool emit_first_point(StrokerState *str, ASS_Vector pt, char segment, int dir)$/;"	f	file:	signature:(StrokerState *str, ASS_Vector pt, char segment, int dir)
emit_point	.\libass\ass_outline.c	/^static bool emit_point(StrokerState *str, ASS_Vector pt,$/;"	f	file:	signature:(StrokerState *str, ASS_Vector pt, ASS_DVector offs, char segment, int dir)
encode_utf16	.\libass\ass_directwrite.c	/^static int encode_utf16(wchar_t *chars, uint32_t codepoint)$/;"	f	file:	signature:(wchar_t *chars, uint32_t codepoint)
end	.\libass\ass_parse.c	/^    char *start, *end;$/;"	m	struct:arg	file:	access:public
endstruc	.\libass\x86\rasterizer.asm	/^endstruc$/;"	l
engine	.\libass\ass_render.h	/^    const BitmapEngine *engine;$/;"	m	struct:ass_renderer	access:public
ensure_font_size	.\libass\ass_parse.c	/^double ensure_font_size(ASS_Renderer *priv, double size)$/;"	f	signature:(ASS_Renderer *priv, double size)
ensure_font_size	.\libass\ass_parse.h	/^double ensure_font_size(ASS_Renderer *priv, double size);$/;"	p	signature:(ASS_Renderer *priv, double size)
eps	.\libass\ass_outline.c	/^    int eps;                  \/\/ allowable error in coordinate space$/;"	m	struct:__anon28	file:	access:public
er	.\libass\ass_rasterizer.c	/^    int64_t r2, er;$/;"	m	struct:__anon36	file:	access:public
err_a	.\libass\ass_outline.c	/^    double err_a;$/;"	m	struct:__anon28	file:	access:public
err_c	.\libass\ass_outline.c	/^    double err_c;$/;"	m	struct:__anon28	file:	access:public
err_q	.\libass\ass_outline.c	/^    double err_q;$/;"	m	struct:__anon28	file:	access:public
estimate_cubic_error	.\libass\ass_outline.c	/^static int estimate_cubic_error(StrokerState *str, double c, double s,$/;"	f	file:	signature:(StrokerState *str, double c, double s, const double *dc, const double *ds, const Normal *normal, ASS_DVector *result, int check_flags, int dir)
estimate_quadratic_error	.\libass\ass_outline.c	/^static bool estimate_quadratic_error(StrokerState *str, double c, double s,$/;"	f	file:	signature:(StrokerState *str, double c, double s, const Normal *normal, ASS_DVector *result)
event	.\libass\ass_render.h	/^    ASS_Event *event;$/;"	m	struct:__anon42	access:public
event	.\libass\ass_render.h	/^    ASS_Event *event;$/;"	m	struct:__anon47	access:public
event_format	.\libass\ass_types.h	/^    char *event_format;     \/\/ event format line$/;"	m	struct:ass_track	access:public
event_format_fallback	.\libass\ass.c	/^static void event_format_fallback(ASS_Track *track)$/;"	f	file:	signature:(ASS_Track *track)
event_has_hard_overrides	.\libass\ass_parse.c	/^int event_has_hard_overrides(char *str)$/;"	f	signature:(char *str)
event_has_hard_overrides	.\libass\ass_parse.h	/^int event_has_hard_overrides(char *str);$/;"	p	signature:(char *str)
event_text	.\libass\ass_shaper.c	/^    FriBidiChar *event_text;$/;"	m	struct:ass_shaper	file:	access:public
events	.\libass\ass_types.h	/^    ASS_Event *events;    \/\/ the same as styles$/;"	m	struct:ass_track	access:public
evt_type	.\libass\ass_render.h	/^    } evt_type;$/;"	m	struct:__anon47	typeref:enum:__anon47::__anon48	access:public
expand_func	.\libass\ass_blur.c	/^static inline void expand_func(int16_t *rp, int16_t *rn,$/;"	f	file:	signature:(int16_t *rp, int16_t *rn, int16_t p1, int16_t z0, int16_t n1)
expand_horz	.\libass\ass_bitmap.h	/^    FilterFunc expand_horz, expand_vert;$/;"	m	struct:__anon7	access:public
expand_horz	.\libass\ass_func_template.h	/^void DECORATE(expand_horz)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
expand_vert	.\libass\ass_bitmap.h	/^    FilterFunc expand_horz, expand_vert;$/;"	m	struct:__anon7	access:public
expand_vert	.\libass\ass_func_template.h	/^void DECORATE(expand_vert)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
extract_fonts	.\libass\ass_library.h	/^    int extract_fonts;$/;"	m	struct:ass_library	access:public
face	.\libass\ass_directwrite.c	/^    IDWriteFontFace *face;$/;"	m	struct:__anon22	file:	access:public
face	.\libass\ass_fontselect.c	/^    FT_Face face;$/;"	m	struct:font_data_ft	file:	access:public
face_index	.\libass\ass_render.h	/^    int face_index;$/;"	m	struct:glyph_info	access:public
faces	.\libass\ass_font.h	/^    FT_Face faces[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_font	access:public
faces_uid	.\libass\ass_font.h	/^    int faces_uid[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_font	access:public
factory	.\libass\ass_directwrite.c	/^    IDWriteFactory *factory;$/;"	m	struct:__anon23	file:	access:public
fade	.\libass\ass_render.h	/^    int fade;                   \/\/ alpha from \\fad$/;"	m	struct:__anon47	access:public
fallback_chars	.\libass\ass_fontconfig.c	/^    FcCharSet *fallback_chars;$/;"	m	struct:fc_private	file:	access:public
fallbacks	.\libass\ass_fontconfig.c	/^    FcFontSet *fallbacks;$/;"	m	struct:fc_private	file:	access:public
families	.\libass\ass_fontselect.c	/^    char **families;    \/\/ family name$/;"	m	struct:font_info	file:	access:public
families	.\libass\ass_fontselect.h	/^    char **families;$/;"	m	struct:ass_font_provider_meta_data	access:public
family	.\libass\ass_font.h	/^    char *family;$/;"	m	struct:ass_font_desc	access:public
family	.\libass\ass_render.h	/^    char *family;$/;"	m	struct:__anon47	access:public
family_default	.\libass\ass_fontselect.c	/^    char *family_default;$/;"	m	struct:font_selector	file:	access:public
fax	.\libass\ass_render.h	/^    double fax, fay;            \/\/ text shearing$/;"	m	struct:__anon47	access:public
fax	.\libass\ass_render.h	/^    double fax, fay;            \/\/ text shearing$/;"	m	struct:glyph_info	access:public
fay	.\libass\ass_render.h	/^    double fax, fay;            \/\/ text shearing$/;"	m	struct:__anon47	access:public
fay	.\libass\ass_render.h	/^    double fax, fay;            \/\/ text shearing$/;"	m	struct:glyph_info	access:public
fc_private	.\libass\ass_fontconfig.c	/^typedef struct fc_private {$/;"	s	file:
fc_private::config	.\libass\ass_fontconfig.c	/^    FcConfig *config;$/;"	m	struct:fc_private	file:	access:public
fc_private::fallback_chars	.\libass\ass_fontconfig.c	/^    FcCharSet *fallback_chars;$/;"	m	struct:fc_private	file:	access:public
fc_private::fallbacks	.\libass\ass_fontconfig.c	/^    FcFontSet *fallbacks;$/;"	m	struct:fc_private	file:	access:public
features	.\libass\ass_shaper.c	/^    hb_feature_t *features;$/;"	m	struct:ass_shaper	file:	access:public
fill_bitmap_hash	.\libass\ass_render.c	/^fill_bitmap_hash(ASS_Renderer *priv, GlyphInfo *info,$/;"	f	file:	signature:(ASS_Renderer *priv, GlyphInfo *info, OutlineBitmapHashKey *hash_key)
fill_composite_hash	.\libass\ass_render.c	/^static void fill_composite_hash(CompositeHashKey *hk, CombinedBitmapInfo *info)$/;"	f	file:	signature:(CompositeHashKey *hk, CombinedBitmapInfo *info)
fill_generic	.\libass\ass_bitmap.h	/^    FillGenericTileFunc fill_generic;$/;"	m	struct:__anon7	access:public
fill_generic_tile16	.\libass\ass_func_template.h	/^void DECORATE(fill_generic_tile16)(uint8_t *buf, ptrdiff_t stride,$/;"	p	signature:(uint8_t *buf, ptrdiff_t stride, const struct segment *line, size_t n_lines, int winding)
fill_generic_tile32	.\libass\ass_func_template.h	/^void DECORATE(fill_generic_tile32)(uint8_t *buf, ptrdiff_t stride,$/;"	p	signature:(uint8_t *buf, ptrdiff_t stride, const struct segment *line, size_t n_lines, int winding)
fill_glyph_hash	.\libass\ass_render.c	/^fill_glyph_hash(ASS_Renderer *priv, OutlineHashKey *outline_key,$/;"	f	file:	signature:(ASS_Renderer *priv, OutlineHashKey *outline_key, GlyphInfo *info)
fill_halfplane	.\libass\ass_bitmap.h	/^    FillHalfplaneTileFunc fill_halfplane;$/;"	m	struct:__anon7	access:public
fill_halfplane_tile16	.\libass\ass_func_template.h	/^void DECORATE(fill_halfplane_tile16)(uint8_t *buf, ptrdiff_t stride,$/;"	p	signature:(uint8_t *buf, ptrdiff_t stride, int32_t a, int32_t b, int64_t c, int32_t scale)
fill_halfplane_tile32	.\libass\ass_func_template.h	/^void DECORATE(fill_halfplane_tile32)(uint8_t *buf, ptrdiff_t stride,$/;"	p	signature:(uint8_t *buf, ptrdiff_t stride, int32_t a, int32_t b, int64_t c, int32_t scale)
fill_solid	.\libass\ass_bitmap.h	/^    FillSolidTileFunc fill_solid;$/;"	m	struct:__anon7	access:public
fill_solid_tile16	.\libass\ass_func_template.h	/^void DECORATE(fill_solid_tile16)(uint8_t *buf, ptrdiff_t stride, int set);$/;"	p	signature:(uint8_t *buf, ptrdiff_t stride, int set)
fill_solid_tile32	.\libass\ass_func_template.h	/^void DECORATE(fill_solid_tile32)(uint8_t *buf, ptrdiff_t stride, int set);$/;"	p	signature:(uint8_t *buf, ptrdiff_t stride, int set)
filter	.\libass\ass_blur.c	/^    int level, prefilter, filter;$/;"	m	struct:__anon9	file:	access:public
filter	.\libass\ass_cache.h	/^    FilterDesc filter;$/;"	m	struct:__anon20	access:public
filter	.\libass\ass_render.h	/^    FilterDesc filter;$/;"	m	struct:__anon44	access:public
find_best_method	.\libass\ass_blur.c	/^static void find_best_method(BlurMethod *blur, double r2)$/;"	f	file:	signature:(BlurMethod *blur, double r2)
find_font	.\libass\ass_fontselect.c	/^find_font(ASS_FontSelector *priv, ASS_Library *library,$/;"	f	file:	signature:(ASS_FontSelector *priv, ASS_Library *library, ASS_FontProviderMetaData meta, unsigned bold, unsigned italic, int *index, char **postscript_name, int *uid, ASS_FontStream *stream, uint32_t code, bool *name_match)
first_normal	.\libass\ass_outline.c	/^    ASS_DVector first_normal, last_normal;$/;"	m	struct:__anon28	file:	access:public
first_point	.\libass\ass_outline.c	/^    ASS_Vector first_point;$/;"	m	struct:__anon28	file:	access:public
first_pos_x	.\libass\ass_render.h	/^    int first_pos_x;$/;"	m	struct:__anon44	access:public
first_skip	.\libass\ass_outline.c	/^    int first_skip, last_skip;$/;"	m	struct:__anon28	file:	access:public
fit_segment	.\libass\ass_render.c	/^static int fit_segment(Segment *s, Segment *fixed, int *cnt, int dir)$/;"	f	file:	signature:(Segment *s, Segment *fixed, int *cnt, int dir)
fix_collisions	.\libass\ass_render.c	/^fix_collisions(ASS_Renderer *render_priv, EventImages *imgs, int cnt)$/;"	f	file:	signature:(ASS_Renderer *render_priv, EventImages *imgs, int cnt)
fix_first_point	.\libass\ass_outline.c	/^static void fix_first_point(StrokerState *str, ASS_Vector pt,$/;"	f	file:	signature:(StrokerState *str, ASS_Vector pt, ASS_DVector offs, int dir)
fix_glyph_scaling	.\libass\ass_render.c	/^fix_glyph_scaling(ASS_Renderer *priv, GlyphInfo *glyph)$/;"	f	file:	signature:(ASS_Renderer *priv, GlyphInfo *glyph)
fix_outline	.\libass\ass_bitmap.c	/^void fix_outline(Bitmap *bm_g, Bitmap *bm_o)$/;"	f	signature:(Bitmap *bm_g, Bitmap *bm_o)
fix_outline	.\libass\ass_bitmap.h	/^void fix_outline(Bitmap *bm_g, Bitmap *bm_o);$/;"	p	signature:(Bitmap *bm_g, Bitmap *bm_o)
flags	.\libass\ass_rasterizer.h	/^    int32_t a, b, scale, flags;$/;"	m	struct:segment	access:public
flags	.\libass\ass_render.h	/^    int flags;                  \/\/ decoration flags (underline\/strike-through)$/;"	m	struct:__anon47	access:public
flags	.\libass\ass_render.h	/^    int flags;$/;"	m	struct:glyph_info	access:public
fnv_32a_buf	.\libass\ass_utils.h	/^static inline unsigned fnv_32a_buf(void *buf, size_t len, unsigned hval)$/;"	f	signature:(void *buf, size_t len, unsigned hval)
fnv_32a_str	.\libass\ass_utils.h	/^static inline unsigned fnv_32a_str(char *str, unsigned hval)$/;"	f	signature:(char *str, unsigned hval)
font	.\libass\ass_directwrite.c	/^    IDWriteFont *font;$/;"	m	struct:__anon22	file:	access:public
font	.\libass\ass_render.h	/^    ASS_Font *font;$/;"	m	struct:__anon47	access:public
font	.\libass\ass_render.h	/^    ASS_Font *font;$/;"	m	struct:glyph_info	access:public
fontEmSize	.\libass\dwrite_c.h	/^  FLOAT                     fontEmSize;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
fontFace	.\libass\dwrite_c.h	/^  IDWriteFontFace           *fontFace;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
font_attributes_similarity	.\libass\ass_fontselect.c	/^static unsigned font_attributes_similarity(ASS_FontInfo *a, ASS_FontInfo *req)$/;"	f	file:	signature:(ASS_FontInfo *a, ASS_FontInfo *req)
font_cache	.\libass\ass_render.h	/^    Cache *font_cache;$/;"	m	struct:__anon50	access:public
font_cache_desc	.\libass\ass_cache.c	/^const CacheDesc font_cache_desc = {$/;"	v
font_compare	.\libass\ass_cache.c	/^static unsigned font_compare(void *key1, void *key2, size_t key_size)$/;"	f	file:	signature:(void *key1, void *key2, size_t key_size)
font_constructors	.\libass\ass_fontselect.c	/^struct font_constructors font_constructors[] = {$/;"	v	typeref:struct:font_constructors
font_constructors	.\libass\ass_fontselect.c	/^struct font_constructors {$/;"	s	file:
font_constructors::constructor	.\libass\ass_fontselect.c	/^    ASS_FontProvider *(*constructor)(ASS_Library *, ASS_FontSelector *,$/;"	m	struct:font_constructors	file:	access:public
font_constructors::id	.\libass\ass_fontselect.c	/^    ASS_DefaultFontProvider id;$/;"	m	struct:font_constructors	file:	access:public
font_constructors::name	.\libass\ass_fontselect.c	/^    const char *name;$/;"	m	struct:font_constructors	file:	access:public
font_data_ft	.\libass\ass_fontselect.c	/^struct font_data_ft {$/;"	s	file:
font_data_ft::face	.\libass\ass_fontselect.c	/^    FT_Face face;$/;"	m	struct:font_data_ft	file:	access:public
font_data_ft::idx	.\libass\ass_fontselect.c	/^    int idx;$/;"	m	struct:font_data_ft	file:	access:public
font_data_ft::lib	.\libass\ass_fontselect.c	/^    ASS_Library *lib;$/;"	m	struct:font_data_ft	file:	access:public
font_destruct	.\libass\ass_cache.c	/^static void font_destruct(void *key, void *value)$/;"	f	file:	signature:(void *key, void *value)
font_encoding	.\libass\ass_render.h	/^    int font_encoding;$/;"	m	struct:__anon47	access:public
font_funcs	.\libass\ass_shaper.c	/^    hb_font_funcs_t *font_funcs[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_shaper_font_data	file:	access:public
font_hash	.\libass\ass_cache.c	/^static unsigned font_hash(void *buf, size_t len)$/;"	f	file:	signature:(void *buf, size_t len)
font_info	.\libass\ass_fontselect.c	/^struct font_info {$/;"	s	file:
font_info::families	.\libass\ass_fontselect.c	/^    char **families;    \/\/ family name$/;"	m	struct:font_info	file:	access:public
font_info::fullnames	.\libass\ass_fontselect.c	/^    char **fullnames;   \/\/ list of localized fullnames (e.g. Arial Bold Italic)$/;"	m	struct:font_info	file:	access:public
font_info::index	.\libass\ass_fontselect.c	/^    int index;             \/\/ font index inside font collections$/;"	m	struct:font_info	file:	access:public
font_info::n_family	.\libass\ass_fontselect.c	/^    int n_family;$/;"	m	struct:font_info	file:	access:public
font_info::n_fullname	.\libass\ass_fontselect.c	/^    int n_fullname;$/;"	m	struct:font_info	file:	access:public
font_info::path	.\libass\ass_fontselect.c	/^    char *path;            \/\/ absolute path$/;"	m	struct:font_info	file:	access:public
font_info::postscript_name	.\libass\ass_fontselect.c	/^    char *postscript_name; \/\/ can be used as an alternative to index to$/;"	m	struct:font_info	file:	access:public
font_info::priv	.\libass\ass_fontselect.c	/^    void *priv;$/;"	m	struct:font_info	file:	access:public
font_info::provider	.\libass\ass_fontselect.c	/^    ASS_FontProvider *provider;$/;"	m	struct:font_info	file:	access:public
font_info::slant	.\libass\ass_fontselect.c	/^    int slant;$/;"	m	struct:font_info	file:	access:public
font_info::uid	.\libass\ass_fontselect.c	/^    int uid;            \/\/ unique font face id$/;"	m	struct:font_info	file:	access:public
font_info::weight	.\libass\ass_fontselect.c	/^    int weight;         \/\/ TrueType scale, 100-900$/;"	m	struct:font_info	file:	access:public
font_info::width	.\libass\ass_fontselect.c	/^    int width;$/;"	m	struct:font_info	file:	access:public
font_infos	.\libass\ass_fontselect.c	/^    ASS_FontInfo *font_infos;$/;"	m	struct:font_selector	file:	access:public
font_key_move	.\libass\ass_cache.c	/^static bool font_key_move(void *dst, void *src, size_t key_size)$/;"	f	file:	signature:(void *dst, void *src, size_t key_size)
font_provider	.\libass\ass_fontselect.c	/^struct font_provider {$/;"	s	file:
font_provider::funcs	.\libass\ass_fontselect.c	/^    ASS_FontProviderFuncs funcs;$/;"	m	struct:font_provider	file:	access:public
font_provider::parent	.\libass\ass_fontselect.c	/^    ASS_FontSelector *parent;$/;"	m	struct:font_provider	file:	access:public
font_provider::priv	.\libass\ass_fontselect.c	/^    void *priv;$/;"	m	struct:font_provider	file:	access:public
font_provider_funcs	.\libass\ass_fontselect.h	/^typedef struct font_provider_funcs {$/;"	s
font_provider_funcs::check_glyph	.\libass\ass_fontselect.h	/^    CheckGlyphFunc      check_glyph;            \/* mandatory *\/$/;"	m	struct:font_provider_funcs	access:public
font_provider_funcs::check_postscript	.\libass\ass_fontselect.h	/^    CheckPostscriptFunc check_postscript;       \/* mandatory *\/$/;"	m	struct:font_provider_funcs	access:public
font_provider_funcs::destroy_font	.\libass\ass_fontselect.h	/^    DestroyFontFunc     destroy_font;           \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
font_provider_funcs::destroy_provider	.\libass\ass_fontselect.h	/^    DestroyProviderFunc destroy_provider;       \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
font_provider_funcs::get_data	.\libass\ass_fontselect.h	/^    GetDataFunc         get_data;               \/* optional\/mandatory *\/$/;"	m	struct:font_provider_funcs	access:public
font_provider_funcs::get_fallback	.\libass\ass_fontselect.h	/^    GetFallbackFunc     get_fallback;           \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
font_provider_funcs::get_font_index	.\libass\ass_fontselect.h	/^    GetFontIndex        get_font_index;         \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
font_provider_funcs::get_substitutions	.\libass\ass_fontselect.h	/^    SubstituteFontFunc  get_substitutions;      \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
font_provider_funcs::match_fonts	.\libass\ass_fontselect.h	/^    MatchFontsFunc      match_fonts;            \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
font_provider_labels	.\test\test.c	/^char *font_provider_labels[] = {$/;"	v
font_scale	.\libass\ass_render.h	/^    double font_scale;$/;"	m	struct:ass_renderer	access:public
font_scale_x	.\libass\ass_render.h	/^    double font_scale_x;        \/\/ x scale applied to all glyphs to preserve text aspect ratio$/;"	m	struct:ass_renderer	access:public
font_selector	.\libass\ass_fontselect.c	/^struct font_selector {$/;"	s	file:
font_selector::alloc_font	.\libass\ass_fontselect.c	/^    int alloc_font;$/;"	m	struct:font_selector	file:	access:public
font_selector::default_provider	.\libass\ass_fontselect.c	/^    ASS_FontProvider *default_provider;$/;"	m	struct:font_selector	file:	access:public
font_selector::embedded_provider	.\libass\ass_fontselect.c	/^    ASS_FontProvider *embedded_provider;$/;"	m	struct:font_selector	file:	access:public
font_selector::family_default	.\libass\ass_fontselect.c	/^    char *family_default;$/;"	m	struct:font_selector	file:	access:public
font_selector::font_infos	.\libass\ass_fontselect.c	/^    ASS_FontInfo *font_infos;$/;"	m	struct:font_selector	file:	access:public
font_selector::index_default	.\libass\ass_fontselect.c	/^    int index_default;$/;"	m	struct:font_selector	file:	access:public
font_selector::n_font	.\libass\ass_fontselect.c	/^    int n_font;$/;"	m	struct:font_selector	file:	access:public
font_selector::path_default	.\libass\ass_fontselect.c	/^    char *path_default;$/;"	m	struct:font_selector	file:	access:public
font_selector::uid	.\libass\ass_fontselect.c	/^    int uid;$/;"	m	struct:font_selector	file:	access:public
font_size	.\libass\ass_render.h	/^    double font_size;$/;"	m	struct:__anon47	access:public
font_size	.\libass\ass_render.h	/^    double font_size;$/;"	m	struct:glyph_info	access:public
font_size_coeff	.\libass\ass_render.h	/^    double font_size_coeff;     \/\/ font size multiplier$/;"	m	struct:__anon41	access:public
font_substitutions	.\libass\ass_coretext.c	/^static const ASS_FontMapping font_substitutions[] = {$/;"	v	file:
font_substitutions	.\libass\ass_directwrite.c	/^static const ASS_FontMapping font_substitutions[] = {$/;"	v	file:
fontconfig_callbacks	.\libass\ass_fontconfig.c	/^static ASS_FontProviderFuncs fontconfig_callbacks = {$/;"	v	file:
fontdata	.\libass\ass.c	/^    char *fontdata;$/;"	m	struct:parser_priv	file:	access:public
fontdata	.\libass\ass_library.h	/^    ASS_Fontdata *fontdata;$/;"	m	struct:ass_library	access:public
fontdata_size	.\libass\ass.c	/^    int fontdata_size;$/;"	m	struct:parser_priv	file:	access:public
fontdata_used	.\libass\ass.c	/^    int fontdata_used;$/;"	m	struct:parser_priv	file:	access:public
fontname	.\libass\ass.c	/^    char *fontname;$/;"	m	struct:parser_priv	file:	access:public
fonts	.\libass\ass_shaper.c	/^    hb_font_t *fonts[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_shaper_font_data	file:	access:public
fonts_dir	.\libass\ass_library.h	/^    char *fonts_dir;$/;"	m	struct:ass_library	access:public
fontselect	.\libass\ass_render.h	/^    ASS_FontSelector *fontselect;$/;"	m	struct:ass_renderer	access:public
frame_height	.\libass\ass_render.h	/^    int frame_height;$/;"	m	struct:__anon41	access:public
frame_width	.\libass\ass_render.h	/^    int frame_width;$/;"	m	struct:__anon41	access:public
free_font_info	.\libass\ass_fontselect.c	/^static void free_font_info(ASS_FontProviderMetaData *meta)$/;"	f	file:	signature:(ASS_FontProviderMetaData *meta)
free_render_context	.\libass\ass_render.c	/^static void free_render_context(ASS_Renderer *render_priv)$/;"	f	file:	signature:(ASS_Renderer *render_priv)
from	.\libass\ass_fontselect.h	/^    const char *from;$/;"	m	struct:ass_font_mapping	access:public
frx	.\libass\ass_render.h	/^    double frx, fry, frz;       \/\/ rotation$/;"	m	struct:glyph_info	access:public
frx	.\libass\ass_render.h	/^    double frx, fry, frz;$/;"	m	struct:__anon47	access:public
fry	.\libass\ass_render.h	/^    double frx, fry, frz;       \/\/ rotation$/;"	m	struct:glyph_info	access:public
fry	.\libass\ass_render.h	/^    double frx, fry, frz;$/;"	m	struct:__anon47	access:public
frz	.\libass\ass_render.h	/^    double frx, fry, frz;       \/\/ rotation$/;"	m	struct:glyph_info	access:public
frz	.\libass\ass_render.h	/^    double frx, fry, frz;$/;"	m	struct:__anon47	access:public
ft_funcs	.\libass\ass_fontselect.c	/^static ASS_FontProviderFuncs ft_funcs = {$/;"	v	file:
ftlibrary	.\libass\ass_font.h	/^    FT_Library ftlibrary;$/;"	m	struct:ass_font	access:public
ftlibrary	.\libass\ass_render.h	/^    FT_Library ftlibrary;$/;"	m	struct:ass_renderer	access:public
fullnames	.\libass\ass_fontselect.c	/^    char **fullnames;   \/\/ list of localized fullnames (e.g. Arial Bold Italic)$/;"	m	struct:font_info	file:	access:public
fullnames	.\libass\ass_fontselect.h	/^    char **fullnames;$/;"	m	struct:ass_font_provider_meta_data	access:public
func	.\libass\ass_fontselect.h	/^    size_t  (*func)(void *font_priv, unsigned char *data,$/;"	m	struct:ass_font_stream	access:public
func_add_hook	.\ltmain.sh	/^func_add_hook ()$/;"	f
func_append	.\ltmain.sh	/^  func_append ()$/;"	f
func_append_quoted	.\ltmain.sh	/^  func_append_quoted ()$/;"	f
func_append_uniq	.\ltmain.sh	/^func_append_uniq ()$/;"	f
func_arith	.\ltmain.sh	/^  func_arith ()$/;"	f
func_check_prog_grep	.\ltmain.sh	/^  func_check_prog_grep ()$/;"	f
func_check_prog_sed	.\ltmain.sh	/^  func_check_prog_sed ()$/;"	f
func_check_version_match	.\ltmain.sh	/^func_check_version_match ()$/;"	f
func_config	.\ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	.\ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	.\ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	.\ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	.\ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	.\ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	.\ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	.\ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	.\ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	.\ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	.\ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	.\ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	.\ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	.\ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	.\ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	.\ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	.\ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	.\ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	.\ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	.\ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	.\ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	.\ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	.\ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	.\ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	.\ltmain.sh	/^func_cygpath ()$/;"	f
func_dll_def_p	.\ltmain.sh	/^func_dll_def_p ()$/;"	f
func_echo	.\ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	.\ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_infix_1	.\ltmain.sh	/^func_echo_infix_1 ()$/;"	f
func_emit_cwrapperexe_src	.\ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_exe_manifest	.\ltmain.sh	/^func_emit_exe_manifest ()$/;"	f
func_emit_wrapper	.\ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	.\ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	.\ltmain.sh	/^func_error ()$/;"	f
func_exec_program	.\ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program_core	.\ltmain.sh	/^func_exec_program_core ()$/;"	f
func_executable_p	.\ltmain.sh	/^func_executable_p ()$/;"	f
func_execute_cmds	.\ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	.\ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	.\ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	.\ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	.\ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	.\ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	.\ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	.\ltmain.sh	/^func_features ()$/;"	f
func_generate_dlsyms	.\ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generated_by_libtool_p	.\ltmain.sh	/^func_generated_by_libtool_p ()$/;"	f
func_grep	.\ltmain.sh	/^func_grep ()$/;"	f
func_help	.\ltmain.sh	/^func_help ()$/;"	f
func_hookable	.\ltmain.sh	/^func_hookable ()$/;"	f
func_infer_tag	.\ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	.\ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	.\ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	.\ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	.\ltmain.sh	/^  func_len ()$/;"	f
func_lo2o	.\ltmain.sh	/^  func_lo2o ()$/;"	f
func_lt_dump_args	.\ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_ver	.\ltmain.sh	/^func_lt_ver ()$/;"	f
func_ltwrapper_executable_p	.\ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	.\ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	.\ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	.\ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	.\ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	.\ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	.\ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	.\ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	.\ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	.\ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	.\ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	.\ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	.\ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	.\ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	.\ltmain.sh	/^func_normal_abspath ()$/;"	f
func_notquiet	.\ltmain.sh	/^func_notquiet ()$/;"	f
func_options	.\ltmain.sh	/^func_options ()$/;"	f
func_options_prep	.\ltmain.sh	/^func_options_prep ()$/;"	f
func_parse_lt_options	.\ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_options	.\ltmain.sh	/^func_parse_options ()$/;"	f
func_path_progs	.\ltmain.sh	/^func_path_progs ()$/;"	f
func_quote_for_eval	.\ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	.\ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	.\ltmain.sh	/^func_relative_path ()$/;"	f
func_remove_hook	.\ltmain.sh	/^func_remove_hook ()$/;"	f
func_replace_sysroot	.\ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_require_term_colors	.\ltmain.sh	/^func_require_term_colors ()$/;"	f
func_resolve_sysroot	.\ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_run_hooks	.\ltmain.sh	/^func_run_hooks ()$/;"	f
func_show_eval	.\ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	.\ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_sort_ver	.\ltmain.sh	/^func_sort_ver ()$/;"	f
func_source	.\ltmain.sh	/^func_source ()$/;"	f
func_split_equals	.\ltmain.sh	/^  func_split_equals ()$/;"	f
func_split_short_opt	.\ltmain.sh	/^  func_split_short_opt ()$/;"	f
func_stripname	.\ltmain.sh	/^  func_stripname ()$/;"	f
func_suncc_cstd_abi	.\ltmain.sh	/^func_suncc_cstd_abi ()$/;"	f
func_to_host_file	.\ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	.\ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	.\ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	.\ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	.\ltmain.sh	/^func_usage ()$/;"	f
func_usage_message	.\ltmain.sh	/^func_usage_message ()$/;"	f
func_validate_options	.\ltmain.sh	/^func_validate_options ()$/;"	f
func_verbose	.\ltmain.sh	/^func_verbose ()$/;"	f
func_version	.\ltmain.sh	/^func_version ()$/;"	f
func_warn_and_continue	.\ltmain.sh	/^func_warn_and_continue ()$/;"	f
func_warning	.\ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	.\ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	.\ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	.\ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	.\ltmain.sh	/^  func_xform ()$/;"	f
funcs	.\libass\ass_fontselect.c	/^    ASS_FontProviderFuncs funcs;$/;"	m	struct:font_provider	file:	access:public
gen_image	.\test\test.c	/^static image_t *gen_image(int width, int height)$/;"	f	file:	signature:(int width, int height)
get_base_point	.\libass\ass_render.c	/^static void get_base_point(ASS_DRect *bbox, int alignment, double *bx, double *by)$/;"	f	file:	signature:(ASS_DRect *bbox, int alignment, double *bx, double *by)
get_bitmap_glyph	.\libass\ass_render.c	/^get_bitmap_glyph(ASS_Renderer *render_priv, GlyphInfo *info)$/;"	f	file:	signature:(ASS_Renderer *render_priv, GlyphInfo *info)
get_cached_metrics	.\libass\ass_shaper.c	/^get_cached_metrics(struct ass_shaper_metrics_data *metrics, FT_Face face,$/;"	f	signature:(struct ass_shaper_metrics_data *metrics, FT_Face face, hb_codepoint_t unicode, hb_codepoint_t glyph)
get_contour_point	.\libass\ass_shaper.c	/^get_contour_point(hb_font_t *font, void *font_data, hb_codepoint_t glyph,$/;"	f	file:	signature:(hb_font_t *font, void *font_data, hb_codepoint_t glyph, unsigned int point_index, hb_position_t *x, hb_position_t *y, void *user_data)
get_data	.\libass\ass_directwrite.c	/^static size_t get_data(void *data, unsigned char *buf, size_t offset,$/;"	f	file:	signature:(void *data, unsigned char *buf, size_t offset, size_t length)
get_data	.\libass\ass_fontselect.h	/^    GetDataFunc         get_data;               \/* optional\/mandatory *\/$/;"	m	struct:font_provider_funcs	access:public
get_data_embedded	.\libass\ass_fontselect.c	/^get_data_embedded(void *data, unsigned char *buf, size_t offset, size_t len)$/;"	f	file:	signature:(void *data, unsigned char *buf, size_t offset, size_t len)
get_fallback	.\libass\ass_coretext.c	/^static char *get_fallback(void *priv, const char *family, uint32_t codepoint)$/;"	f	file:	signature:(void *priv, const char *family, uint32_t codepoint)
get_fallback	.\libass\ass_directwrite.c	/^static char *get_fallback(void *priv, const char *base, uint32_t codepoint)$/;"	f	file:	signature:(void *priv, const char *base, uint32_t codepoint)
get_fallback	.\libass\ass_fontconfig.c	/^static char *get_fallback(void *priv, const char *family, uint32_t codepoint)$/;"	f	file:	signature:(void *priv, const char *family, uint32_t codepoint)
get_fallback	.\libass\ass_fontselect.h	/^    GetFallbackFunc     get_fallback;           \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
get_fill_flags	.\libass\ass_rasterizer.c	/^static inline int get_fill_flags(struct segment *line, size_t n_lines, int winding)$/;"	f	file:	signature:(struct segment *line, size_t n_lines, int winding)
get_font_file	.\libass\ass_coretext.c	/^static char *get_font_file(CTFontDescriptorRef fontd)$/;"	f	file:	signature:(CTFontDescriptorRef fontd)
get_font_index	.\libass\ass_directwrite.c	/^static unsigned get_font_index(void *data)$/;"	f	file:	signature:(void *data)
get_font_index	.\libass\ass_fontselect.h	/^    GetFontIndex        get_font_index;         \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
get_font_info	.\libass\ass_fontselect.c	/^get_font_info(FT_Library lib, FT_Face face, ASS_FontProviderMetaData *info)$/;"	f	file:	signature:(FT_Library lib, FT_Face face, ASS_FontProviderMetaData *info)
get_font_traits	.\libass\ass_coretext.c	/^static void get_font_traits(CTFontDescriptorRef fontd,$/;"	f	file:	signature:(CTFontDescriptorRef fontd, ASS_FontProviderMetaData *meta)
get_glyph	.\libass\ass_shaper.c	/^get_glyph(hb_font_t *font, void *font_data, hb_codepoint_t unicode,$/;"	f	file:	signature:(hb_font_t *font, void *font_data, hb_codepoint_t unicode, hb_codepoint_t variation, hb_codepoint_t *glyph, void *user_data)
get_h_kerning	.\libass\ass_shaper.c	/^get_h_kerning(hb_font_t *font, void *font_data, hb_codepoint_t first,$/;"	f	file:	signature:(hb_font_t *font, void *font_data, hb_codepoint_t first, hb_codepoint_t second, void *user_data)
get_hb_font	.\libass\ass_shaper.c	/^static hb_font_t *get_hb_font(ASS_Shaper *shaper, GlyphInfo *info)$/;"	f	file:	signature:(ASS_Shaper *shaper, GlyphInfo *info)
get_line	.\libass\ass_blur.c	/^inline static const int16_t *get_line(const int16_t *ptr, uintptr_t offs, uintptr_t size)$/;"	f	file:	signature:(const int16_t *ptr, uintptr_t offs, uintptr_t size)
get_name	.\libass\ass_coretext.c	/^static void get_name(CTFontDescriptorRef fontd, CFStringRef attr,$/;"	f	file:	signature:(CTFontDescriptorRef fontd, CFStringRef attr, char **array, int *idx)
get_next_char	.\libass\ass_parse.c	/^unsigned get_next_char(ASS_Renderer *render_priv, char **str)$/;"	f	signature:(ASS_Renderer *render_priv, char **str)
get_next_char	.\libass\ass_parse.h	/^unsigned get_next_char(ASS_Renderer *render_priv, char **str);$/;"	p	signature:(ASS_Renderer *render_priv, char **str)
get_outline_glyph	.\libass\ass_render.c	/^get_outline_glyph(ASS_Renderer *priv, GlyphInfo *info)$/;"	f	file:	signature:(ASS_Renderer *priv, GlyphInfo *info)
get_render_priv	.\libass\ass_render.c	/^static ASS_RenderPriv *get_render_priv(ASS_Renderer *render_priv,$/;"	f	file:	signature:(ASS_Renderer *render_priv, ASS_Event *event)
get_substitutions	.\libass\ass_coretext.c	/^static void get_substitutions(void *priv, const char *name,$/;"	f	file:	signature:(void *priv, const char *name, ASS_FontProviderMetaData *meta)
get_substitutions	.\libass\ass_directwrite.c	/^static void get_substitutions(void *priv, const char *name,$/;"	f	file:	signature:(void *priv, const char *name, ASS_FontProviderMetaData *meta)
get_substitutions	.\libass\ass_fontconfig.c	/^static void get_substitutions(void *priv, const char *name,$/;"	f	file:	signature:(void *priv, const char *name, ASS_FontProviderMetaData *meta)
get_substitutions	.\libass\ass_fontselect.h	/^    SubstituteFontFunc  get_substitutions;      \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
get_trait	.\libass\ass_coretext.c	/^static void get_trait(CFDictionaryRef traits, CFStringRef attribute,$/;"	f	file:	signature:(CFDictionaryRef traits, CFStringRef attribute, float *trait)
get_v_kerning	.\libass\ass_shaper.c	/^get_v_kerning(hb_font_t *font, void *font_data, hb_codepoint_t first,$/;"	f	file:	signature:(hb_font_t *font, void *font_data, hb_codepoint_t first, hb_codepoint_t second, void *user_data)
glyph	.\libass\ass_cache.h	/^        GlyphHashKey glyph;$/;"	m	union:outline_hash_key::__anon15	access:public
glyphAdvances	.\libass\dwrite_c.h	/^  const FLOAT               *glyphAdvances;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
glyphCount	.\libass\dwrite_c.h	/^  UINT32                    glyphCount;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
glyphIndices	.\libass\dwrite_c.h	/^  const UINT16              *glyphIndices;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
glyphOffsets	.\libass\dwrite_c.h	/^  const DWRITE_GLYPH_OFFSET *glyphOffsets;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
glyph_index	.\libass\ass_render.h	/^    int glyph_index;$/;"	m	struct:glyph_info	access:public
glyph_info	.\libass\ass_render.h	/^typedef struct glyph_info {$/;"	s
glyph_info::advance	.\libass\ass_render.h	/^    ASS_Vector advance;         \/\/ 26.6$/;"	m	struct:glyph_info	access:public
glyph_info::asc	.\libass\ass_render.h	/^    int asc, desc;              \/\/ font max ascender and descender$/;"	m	struct:glyph_info	access:public
glyph_info::bbox	.\libass\ass_render.h	/^    ASS_Rect bbox;$/;"	m	struct:glyph_info	access:public
glyph_info::be	.\libass\ass_render.h	/^    int be;                     \/\/ blur edges$/;"	m	struct:glyph_info	access:public
glyph_info::blur	.\libass\ass_render.h	/^    double blur;                \/\/ gaussian blur$/;"	m	struct:glyph_info	access:public
glyph_info::bold	.\libass\ass_render.h	/^    unsigned bold;$/;"	m	struct:glyph_info	access:public
glyph_info::border	.\libass\ass_render.h	/^    ASS_Outline *border[2];$/;"	m	struct:glyph_info	access:public
glyph_info::border_style	.\libass\ass_render.h	/^    int border_style;$/;"	m	struct:glyph_info	access:public
glyph_info::border_x	.\libass\ass_render.h	/^    double border_x, border_y;$/;"	m	struct:glyph_info	access:public
glyph_info::border_y	.\libass\ass_render.h	/^    double border_x, border_y;$/;"	m	struct:glyph_info	access:public
glyph_info::c	.\libass\ass_render.h	/^    uint32_t c[4];              \/\/ colors$/;"	m	struct:glyph_info	access:public
glyph_info::cluster_advance	.\libass\ass_render.h	/^    ASS_Vector cluster_advance;$/;"	m	struct:glyph_info	access:public
glyph_info::desc	.\libass\ass_render.h	/^    int asc, desc;              \/\/ font max ascender and descender$/;"	m	struct:glyph_info	access:public
glyph_info::drawing	.\libass\ass_render.h	/^    ASS_Drawing *drawing;$/;"	m	struct:glyph_info	access:public
glyph_info::effect	.\libass\ass_render.h	/^    char effect;                \/\/ the first (leading) glyph of some effect ?$/;"	m	struct:glyph_info	access:public
glyph_info::effect_skip_timing	.\libass\ass_render.h	/^    int effect_skip_timing;     \/\/ delay after the end of last karaoke word$/;"	m	struct:glyph_info	access:public
glyph_info::effect_timing	.\libass\ass_render.h	/^    int effect_timing;          \/\/ time duration of current karaoke word$/;"	m	struct:glyph_info	access:public
glyph_info::effect_type	.\libass\ass_render.h	/^    Effect effect_type;$/;"	m	struct:glyph_info	access:public
glyph_info::face_index	.\libass\ass_render.h	/^    int face_index;$/;"	m	struct:glyph_info	access:public
glyph_info::fax	.\libass\ass_render.h	/^    double fax, fay;            \/\/ text shearing$/;"	m	struct:glyph_info	access:public
glyph_info::fay	.\libass\ass_render.h	/^    double fax, fay;            \/\/ text shearing$/;"	m	struct:glyph_info	access:public
glyph_info::flags	.\libass\ass_render.h	/^    int flags;$/;"	m	struct:glyph_info	access:public
glyph_info::font	.\libass\ass_render.h	/^    ASS_Font *font;$/;"	m	struct:glyph_info	access:public
glyph_info::font_size	.\libass\ass_render.h	/^    double font_size;$/;"	m	struct:glyph_info	access:public
glyph_info::frx	.\libass\ass_render.h	/^    double frx, fry, frz;       \/\/ rotation$/;"	m	struct:glyph_info	access:public
glyph_info::fry	.\libass\ass_render.h	/^    double frx, fry, frz;       \/\/ rotation$/;"	m	struct:glyph_info	access:public
glyph_info::frz	.\libass\ass_render.h	/^    double frx, fry, frz;       \/\/ rotation$/;"	m	struct:glyph_info	access:public
glyph_info::glyph_index	.\libass\ass_render.h	/^    int glyph_index;$/;"	m	struct:glyph_info	access:public
glyph_info::hash_key	.\libass\ass_render.h	/^    BitmapHashKey hash_key;$/;"	m	struct:glyph_info	access:public
glyph_info::hspacing	.\libass\ass_render.h	/^    double hspacing;$/;"	m	struct:glyph_info	access:public
glyph_info::image	.\libass\ass_render.h	/^    BitmapHashValue *image;$/;"	m	struct:glyph_info	access:public
glyph_info::italic	.\libass\ass_render.h	/^    unsigned italic;$/;"	m	struct:glyph_info	access:public
glyph_info::linebreak	.\libass\ass_render.h	/^    char linebreak;             \/\/ the first (leading) glyph of some line ?$/;"	m	struct:glyph_info	access:public
glyph_info::next	.\libass\ass_render.h	/^    struct glyph_info *next;$/;"	m	struct:glyph_info	typeref:struct:glyph_info::glyph_info	access:public
glyph_info::offset	.\libass\ass_render.h	/^    ASS_Vector offset;$/;"	m	struct:glyph_info	access:public
glyph_info::orig_scale_x	.\libass\ass_render.h	/^    double orig_scale_x, orig_scale_y; \/\/ scale_x,y before fix_glyph_scaling$/;"	m	struct:glyph_info	access:public
glyph_info::orig_scale_y	.\libass\ass_render.h	/^    double orig_scale_x, orig_scale_y; \/\/ scale_x,y before fix_glyph_scaling$/;"	m	struct:glyph_info	access:public
glyph_info::outline	.\libass\ass_render.h	/^    ASS_Outline *outline;$/;"	m	struct:glyph_info	access:public
glyph_info::pos	.\libass\ass_render.h	/^    ASS_Vector pos;$/;"	m	struct:glyph_info	access:public
glyph_info::scale_x	.\libass\ass_render.h	/^    double scale_x, scale_y;$/;"	m	struct:glyph_info	access:public
glyph_info::scale_y	.\libass\ass_render.h	/^    double scale_x, scale_y;$/;"	m	struct:glyph_info	access:public
glyph_info::script	.\libass\ass_render.h	/^    hb_script_t script;$/;"	m	struct:glyph_info	access:public
glyph_info::script	.\libass\ass_render.h	/^    int script;$/;"	m	struct:glyph_info	access:public
glyph_info::shadow_x	.\libass\ass_render.h	/^    double shadow_x;$/;"	m	struct:glyph_info	access:public
glyph_info::shadow_y	.\libass\ass_render.h	/^    double shadow_y;$/;"	m	struct:glyph_info	access:public
glyph_info::shape_run_id	.\libass\ass_render.h	/^    int shape_run_id;$/;"	m	struct:glyph_info	access:public
glyph_info::skip	.\libass\ass_render.h	/^    unsigned skip;              \/\/ skip glyph when layouting text$/;"	m	struct:glyph_info	access:public
glyph_info::symbol	.\libass\ass_render.h	/^    unsigned symbol;$/;"	m	struct:glyph_info	access:public
glyph_max	.\libass\ass_render.h	/^    size_t glyph_max;$/;"	m	struct:__anon50	access:public
glyph_metrics_cache_desc	.\libass\ass_cache.c	/^const CacheDesc glyph_metrics_cache_desc = {$/;"	v
glyph_metrics_destruct	.\libass\ass_cache.c	/^static void glyph_metrics_destruct(void *key, void *value)$/;"	f	file:	signature:(void *key, void *value)
glyph_metrics_key_move	.\libass\ass_cache.c	/^static bool glyph_metrics_key_move(void *dst, void *src, size_t key_size)$/;"	f	file:	signature:(void *dst, void *src, size_t key_size)
glyphs	.\libass\ass_render.h	/^    GlyphInfo *glyphs;$/;"	m	struct:__anon46	access:public
grow_array	.\libass\ass_library.c	/^static int grow_array(void **array, int nelem, size_t elsize)$/;"	f	file:	signature:(void **array, int nelem, size_t elsize)
h	.\libass\ass.h	/^    int w, h;                   \/\/ Bitmap width\/height$/;"	m	struct:ass_image	access:public
h	.\libass\ass_bitmap.h	/^    int w, h;                   \/\/ width, height$/;"	m	struct:__anon8	access:public
ha	.\libass\ass_render.h	/^    int ha, hb;                 \/\/ left and width$/;"	m	struct:__anon52	access:public
handle_selective_style_overrides	.\libass\ass_render.c	/^static ASS_Style *handle_selective_style_overrides(ASS_Renderer *render_priv,$/;"	f	file:	signature:(ASS_Renderer *render_priv, ASS_Style *rstyle)
has_avx	.\libass\ass_utils.c	/^int has_avx(void)$/;"	f	signature:(void)
has_avx	.\libass\ass_utils.h	/^int has_avx(void);$/;"	p	signature:(void)
has_avx2	.\libass\ass_utils.c	/^int has_avx2(void)$/;"	f	signature:(void)
has_avx2	.\libass\ass_utils.h	/^int has_avx2(void);$/;"	p	signature:(void)
has_sse2	.\libass\ass_utils.c	/^int has_sse2(void)$/;"	f	signature:(void)
has_sse2	.\libass\ass_utils.h	/^int has_sse2(void);$/;"	p	signature:(void)
hash	.\libass\ass_drawing.h	/^    int hash;            \/\/ hash value (for caching)$/;"	m	struct:__anon25	access:public
hash_func	.\libass\ass_cache.h	/^    HashFunction hash_func;$/;"	m	struct:__anon21	access:public
hash_key	.\libass\ass_render.h	/^    BitmapHashKey hash_key;$/;"	m	struct:glyph_info	access:public
hash_key	.\libass\ass_shaper.c	/^    GlyphMetricsHashKey hash_key;$/;"	m	struct:ass_shaper_metrics_data	file:	access:public
have_origin	.\libass\ass_render.h	/^    char have_origin;           \/\/ origin is explicitly defined; if 0, get_base_point() is used$/;"	m	struct:__anon47	access:public
hb	.\libass\ass_render.h	/^    int ha, hb;                 \/\/ left and width$/;"	m	struct:__anon52	access:public
hb_shaper_get_run_language	.\libass\ass_shaper.c	/^hb_shaper_get_run_language(ASS_Shaper *shaper, hb_script_t script)$/;"	f	file:	signature:(ASS_Shaper *shaper, hb_script_t script)
height	.\libass\ass_render.h	/^    double height;$/;"	m	struct:__anon46	access:public
height	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:__anon42	access:public
height	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:render_priv	access:public
height	.\libass\ass_render.h	/^    int width, height;          \/\/ screen dimensions$/;"	m	struct:ass_renderer	access:public
height	.\profile\profile.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
height	.\test\test.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
hinting	.\libass\ass_render.h	/^    ASS_Hinting hinting;$/;"	m	struct:__anon41	access:public
hits	.\libass\ass_cache.c	/^    unsigned hits;$/;"	m	struct:cache	file:	access:public
hspacing	.\libass\ass_render.h	/^    double hspacing;            \/\/ distance between letters, in pixels$/;"	m	struct:__anon47	access:public
hspacing	.\libass\ass_render.h	/^    double hspacing;$/;"	m	struct:glyph_info	access:public
id	.\libass\ass_fontselect.c	/^    ASS_DefaultFontProvider id;$/;"	m	struct:font_constructors	file:	access:public
idx	.\libass\ass_fontselect.c	/^    int idx;$/;"	m	struct:font_data_ft	file:	access:public
iface	.\libass\ass_directwrite.c	/^    IDWriteTextRenderer iface;$/;"	m	struct:FallbackLogTextRenderer	file:	access:public
ilog2	.\libass\ass_rasterizer.c	/^static inline int ilog2(uint32_t n)$/;"	f	file:	signature:(uint32_t n)
image	.\libass\ass_cache.h	/^    BitmapHashValue *image;$/;"	m	struct:__anon18	access:public
image	.\libass\ass_render.h	/^    BitmapHashValue *image;$/;"	m	struct:glyph_info	access:public
image	.\libass\ass_render.h	/^    CompositeHashValue *image;$/;"	m	struct:__anon44	access:public
image_s	.\profile\profile.c	/^typedef struct image_s {$/;"	s	file:
image_s	.\test\test.c	/^typedef struct image_s {$/;"	s	file:
image_s::buffer	.\profile\profile.c	/^    unsigned char *buffer;      \/\/ RGB24$/;"	m	struct:image_s	file:	access:public
image_s::buffer	.\test\test.c	/^    unsigned char *buffer;      \/\/ RGB24$/;"	m	struct:image_s	file:	access:public
image_s::height	.\profile\profile.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
image_s::height	.\test\test.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
image_s::stride	.\profile\profile.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
image_s::stride	.\test\test.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
image_s::width	.\profile\profile.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
image_s::width	.\test\test.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
image_t	.\profile\profile.c	/^} image_t;$/;"	t	typeref:struct:image_s	file:
image_t	.\test\test.c	/^} image_t;$/;"	t	typeref:struct:image_s	file:
images_root	.\libass\ass_render.h	/^    ASS_Image *images_root;     \/\/ rendering result is stored here$/;"	m	struct:ass_renderer	access:public
imgs	.\libass\ass_render.h	/^    ASS_Image *imgs;$/;"	m	struct:__anon42	access:public
index	.\libass\ass_fontselect.c	/^    int index;             \/\/ font index inside font collections$/;"	m	struct:font_info	file:	access:public
index_default	.\libass\ass_fontselect.c	/^    int index_default;$/;"	m	struct:font_selector	file:	access:public
init	.\profile\profile.c	/^static void init(int frame_w, int frame_h)$/;"	f	file:	signature:(int frame_w, int frame_h)
init	.\test\test.c	/^static void init(int frame_w, int frame_h)$/;"	f	file:	signature:(int frame_w, int frame_h)
init_FallbackLogTextRenderer	.\libass\ass_directwrite.c	/^static void init_FallbackLogTextRenderer(FallbackLogTextRenderer *r,$/;"	f	file:	signature:(FallbackLogTextRenderer *r, IDWriteFactory *factory)
init_features	.\libass\ass_shaper.c	/^static bool init_features(ASS_Shaper *shaper)$/;"	f	file:	signature:(ASS_Shaper *shaper)
init_font_private_face	.\libass\ass_directwrite.c	/^static bool init_font_private_face(FontPrivate *priv)$/;"	f	file:	signature:(FontPrivate *priv)
init_font_private_stream	.\libass\ass_directwrite.c	/^static bool init_font_private_stream(FontPrivate *priv)$/;"	f	file:	signature:(FontPrivate *priv)
init_font_scale	.\libass\ass_render.c	/^static void init_font_scale(ASS_Renderer *render_priv)$/;"	f	file:	signature:(ASS_Renderer *render_priv)
init_render_context	.\libass\ass_render.c	/^init_render_context(ASS_Renderer *render_priv, ASS_Event *event)$/;"	f	file:	signature:(ASS_Renderer *render_priv, ASS_Event *event)
inline	.\libass\ass_compat.h	26;"	d
int_to_d16	.\libass\ass_utils.h	/^static inline int int_to_d16(int x)$/;"	f	signature:(int x)
int_to_d6	.\libass\ass_utils.h	/^static inline int int_to_d6(int x)$/;"	f	signature:(int x)
interpolate_alpha	.\libass\ass_parse.c	/^interpolate_alpha(long long now, long long t1, long long t2, long long t3,$/;"	f	file:	signature:(long long now, long long t1, long long t2, long long t3, long long t4, int a1, int a2, int a3)
isSideways	.\libass\dwrite_c.h	/^  BOOL                      isSideways;$/;"	m	struct:DWRITE_GLYPH_RUN	access:public
is_new_bm_run	.\libass\ass_render.c	/^static int is_new_bm_run(GlyphInfo *info, GlyphInfo *last)$/;"	f	file:	signature:(GlyphInfo *info, GlyphInfo *last)
italic	.\libass\ass_font.h	/^    unsigned italic;$/;"	m	struct:ass_font_desc	access:public
italic	.\libass\ass_render.h	/^    unsigned italic;$/;"	m	struct:__anon47	access:public
italic	.\libass\ass_render.h	/^    unsigned italic;$/;"	m	struct:glyph_info	access:public
items	.\libass\ass_cache.c	/^    unsigned items;$/;"	m	struct:cache	file:	access:public
justify	.\libass\ass_render.h	/^    int justify;                \/\/ justify instructions$/;"	m	struct:__anon47	access:public
key_move_func	.\libass\ass_cache.h	/^    CacheKeyMove key_move_func;$/;"	m	struct:__anon21	access:public
key_size	.\libass\ass_cache.h	/^    size_t key_size;$/;"	m	struct:__anon21	access:public
language	.\libass\ass_shaper.c	/^    hb_language_t language;$/;"	m	struct:ass_shaper	file:	access:public
last_normal	.\libass\ass_outline.c	/^    ASS_DVector first_normal, last_normal;$/;"	m	struct:__anon28	file:	access:public
last_skip	.\libass\ass_outline.c	/^    int first_skip, last_skip;$/;"	m	struct:__anon28	file:	access:public
left	.\libass\ass_bitmap.h	/^    int left, top;$/;"	m	struct:__anon8	access:public
left	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:__anon42	access:public
left	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:render_priv	access:public
left_margin	.\libass\ass_render.h	/^    int left_margin;$/;"	m	struct:__anon41	access:public
len	.\libass\ass_outline.c	/^    double len;$/;"	m	struct:__anon27	file:	access:public
len	.\libass\ass_render.h	/^    int offset, len;$/;"	m	struct:__anon45	access:public
length	.\libass\ass_render.h	/^    int length;$/;"	m	struct:__anon46	access:public
length	.\libass\dwrite_c.h	/^  UINT32 length;$/;"	m	struct:DWRITE_TEXT_RANGE	access:public
level	.\libass\ass_blur.c	/^    int level, prefilter, filter;$/;"	m	struct:__anon9	file:	access:public
lib	.\libass\ass_fontselect.c	/^    ASS_Library *lib;$/;"	m	struct:font_data_ft	file:	access:public
library	.\libass\ass_drawing.h	/^    ASS_Library *library;$/;"	m	struct:__anon25	access:public
library	.\libass\ass_font.h	/^    ASS_Library *library;$/;"	m	struct:ass_font	access:public
library	.\libass\ass_render.h	/^    ASS_Library *library;$/;"	m	struct:ass_renderer	access:public
library	.\libass\ass_types.h	/^    ASS_Library *library;$/;"	m	struct:ass_track	access:public
libtool_options_prep	.\ltmain.sh	/^libtool_options_prep ()$/;"	f
libtool_parse_options	.\ltmain.sh	/^libtool_parse_options ()$/;"	f
libtool_validate_options	.\ltmain.sh	/^libtool_validate_options ()$/;"	f
lineGap	.\libass\dwrite_c.h	/^  INT16  lineGap;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
line_position	.\libass\ass_render.h	/^    double line_position;       \/\/ vertical position for subtitles, 0-100 (0 = no change)$/;"	m	struct:__anon41	access:public
line_spacing	.\libass\ass_render.h	/^    double line_spacing;        \/\/ additional line spacing (in frame pixels)$/;"	m	struct:__anon41	access:public
linebreak	.\libass\ass_render.h	/^    char linebreak;             \/\/ the first (leading) glyph of some line ?$/;"	m	struct:glyph_info	access:public
linebuf	.\libass\ass_rasterizer.h	/^    struct segment *linebuf[2];$/;"	m	struct:__anon39	typeref:struct:__anon39::segment	access:public
lines	.\libass\ass_render.h	/^    LineInfo *lines;$/;"	m	struct:__anon46	access:public
load_fonts_from_dir	.\libass\ass_fontselect.c	/^static void load_fonts_from_dir(ASS_Library *library, const char *dir)$/;"	f	file:	signature:(ASS_Library *library, const char *dir)
lookup_style	.\libass\ass_utils.c	/^int lookup_style(ASS_Track *track, char *name)$/;"	f	signature:(ASS_Track *track, char *name)
lookup_style	.\libass\ass_utils.h	/^int lookup_style(ASS_Track *track, char *name);$/;"	p	signature:(ASS_Track *track, char *name)
lookup_style_strict	.\libass\ass_utils.c	/^ASS_Style *lookup_style_strict(ASS_Track *track, char *name, size_t len)$/;"	f	signature:(ASS_Track *track, char *name, size_t len)
lookup_style_strict	.\libass\ass_utils.h	/^ASS_Style *lookup_style_strict(ASS_Track *track, char *name, size_t len);$/;"	p	signature:(ASS_Track *track, char *name, size_t len)
low_word_zero	.\libass\x86\be_blur.asm	/^low_word_zero: dd 0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF$/;"	d
lowertab	.\libass\ass_string.c	/^static const unsigned char lowertab[] = {$/;"	v	file:
main	.\profile\profile.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	.\test\test.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main_blur_horz	.\libass\ass_bitmap.h	/^    ParamFilterFunc main_blur_horz[3], main_blur_vert[3];$/;"	m	struct:__anon7	access:public
main_blur_vert	.\libass\ass_bitmap.h	/^    ParamFilterFunc main_blur_horz[3], main_blur_vert[3];$/;"	m	struct:__anon7	access:public
make_shadow_bitmap	.\libass\ass_render.c	/^static void make_shadow_bitmap(CombinedBitmapInfo *info, ASS_Renderer *render_priv)$/;"	f	file:	signature:(CombinedBitmapInfo *info, ASS_Renderer *render_priv)
map	.\libass\ass_cache.c	/^    CacheItem **map;$/;"	m	struct:cache	file:	access:public
map_width	.\libass\ass_directwrite.c	/^static int map_width(enum DWRITE_FONT_STRETCH stretch)$/;"	f	file:	signature:(enum DWRITE_FONT_STRETCH stretch)
match_fonts	.\libass\ass_coretext.c	/^static void match_fonts(ASS_Library *lib, ASS_FontProvider *provider,$/;"	f	file:	signature:(ASS_Library *lib, ASS_FontProvider *provider, char *name)
match_fonts	.\libass\ass_fontselect.h	/^    MatchFontsFunc      match_fonts;            \/* optional *\/$/;"	m	struct:font_provider_funcs	access:public
matches_family_name	.\libass\ass_fontselect.c	/^static bool matches_family_name(ASS_FontInfo *f, const char *family)$/;"	f	file:	signature:(ASS_FontInfo *f, const char *family)
matches_full_or_postscript_name	.\libass\ass_fontselect.c	/^static bool matches_full_or_postscript_name(ASS_FontInfo *f,$/;"	f	file:	signature:(ASS_FontInfo *f, const char *fullname)
maxExponent	.\libass\ass_strtod.c	/^const size_t maxExponent = 511; \/* Largest possible base 10 exponent.  Any$/;"	v	file:
max_bitmap_count	.\libass\ass_render.h	/^    size_t bitmap_count, max_bitmap_count;$/;"	m	struct:__anon44	access:public
max_bitmaps	.\libass\ass_render.h	/^    unsigned max_bitmaps;$/;"	m	struct:__anon46	access:public
max_events	.\libass\ass_types.h	/^    int max_events;$/;"	m	struct:ass_track	access:public
max_glyphs	.\libass\ass_render.h	/^    int max_glyphs;$/;"	m	struct:__anon46	access:public
max_lines	.\libass\ass_render.h	/^    int max_lines;$/;"	m	struct:__anon46	access:public
max_points	.\libass\ass_outline.h	/^    size_t n_points, max_points;$/;"	m	struct:__anon35	access:public
max_segments	.\libass\ass_outline.h	/^    size_t n_segments, max_segments;$/;"	m	struct:__anon35	access:public
max_styles	.\libass\ass_types.h	/^    int max_styles;         \/\/ amount allocated$/;"	m	struct:ass_track	access:public
measure_text	.\libass\ass_render.c	/^static void measure_text(ASS_Renderer *render_priv)$/;"	f	file:	signature:(ASS_Renderer *render_priv)
merge_cos	.\libass\ass_outline.c	/^    double merge_cos;$/;"	m	struct:__anon28	file:	access:public
metrics	.\libass\ass_cache.h	/^    FT_Glyph_Metrics metrics;$/;"	m	struct:__anon13	access:public
metrics_cache	.\libass\ass_shaper.c	/^    Cache *metrics_cache;$/;"	m	struct:ass_shaper	file:	access:public
metrics_cache	.\libass\ass_shaper.c	/^    Cache *metrics_cache;$/;"	m	struct:ass_shaper_metrics_data	file:	access:public
metrics_data	.\libass\ass_shaper.c	/^    struct ass_shaper_metrics_data *metrics_data[ASS_FONT_MAX_FACES];$/;"	m	struct:ass_shaper_font_data	typeref:struct:ass_shaper_font_data::ass_shaper_metrics_data	file:	access:public
min_len	.\libass\ass_outline.c	/^    double min_len;$/;"	m	struct:__anon28	file:	access:public
misses	.\libass\ass_cache.c	/^    unsigned misses;$/;"	m	struct:cache	file:	access:public
msg_callback	.\libass\ass_library.h	/^    void (*msg_callback)(int, const char *, va_list, void *);$/;"	m	struct:ass_library	access:public
msg_callback	.\profile\profile.c	/^void msg_callback(int level, const char *fmt, va_list va, void *data)$/;"	f	signature:(int level, const char *fmt, va_list va, void *data)
msg_callback	.\test\test.c	/^void msg_callback(int level, const char *fmt, va_list va, void *data)$/;"	f	signature:(int level, const char *fmt, va_list va, void *data)
msg_callback_data	.\libass\ass_library.h	/^    void *msg_callback_data;$/;"	m	struct:ass_library	access:public
mul_bitmaps	.\libass\ass_bitmap.h	/^    BitmapMulFunc mul_bitmaps;$/;"	m	struct:__anon7	access:public
mul_bitmaps	.\libass\ass_func_template.h	/^void DECORATE(mul_bitmaps)(uint8_t *dst, intptr_t dst_stride,$/;"	p	signature:(uint8_t *dst, intptr_t dst_stride, uint8_t *src1, intptr_t src1_stride, uint8_t *src2, intptr_t src2_stride, intptr_t width, intptr_t height)
mult_alpha	.\libass\ass_parse.c	/^inline uint32_t mult_alpha(uint32_t a, uint32_t b)$/;"	f	signature:(uint32_t a, uint32_t b)
mult_alpha	.\libass\ass_parse.h	/^extern uint32_t mult_alpha(uint32_t a, uint32_t b);$/;"	p	signature:(uint32_t a, uint32_t b)
my_draw_bitmap	.\libass\ass_render.c	/^static ASS_Image *my_draw_bitmap(unsigned char *bitmap, int bitmap_w,$/;"	f	file:	signature:(unsigned char *bitmap, int bitmap_w, int bitmap_h, int stride, int dst_x, int dst_y, uint32_t color, CompositeHashValue *source)
mystrcmp	.\libass\ass_parse.c	/^static inline int mystrcmp(char **p, const char *sample)$/;"	f	file:	signature:(char **p, const char *sample)
mystrtod	.\libass\ass_utils.c	/^int mystrtod(char **p, double *res)$/;"	f	signature:(char **p, double *res)
mystrtod	.\libass\ass_utils.h	/^int mystrtod(char **p, double *res);$/;"	p	signature:(char **p, double *res)
mystrtoi	.\libass\ass_utils.c	/^int mystrtoi(char **p, int *res)$/;"	f	signature:(char **p, int *res)
mystrtoi	.\libass\ass_utils.h	/^int mystrtoi(char **p, int *res);$/;"	p	signature:(char **p, int *res)
mystrtoi32	.\libass\ass_utils.c	/^int mystrtoi32(char **p, int base, int32_t *res)$/;"	f	signature:(char **p, int base, int32_t *res)
mystrtoi32	.\libass\ass_utils.h	/^int mystrtoi32(char **p, int base, int32_t *res);$/;"	p	signature:(char **p, int base, int32_t *res)
mystrtoll	.\libass\ass_utils.c	/^int mystrtoll(char **p, long long *res)$/;"	f	signature:(char **p, long long *res)
mystrtoll	.\libass\ass_utils.h	/^int mystrtoll(char **p, long long *res);$/;"	p	signature:(char **p, long long *res)
mystrtou32_modulo	.\libass\ass_utils.c	/^static int mystrtou32_modulo(char **p, int base, uint32_t *res)$/;"	f	file:	signature:(char **p, int base, uint32_t *res)
n_bitmaps	.\libass\ass_render.h	/^    unsigned n_bitmaps;$/;"	m	struct:__anon46	access:public
n_bm	.\libass\ass_render.h	/^    size_t n_bm, n_bm_o;$/;"	m	struct:__anon44	access:public
n_bm_o	.\libass\ass_render.h	/^    size_t n_bm, n_bm_o;$/;"	m	struct:__anon44	access:public
n_events	.\libass\ass_types.h	/^    int n_events;$/;"	m	struct:ass_track	access:public
n_faces	.\libass\ass_font.h	/^    int n_faces;$/;"	m	struct:ass_font	access:public
n_family	.\libass\ass_fontselect.c	/^    int n_family;$/;"	m	struct:font_info	file:	access:public
n_family	.\libass\ass_fontselect.h	/^    int n_family;       \/\/ Number of localized family names$/;"	m	struct:ass_font_provider_meta_data	access:public
n_features	.\libass\ass_shaper.c	/^    int n_features;$/;"	m	struct:ass_shaper	file:	access:public
n_first	.\libass\ass_rasterizer.h	/^    size_t n_first;$/;"	m	struct:__anon39	access:public
n_font	.\libass\ass_fontselect.c	/^    int n_font;$/;"	m	struct:font_selector	file:	access:public
n_fullname	.\libass\ass_fontselect.c	/^    int n_fullname;$/;"	m	struct:font_info	file:	access:public
n_fullname	.\libass\ass_fontselect.h	/^    int n_fullname;     \/\/ Number of localized full names$/;"	m	struct:ass_font_provider_meta_data	access:public
n_glyphs	.\libass\ass_shaper.c	/^    int n_glyphs;$/;"	m	struct:ass_shaper	file:	access:public
n_lines	.\libass\ass_render.h	/^    int n_lines;$/;"	m	struct:__anon46	access:public
n_points	.\libass\ass_outline.h	/^    size_t n_points, max_points;$/;"	m	struct:__anon35	access:public
n_segments	.\libass\ass_outline.h	/^    size_t n_segments, max_segments;$/;"	m	struct:__anon35	access:public
n_styles	.\libass\ass_types.h	/^    int n_styles;           \/\/ amount used$/;"	m	struct:ass_track	access:public
name	.\libass\ass_fontselect.c	/^    const char *name;$/;"	m	struct:font_constructors	file:	access:public
name	.\libass\ass_library.h	/^    char *name;$/;"	m	struct:__anon26	access:public
name	.\libass\ass_types.h	/^    char *name;             \/\/ file name in case of external subs, 0 for streams$/;"	m	struct:ass_track	access:public
negPowOf10	.\libass\ass_strtod.c	/^const double negPowOf10[] = {   \/* Table giving negative binary powers *\/$/;"	v	file:
next	.\libass\ass.h	/^    struct ass_image *next;   \/\/ Next image, or NULL$/;"	m	struct:ass_image	typeref:struct:ass_image::ass_image	access:public
next	.\libass\ass_cache.c	/^    struct cache_item *next, **prev;$/;"	m	struct:cache_item	typeref:struct:cache_item::cache_item	file:	access:public
next	.\libass\ass_drawing.h	/^    struct ass_drawing_token *next;$/;"	m	struct:ass_drawing_token	typeref:struct:ass_drawing_token::ass_drawing_token	access:public
next	.\libass\ass_render.h	/^    struct glyph_info *next;$/;"	m	struct:glyph_info	typeref:struct:glyph_info::glyph_info	access:public
next_token	.\libass\ass.c	/^static char *next_token(char **str)$/;"	f	file:	signature:(char **str)
num_fontdata	.\libass\ass_library.h	/^    int num_fontdata;$/;"	m	struct:ass_library	access:public
numpad2align	.\libass\ass_utils.c	/^int numpad2align(int val)$/;"	f	signature:(int val)
numpad2align	.\libass\ass_utils.h	/^int numpad2align(int val);$/;"	p	signature:(int val)
offset	.\libass\ass_render.h	/^    ASS_Vector offset;$/;"	m	struct:glyph_info	access:public
offset	.\libass\ass_render.h	/^    int offset, len;$/;"	m	struct:__anon45	access:public
org_x	.\libass\ass_render.h	/^    double org_x, org_y;        \/\/ origin$/;"	m	struct:__anon47	access:public
org_y	.\libass\ass_render.h	/^    double org_x, org_y;        \/\/ origin$/;"	m	struct:__anon47	access:public
orig_height	.\libass\ass_render.h	/^    int orig_height;            \/\/ frame height ( = screen height - margins )$/;"	m	struct:ass_renderer	access:public
orig_height_nocrop	.\libass\ass_render.h	/^    int orig_height_nocrop;     \/\/ frame height ( = screen height - margins + cropheight)$/;"	m	struct:ass_renderer	access:public
orig_scale_x	.\libass\ass_render.h	/^    double orig_scale_x, orig_scale_y; \/\/ scale_x,y before fix_glyph_scaling$/;"	m	struct:glyph_info	access:public
orig_scale_y	.\libass\ass_render.h	/^    double orig_scale_x, orig_scale_y; \/\/ scale_x,y before fix_glyph_scaling$/;"	m	struct:glyph_info	access:public
orig_width	.\libass\ass_render.h	/^    int orig_width;             \/\/ frame width ( = screen width - margins )$/;"	m	struct:ass_renderer	access:public
orig_width_nocrop	.\libass\ass_render.h	/^    int orig_width_nocrop;      \/\/ frame width ( = screen width - margins + cropwidth)$/;"	m	struct:ass_renderer	access:public
outline	.\libass\ass_cache.h	/^        OutlineBitmapHashKey outline;$/;"	m	union:bitmap_hash_key::__anon17	access:public
outline	.\libass\ass_cache.h	/^    ASS_Outline outline;$/;"	m	struct:__anon12	access:public
outline	.\libass\ass_drawing.h	/^    ASS_Outline outline; \/\/ target outline$/;"	m	struct:__anon25	access:public
outline	.\libass\ass_render.h	/^    ASS_Outline *outline;$/;"	m	struct:glyph_info	access:public
outline_add_point	.\libass\ass_outline.c	/^bool outline_add_point(ASS_Outline *outline, ASS_Vector pt, char segment)$/;"	f	signature:(ASS_Outline *outline, ASS_Vector pt, char segment)
outline_add_point	.\libass\ass_outline.h	/^bool outline_add_point(ASS_Outline *outline, ASS_Vector pt, char segment);$/;"	p	signature:(ASS_Outline *outline, ASS_Vector pt, char segment)
outline_add_segment	.\libass\ass_outline.c	/^bool outline_add_segment(ASS_Outline *outline, char segment)$/;"	f	signature:(ASS_Outline *outline, char segment)
outline_add_segment	.\libass\ass_outline.h	/^bool outline_add_segment(ASS_Outline *outline, char segment);$/;"	p	signature:(ASS_Outline *outline, char segment)
outline_adjust	.\libass\ass_outline.c	/^void outline_adjust(const ASS_Outline *outline, double scale_x, int32_t dx, int32_t dy)$/;"	f	signature:(const ASS_Outline *outline, double scale_x, int32_t dx, int32_t dy)
outline_adjust	.\libass\ass_outline.h	/^void outline_adjust(const ASS_Outline *outline, double scale_x, int32_t dx, int32_t dy);$/;"	p	signature:(const ASS_Outline *outline, double scale_x, int32_t dx, int32_t dy)
outline_alloc	.\libass\ass_outline.c	/^bool outline_alloc(ASS_Outline *outline, size_t n_points, size_t n_segments)$/;"	f	signature:(ASS_Outline *outline, size_t n_points, size_t n_segments)
outline_alloc	.\libass\ass_outline.h	/^bool outline_alloc(ASS_Outline *outline, size_t n_points, size_t n_segments);$/;"	p	signature:(ASS_Outline *outline, size_t n_points, size_t n_segments)
outline_cache	.\libass\ass_render.h	/^    Cache *outline_cache;$/;"	m	struct:__anon50	access:public
outline_cache_desc	.\libass\ass_cache.c	/^const CacheDesc outline_cache_desc = {$/;"	v
outline_clear	.\libass\ass_outline.c	/^static void outline_clear(ASS_Outline *outline)$/;"	f	file:	signature:(ASS_Outline *outline)
outline_close_contour	.\libass\ass_outline.c	/^bool outline_close_contour(ASS_Outline *outline)$/;"	f	signature:(ASS_Outline *outline)
outline_close_contour	.\libass\ass_outline.h	/^bool outline_close_contour(ASS_Outline *outline);$/;"	p	signature:(ASS_Outline *outline)
outline_compare	.\libass\ass_cache.c	/^static unsigned outline_compare(void *a, void *b, size_t key_size)$/;"	f	file:	signature:(void *a, void *b, size_t key_size)
outline_convert	.\libass\ass_outline.c	/^bool outline_convert(ASS_Outline *outline, const FT_Outline *source)$/;"	f	signature:(ASS_Outline *outline, const FT_Outline *source)
outline_convert	.\libass\ass_outline.h	/^bool outline_convert(ASS_Outline *outline, const FT_Outline *source);$/;"	p	signature:(ASS_Outline *outline, const FT_Outline *source)
outline_copy	.\libass\ass_outline.c	/^bool outline_copy(ASS_Outline *outline, const ASS_Outline *source)$/;"	f	signature:(ASS_Outline *outline, const ASS_Outline *source)
outline_copy	.\libass\ass_outline.h	/^bool outline_copy(ASS_Outline *outline, const ASS_Outline *source);$/;"	p	signature:(ASS_Outline *outline, const ASS_Outline *source)
outline_destruct	.\libass\ass_cache.c	/^static void outline_destruct(void *key, void *value)$/;"	f	file:	signature:(void *key, void *value)
outline_error	.\libass\ass_rasterizer.h	/^    int outline_error;  \/\/ acceptable error (in 1\/64 pixel units)$/;"	m	struct:__anon39	access:public
outline_free	.\libass\ass_outline.c	/^void outline_free(ASS_Outline *outline)$/;"	f	signature:(ASS_Outline *outline)
outline_free	.\libass\ass_outline.h	/^void outline_free(ASS_Outline *outline);$/;"	p	signature:(ASS_Outline *outline)
outline_get_cbox	.\libass\ass_outline.c	/^void outline_get_cbox(const ASS_Outline *outline, ASS_Rect *cbox)$/;"	f	signature:(const ASS_Outline *outline, ASS_Rect *cbox)
outline_get_cbox	.\libass\ass_outline.h	/^void outline_get_cbox(const ASS_Outline *outline, ASS_Rect *cbox);$/;"	p	signature:(const ASS_Outline *outline, ASS_Rect *cbox)
outline_hash	.\libass\ass_cache.c	/^static unsigned outline_hash(void *key, size_t key_size)$/;"	f	file:	signature:(void *key, size_t key_size)
outline_hash_key	.\libass\ass_cache.h	/^typedef struct outline_hash_key {$/;"	s
outline_hash_key::OUTLINE_DRAWING	.\libass\ass_cache.h	/^        OUTLINE_DRAWING,$/;"	e	enum:outline_hash_key::__anon14
outline_hash_key::OUTLINE_GLYPH	.\libass\ass_cache.h	/^        OUTLINE_GLYPH,$/;"	e	enum:outline_hash_key::__anon14
outline_hash_key::__anon15::drawing	.\libass\ass_cache.h	/^        DrawingHashKey drawing;$/;"	m	union:outline_hash_key::__anon15	access:public
outline_hash_key::__anon15::glyph	.\libass\ass_cache.h	/^        GlyphHashKey glyph;$/;"	m	union:outline_hash_key::__anon15	access:public
outline_hash_key::type	.\libass\ass_cache.h	/^    } type;$/;"	m	struct:outline_hash_key	typeref:enum:outline_hash_key::__anon14	access:public
outline_hash_key::u	.\libass\ass_cache.h	/^    } u;$/;"	m	struct:outline_hash_key	typeref:union:outline_hash_key::__anon15	access:public
outline_key_move	.\libass\ass_cache.c	/^static bool outline_key_move(void *dst, void *src, size_t key_size)$/;"	f	file:	signature:(void *dst, void *src, size_t key_size)
outline_stroke	.\libass\ass_outline.c	/^bool outline_stroke(ASS_Outline *result, ASS_Outline *result1,$/;"	f	signature:(ASS_Outline *result, ASS_Outline *result1, const ASS_Outline *path, int xbord, int ybord, int eps)
outline_stroke	.\libass\ass_outline.h	/^bool outline_stroke(ASS_Outline *result, ASS_Outline *result1,$/;"	p	signature:(ASS_Outline *result, ASS_Outline *result1, const ASS_Outline *path, int xbord, int ybord, int eps)
outline_to_bitmap	.\libass\ass_bitmap.c	/^Bitmap *outline_to_bitmap(ASS_Renderer *render_priv,$/;"	f	signature:(ASS_Renderer *render_priv, ASS_Outline *outline1, ASS_Outline *outline2, int bord)
outline_to_bitmap	.\libass\ass_bitmap.h	/^Bitmap *outline_to_bitmap(ASS_Renderer *render_priv,$/;"	p	signature:(ASS_Renderer *render_priv, ASS_Outline *outline1, ASS_Outline *outline2, int bord)
outline_to_bitmap2	.\libass\ass_bitmap.c	/^bool outline_to_bitmap2(ASS_Renderer *render_priv, ASS_Outline *outline,$/;"	f	signature:(ASS_Renderer *render_priv, ASS_Outline *outline, ASS_Outline *border1, ASS_Outline *border2, Bitmap **bm_g, Bitmap **bm_o)
outline_to_bitmap2	.\libass\ass_bitmap.h	/^bool outline_to_bitmap2(ASS_Renderer *render_priv, ASS_Outline *outline,$/;"	p	signature:(ASS_Renderer *render_priv, ASS_Outline *outline, ASS_Outline *border1, ASS_Outline *border2, Bitmap **bm_g, Bitmap **bm_o)
outline_translate	.\libass\ass_outline.c	/^void outline_translate(const ASS_Outline *outline, int32_t dx, int32_t dy)$/;"	f	signature:(const ASS_Outline *outline, int32_t dx, int32_t dy)
outline_translate	.\libass\ass_outline.h	/^void outline_translate(const ASS_Outline *outline, int32_t dx, int32_t dy);$/;"	p	signature:(const ASS_Outline *outline, int32_t dx, int32_t dy)
overlap	.\libass\ass_render.c	/^static int overlap(Segment *s1, Segment *s2)$/;"	f	file:	signature:(Segment *s1, Segment *s2)
override_style_temp_storage	.\libass\ass_render.h	/^    ASS_Style override_style_temp_storage;$/;"	m	struct:__anon47	access:public
overrides	.\libass\ass_render.h	/^    unsigned overrides;$/;"	m	struct:__anon47	access:public
par	.\libass\ass_render.h	/^    double par;                 \/\/ user defined pixel aspect ratio (0 = unset)$/;"	m	struct:__anon41	access:public
parent	.\libass\ass_fontselect.c	/^    ASS_FontSelector *parent;$/;"	m	struct:font_provider	file:	access:public
parse_alpha_tag	.\libass\ass_utils.c	/^int32_t parse_alpha_tag(char *str)$/;"	f	signature:(char *str)
parse_alpha_tag	.\libass\ass_utils.h	/^int32_t parse_alpha_tag(char *str);$/;"	p	signature:(char *str)
parse_bool	.\libass\ass_utils.c	/^char parse_bool(char *str)$/;"	f	signature:(char *str)
parse_bool	.\libass\ass_utils.h	/^char parse_bool(char *str);$/;"	p	signature:(char *str)
parse_color_header	.\libass\ass_utils.c	/^uint32_t parse_color_header(char *str)$/;"	f	signature:(char *str)
parse_color_header	.\libass\ass_utils.h	/^uint32_t parse_color_header(char *str);$/;"	p	signature:(char *str)
parse_color_tag	.\libass\ass_utils.c	/^uint32_t parse_color_tag(char *str)$/;"	f	signature:(char *str)
parse_color_tag	.\libass\ass_utils.h	/^uint32_t parse_color_tag(char *str);$/;"	p	signature:(char *str)
parse_events	.\libass\ass_render.c	/^static int parse_events(ASS_Renderer *render_priv, ASS_Event *event)$/;"	f	file:	signature:(ASS_Renderer *render_priv, ASS_Event *event)
parse_memory	.\libass\ass.c	/^static ASS_Track *parse_memory(ASS_Library *library, char *buf)$/;"	f	file:	signature:(ASS_Library *library, char *buf)
parse_tags	.\libass\ass_parse.c	/^char *parse_tags(ASS_Renderer *render_priv, char *p, char *end, double pwr,$/;"	f	signature:(ASS_Renderer *render_priv, char *p, char *end, double pwr, bool nested)
parse_tags	.\libass\ass_parse.h	/^char *parse_tags(ASS_Renderer *render_priv, char *p, char *end, double pwr,$/;"	p	signature:(ASS_Renderer *render_priv, char *p, char *end, double pwr, bool nested)
parse_vector_clip	.\libass\ass_parse.c	/^static int parse_vector_clip(ASS_Renderer *render_priv,$/;"	f	file:	signature:(ASS_Renderer *render_priv, struct arg *args, int nargs)
parse_ycbcr_matrix	.\libass\ass_utils.c	/^int parse_ycbcr_matrix(char *str)$/;"	f	signature:(char *str)
parse_ycbcr_matrix	.\libass\ass_utils.h	/^int parse_ycbcr_matrix(char *str);$/;"	p	signature:(char *str)
parsed_tags	.\libass\ass_render.h	/^    int parsed_tags;$/;"	m	struct:__anon47	access:public
parser_priv	.\libass\ass.c	/^struct parser_priv {$/;"	s	file:
parser_priv	.\libass\ass_types.h	/^    ASS_ParserPriv *parser_priv;$/;"	m	struct:ass_track	access:public
parser_priv::check_readorder	.\libass\ass.c	/^    int check_readorder;$/;"	m	struct:parser_priv	file:	access:public
parser_priv::fontdata	.\libass\ass.c	/^    char *fontdata;$/;"	m	struct:parser_priv	file:	access:public
parser_priv::fontdata_size	.\libass\ass.c	/^    int fontdata_size;$/;"	m	struct:parser_priv	file:	access:public
parser_priv::fontdata_used	.\libass\ass.c	/^    int fontdata_used;$/;"	m	struct:parser_priv	file:	access:public
parser_priv::fontname	.\libass\ass.c	/^    char *fontname;$/;"	m	struct:parser_priv	file:	access:public
parser_priv::read_order_bitmap	.\libass\ass.c	/^    uint32_t *read_order_bitmap;$/;"	m	struct:parser_priv	file:	access:public
parser_priv::read_order_elems	.\libass\ass.c	/^    int read_order_elems; \/\/ size in uint32_t units of read_order_bitmap$/;"	m	struct:parser_priv	file:	access:public
parser_priv::state	.\libass\ass.c	/^    ParserState state;$/;"	m	struct:parser_priv	file:	access:public
path	.\libass\ass_fontselect.c	/^    char *path;            \/\/ absolute path$/;"	m	struct:font_info	file:	access:public
path_default	.\libass\ass_fontselect.c	/^    char *path_default;$/;"	m	struct:font_selector	file:	access:public
pbo	.\libass\ass_drawing.h	/^    double pbo; \/\/ drawing will be shifted in y direction by this amount$/;"	m	struct:__anon25	access:public
pbo	.\libass\ass_render.h	/^    double pbo;                 \/\/ drawing baseline offset$/;"	m	struct:__anon47	access:public
point	.\libass\ass_drawing.h	/^    ASS_Vector point;$/;"	m	struct:ass_drawing_token	access:public
point_scale_x	.\libass\ass_drawing.h	/^    double point_scale_x;$/;"	m	struct:__anon25	access:public
point_scale_y	.\libass\ass_drawing.h	/^    double point_scale_y;$/;"	m	struct:__anon25	access:public
points	.\libass\ass_outline.h	/^    ASS_Vector *points;$/;"	m	struct:__anon35	access:public
polyline_split_horz	.\libass\ass_rasterizer.c	/^static void polyline_split_horz(const struct segment *src, const size_t n_src[2],$/;"	f	file:	signature:(const struct segment *src, const size_t n_src[2], struct segment *dst0, size_t n_dst0[2], struct segment *dst1, size_t n_dst1[2], int winding[2], int32_t x)
polyline_split_vert	.\libass\ass_rasterizer.c	/^static void polyline_split_vert(const struct segment *src, const size_t n_src[2],$/;"	f	file:	signature:(const struct segment *src, const size_t n_src[2], struct segment *dst0, size_t n_dst0[2], struct segment *dst1, size_t n_dst1[2], int winding[2], int32_t y)
pos	.\libass\ass_render.h	/^    ASS_Vector pos;$/;"	m	struct:glyph_info	access:public
pos_x	.\libass\ass_render.h	/^    double pos_x, pos_y;        \/\/ position$/;"	m	struct:__anon47	access:public
pos_y	.\libass\ass_render.h	/^    double pos_x, pos_y;        \/\/ position$/;"	m	struct:__anon47	access:public
postscript_name	.\libass\ass_fontselect.c	/^    char *postscript_name; \/\/ can be used as an alternative to index to$/;"	m	struct:font_info	file:	access:public
postscript_name	.\libass\ass_fontselect.h	/^    char *postscript_name;$/;"	m	struct:ass_font_provider_meta_data	access:public
powersOf10	.\libass\ass_strtod.c	/^const double powersOf10[] = {   \/* Table giving binary powers of 10.  Entry *\/$/;"	v	file:
pre_blur1_func	.\libass\ass_blur.c	/^static inline int16_t pre_blur1_func(int16_t p1, int16_t z0, int16_t n1)$/;"	f	file:	signature:(int16_t p1, int16_t z0, int16_t n1)
pre_blur1_horz	.\libass\ass_func_template.h	/^void DECORATE(pre_blur1_horz)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
pre_blur1_vert	.\libass\ass_func_template.h	/^void DECORATE(pre_blur1_vert)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
pre_blur2_func	.\libass\ass_blur.c	/^static inline int16_t pre_blur2_func(int16_t p2, int16_t p1, int16_t z0,$/;"	f	file:	signature:(int16_t p2, int16_t p1, int16_t z0, int16_t n1, int16_t n2)
pre_blur2_horz	.\libass\ass_func_template.h	/^void DECORATE(pre_blur2_horz)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
pre_blur2_vert	.\libass\ass_func_template.h	/^void DECORATE(pre_blur2_vert)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
pre_blur3_func	.\libass\ass_blur.c	/^static inline int16_t pre_blur3_func(int16_t p3, int16_t p2, int16_t p1, int16_t z0,$/;"	f	file:	signature:(int16_t p3, int16_t p2, int16_t p1, int16_t z0, int16_t n1, int16_t n2, int16_t n3)
pre_blur3_horz	.\libass\ass_func_template.h	/^void DECORATE(pre_blur3_horz)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
pre_blur3_vert	.\libass\ass_func_template.h	/^void DECORATE(pre_blur3_vert)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
pre_blur_horz	.\libass\ass_bitmap.h	/^    FilterFunc pre_blur_horz[3], pre_blur_vert[3];$/;"	m	struct:__anon7	access:public
pre_blur_vert	.\libass\ass_bitmap.h	/^    FilterFunc pre_blur_horz[3], pre_blur_vert[3];$/;"	m	struct:__anon7	access:public
prefilter	.\libass\ass_blur.c	/^    int level, prefilter, filter;$/;"	m	struct:__anon9	file:	access:public
preliminary_layout	.\libass\ass_render.c	/^static void preliminary_layout(ASS_Renderer *render_priv)$/;"	f	file:	signature:(ASS_Renderer *render_priv)
prepare_skip	.\libass\ass_outline.c	/^static bool prepare_skip(StrokerState *str, ASS_Vector pt, int dir, bool first)$/;"	f	file:	signature:(StrokerState *str, ASS_Vector pt, int dir, bool first)
prev	.\libass\ass_cache.c	/^    struct cache_item *next, **prev;$/;"	m	struct:cache_item	typeref:struct:cache_item::	file:	access:public
prev	.\libass\ass_drawing.h	/^    struct ass_drawing_token *prev;$/;"	m	struct:ass_drawing_token	typeref:struct:ass_drawing_token::ass_drawing_token	access:public
prev_images_root	.\libass\ass_render.h	/^    ASS_Image *prev_images_root;$/;"	m	struct:ass_renderer	access:public
print_font_providers	.\test\test.c	/^static void print_font_providers(ASS_Library *ass_library)$/;"	f	file:	signature:(ASS_Library *ass_library)
priv	.\libass\ass_fontselect.c	/^    void *priv;$/;"	m	struct:font_info	file:	access:public
priv	.\libass\ass_fontselect.c	/^    void *priv;$/;"	m	struct:font_provider	file:	access:public
priv	.\libass\ass_fontselect.h	/^    void *priv;$/;"	m	struct:ass_font_stream	access:public
process_arc	.\libass\ass_outline.c	/^static bool process_arc(StrokerState *str, ASS_Vector pt,$/;"	f	file:	signature:(StrokerState *str, ASS_Vector pt, ASS_DVector normal0, ASS_DVector normal1, const double *mul, int level, int dir)
process_cubic	.\libass\ass_outline.c	/^static bool process_cubic(StrokerState *str, const ASS_Vector *pt,$/;"	f	file:	signature:(StrokerState *str, const ASS_Vector *pt, const ASS_DVector *deriv, const Normal *normal, int dir, bool first)
process_descriptors	.\libass\ass_coretext.c	/^static void process_descriptors(ASS_FontProvider *provider, CFArrayRef fontsd)$/;"	f	file:	signature:(ASS_FontProvider *provider, CFArrayRef fontsd)
process_event_tail	.\libass\ass.c	/^static int process_event_tail(ASS_Track *track, ASS_Event *event,$/;"	f	file:	signature:(ASS_Track *track, ASS_Event *event, char *str, int n_ignored)
process_events_line	.\libass\ass.c	/^static int process_events_line(ASS_Track *track, char *str)$/;"	f	file:	signature:(ASS_Track *track, char *str)
process_fontdata	.\libass\ass_fontselect.c	/^static void process_fontdata(ASS_FontProvider *priv, ASS_Library *library,$/;"	f	file:	signature:(ASS_FontProvider *priv, ASS_Library *library, FT_Library ftlibrary, int idx)
process_fonts_line	.\libass\ass.c	/^static int process_fonts_line(ASS_Track *track, char *str)$/;"	f	file:	signature:(ASS_Track *track, char *str)
process_info_line	.\libass\ass.c	/^static int process_info_line(ASS_Track *track, char *str)$/;"	f	file:	signature:(ASS_Track *track, char *str)
process_karaoke_effects	.\libass\ass_parse.c	/^void process_karaoke_effects(ASS_Renderer *render_priv)$/;"	f	signature:(ASS_Renderer *render_priv)
process_karaoke_effects	.\libass\ass_parse.h	/^void process_karaoke_effects(ASS_Renderer *render_priv);$/;"	p	signature:(ASS_Renderer *render_priv)
process_line	.\libass\ass.c	/^static int process_line(ASS_Track *track, char *str)$/;"	f	file:	signature:(ASS_Track *track, char *str)
process_quadratic	.\libass\ass_outline.c	/^static bool process_quadratic(StrokerState *str, const ASS_Vector *pt,$/;"	f	file:	signature:(StrokerState *str, const ASS_Vector *pt, const ASS_DVector *deriv, const Normal *normal, int dir, bool first)
process_style	.\libass\ass.c	/^static int process_style(ASS_Track *track, char *str)$/;"	f	file:	signature:(ASS_Track *track, char *str)
process_styles_line	.\libass\ass.c	/^static int process_styles_line(ASS_Track *track, char *str)$/;"	f	file:	signature:(ASS_Track *track, char *str)
process_text	.\libass\ass.c	/^static int process_text(ASS_Track *track, char *str)$/;"	f	file:	signature:(ASS_Track *track, char *str)
provider	.\libass\ass_fontselect.c	/^    ASS_FontProvider *provider;$/;"	m	struct:font_info	file:	access:public
push_arg	.\libass\ass_parse.c	/^static inline void push_arg(struct arg *args, int *nargs, char *start, char *end)$/;"	f	file:	signature:(struct arg *args, int *nargs, char *start, char *end)
queue_first	.\libass\ass_cache.c	/^    CacheItem *queue_first, **queue_last;$/;"	m	struct:cache	file:	access:public
queue_last	.\libass\ass_cache.c	/^    CacheItem *queue_first, **queue_last;$/;"	m	struct:cache	file:	access:public
queue_next	.\libass\ass_cache.c	/^    struct cache_item *queue_next, **queue_prev;$/;"	m	struct:cache_item	typeref:struct:cache_item::cache_item	file:	access:public
queue_prev	.\libass\ass_cache.c	/^    struct cache_item *queue_next, **queue_prev;$/;"	m	struct:cache_item	typeref:struct:cache_item::	file:	access:public
r	.\libass\ass_rasterizer.c	/^    ASS_Vector r;$/;"	m	struct:__anon36	file:	access:public
r2	.\libass\ass_rasterizer.c	/^    int64_t r2, er;$/;"	m	struct:__anon36	file:	access:public
rasterizer	.\libass\ass_render.h	/^    RasterizerData rasterizer;$/;"	m	struct:ass_renderer	access:public
rasterizer_done	.\libass\ass_rasterizer.c	/^void rasterizer_done(RasterizerData *rst)$/;"	f	signature:(RasterizerData *rst)
rasterizer_done	.\libass\ass_rasterizer.h	/^void rasterizer_done(RasterizerData *rst);$/;"	p	signature:(RasterizerData *rst)
rasterizer_fill	.\libass\ass_rasterizer.c	/^bool rasterizer_fill(const BitmapEngine *engine, RasterizerData *rst,$/;"	f	signature:(const BitmapEngine *engine, RasterizerData *rst, uint8_t *buf, int x0, int y0, int width, int height, ptrdiff_t stride)
rasterizer_fill	.\libass\ass_rasterizer.h	/^bool rasterizer_fill(const BitmapEngine *engine, RasterizerData *rst,$/;"	p	signature:(const BitmapEngine *engine, RasterizerData *rst, uint8_t *buf, int x0, int y0, int width, int height, ptrdiff_t stride)
rasterizer_fill_halfplane	.\libass\ass_rasterizer.c	/^static inline void rasterizer_fill_halfplane(const BitmapEngine *engine,$/;"	f	file:	signature:(const BitmapEngine *engine, uint8_t *buf, int width, int height, ptrdiff_t stride, int32_t a, int32_t b, int64_t c, int32_t scale)
rasterizer_fill_level	.\libass\ass_rasterizer.c	/^static bool rasterizer_fill_level(const BitmapEngine *engine, RasterizerData *rst,$/;"	f	file:	signature:(const BitmapEngine *engine, RasterizerData *rst, uint8_t *buf, int width, int height, ptrdiff_t stride, int index, const size_t n_lines[2], const int winding[2])
rasterizer_fill_solid	.\libass\ass_rasterizer.c	/^static inline void rasterizer_fill_solid(const BitmapEngine *engine,$/;"	f	file:	signature:(const BitmapEngine *engine, uint8_t *buf, int width, int height, ptrdiff_t stride, int set)
rasterizer_init	.\libass\ass_rasterizer.c	/^bool rasterizer_init(RasterizerData *rst, int tile_order, int outline_error)$/;"	f	signature:(RasterizerData *rst, int tile_order, int outline_error)
rasterizer_init	.\libass\ass_rasterizer.h	/^bool rasterizer_init(RasterizerData *rst, int tile_order, int outline_error);$/;"	p	signature:(RasterizerData *rst, int tile_order, int outline_error)
rasterizer_set_outline	.\libass\ass_rasterizer.c	/^bool rasterizer_set_outline(RasterizerData *rst,$/;"	f	signature:(RasterizerData *rst, const ASS_Outline *path, bool extra)
rasterizer_set_outline	.\libass\ass_rasterizer.h	/^bool rasterizer_set_outline(RasterizerData *rst,$/;"	p	signature:(RasterizerData *rst, const ASS_Outline *path, bool extra)
read_digits	.\libass\ass_utils.c	/^static int read_digits(char **str, int base, uint32_t *res)$/;"	f	file:	signature:(char **str, int base, uint32_t *res)
read_file	.\libass\ass.c	/^char *read_file(ASS_Library *library, char *fname, size_t *bufsize)$/;"	f	signature:(ASS_Library *library, char *fname, size_t *bufsize)
read_file	.\libass\ass_library.h	/^char *read_file(struct ass_library *library, char *fname, size_t *bufsize);$/;"	p	signature:(struct ass_library *library, char *fname, size_t *bufsize)
read_file_recode	.\libass\ass.c	/^static char *read_file_recode(ASS_Library *library, char *fname,$/;"	f	file:	signature:(ASS_Library *library, char *fname, char *codepage, size_t *size)
read_order_bitmap	.\libass\ass.c	/^    uint32_t *read_order_bitmap;$/;"	m	struct:parser_priv	file:	access:public
read_order_elems	.\libass\ass.c	/^    int read_order_elems; \/\/ size in uint32_t units of read_order_bitmap$/;"	m	struct:parser_priv	file:	access:public
read_stream_font	.\libass\ass_font.c	/^read_stream_font(FT_Stream stream, unsigned long offset, unsigned char *buffer,$/;"	f	file:	signature:(FT_Stream stream, unsigned long offset, unsigned char *buffer, unsigned long count)
realloc_bitmap	.\libass\ass_bitmap.c	/^bool realloc_bitmap(const BitmapEngine *engine, Bitmap *bm, int w, int h)$/;"	f	signature:(const BitmapEngine *engine, Bitmap *bm, int w, int h)
realloc_bitmap	.\libass\ass_bitmap.h	/^bool realloc_bitmap(const BitmapEngine *engine, Bitmap *bm, int w, int h);$/;"	p	signature:(const BitmapEngine *engine, Bitmap *bm, int w, int h)
rect	.\libass\ass_render.h	/^    ASS_Rect rect, rect_o;$/;"	m	struct:__anon44	access:public
rect_o	.\libass\ass_render.h	/^    ASS_Rect rect, rect_o;$/;"	m	struct:__anon44	access:public
rectangle_combine	.\libass\ass_render.c	/^static inline void rectangle_combine(ASS_Rect *rect, const Bitmap *bm, int x, int y)$/;"	f	file:	signature:(ASS_Rect *rect, const Bitmap *bm, int x, int y)
rectangle_reset	.\libass\ass_outline.h	/^static inline void rectangle_reset(ASS_Rect *rect)$/;"	f	signature:(ASS_Rect *rect)
rectangle_update	.\libass\ass_outline.h	/^static inline void rectangle_update(ASS_Rect *rect,$/;"	f	signature:(ASS_Rect *rect, int32_t x_min, int32_t y_min, int32_t x_max, int32_t y_max)
ref_count	.\libass\ass_cache.c	/^    size_t size, ref_count;$/;"	m	struct:cache_item	file:	access:public
ref_count	.\libass\ass_directwrite.c	/^    LONG ref_count;$/;"	m	struct:FallbackLogTextRenderer	file:	access:public
ref_count	.\libass\ass_render.h	/^    size_t ref_count;$/;"	m	struct:__anon40	access:public
render_and_combine_glyphs	.\libass\ass_render.c	/^static void render_and_combine_glyphs(ASS_Renderer *render_priv,$/;"	f	file:	signature:(ASS_Renderer *render_priv, double device_x, double device_y)
render_glyph	.\libass\ass_render.c	/^render_glyph(ASS_Renderer *render_priv, Bitmap *bm, int dst_x, int dst_y,$/;"	f	file:	signature:(ASS_Renderer *render_priv, Bitmap *bm, int dst_x, int dst_y, uint32_t color, uint32_t color2, int brk, ASS_Image **tail, unsigned type, CompositeHashValue *source)
render_glyph_i	.\libass\ass_render.c	/^static ASS_Image **render_glyph_i(ASS_Renderer *render_priv,$/;"	f	file:	signature:(ASS_Renderer *render_priv, Bitmap *bm, int dst_x, int dst_y, uint32_t color, uint32_t color2, int brk, ASS_Image **tail, unsigned type, CompositeHashValue *source)
render_id	.\libass\ass_render.h	/^    int render_id;$/;"	m	struct:ass_renderer	access:public
render_id	.\libass\ass_render.h	/^    int render_id;$/;"	m	struct:render_priv	access:public
render_priv	.\libass\ass_render.h	/^typedef struct render_priv {$/;"	s
render_priv	.\libass\ass_types.h	/^    ASS_RenderPriv *render_priv;$/;"	m	struct:ass_event	access:public
render_priv::height	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:render_priv	access:public
render_priv::left	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:render_priv	access:public
render_priv::render_id	.\libass\ass_render.h	/^    int render_id;$/;"	m	struct:render_priv	access:public
render_priv::top	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:render_priv	access:public
render_priv::width	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:render_priv	access:public
render_text	.\libass\ass_render.c	/^static ASS_Image *render_text(ASS_Renderer *render_priv)$/;"	f	file:	signature:(ASS_Renderer *render_priv)
reorder_text	.\libass\ass_render.c	/^static void reorder_text(ASS_Renderer *render_priv)$/;"	f	file:	signature:(ASS_Renderer *render_priv)
reset_render_context	.\libass\ass_render.c	/^void reset_render_context(ASS_Renderer *render_priv, ASS_Style *style)$/;"	f	signature:(ASS_Renderer *render_priv, ASS_Style *style)
reset_render_context	.\libass\ass_render.h	/^void reset_render_context(ASS_Renderer *render_priv, ASS_Style *style);$/;"	p	signature:(ASS_Renderer *render_priv, ASS_Style *style)
resize_read_order_bitmap	.\libass\ass.c	/^static int resize_read_order_bitmap(ASS_Track *track, int max_id)$/;"	f	file:	signature:(ASS_Track *track, int max_id)
resolve_base_direction	.\libass\ass_shaper.c	/^FriBidiParType resolve_base_direction(int enc)$/;"	f	signature:(int enc)
resolve_base_direction	.\libass\ass_shaper.h	/^FriBidiParType resolve_base_direction(int font_encoding);$/;"	p	signature:(int font_encoding)
result	.\libass\ass_outline.c	/^    ASS_Outline *result[2];   \/\/ result outlines$/;"	m	struct:__anon28	file:	access:public
result	.\libass\ass_render.h	/^    ASS_Image result;$/;"	m	struct:__anon40	access:public
retrieve_glyphs	.\libass\ass_render.c	/^static void retrieve_glyphs(ASS_Renderer *render_priv)$/;"	f	file:	signature:(ASS_Renderer *render_priv)
right_margin	.\libass\ass_render.h	/^    int right_margin;$/;"	m	struct:__anon41	access:public
rot_key	.\libass\ass_utils.h	/^static inline int rot_key(double a)$/;"	f	signature:(double a)
rskip_spaces	.\libass\ass_utils.c	/^void rskip_spaces(char **str, char *limit)$/;"	f	signature:(char **str, char *limit)
rskip_spaces	.\libass\ass_utils.h	/^void rskip_spaces(char **str, char *limit);$/;"	p	signature:(char **str, char *limit)
scale	.\libass\ass_drawing.h	/^    int scale;  \/\/ scale (1-64) for subpixel accuracy$/;"	m	struct:__anon25	access:public
scale	.\libass\ass_rasterizer.h	/^    int32_t a, b, scale, flags;$/;"	m	struct:segment	access:public
scale_x	.\libass\ass_drawing.h	/^    double scale_x;      \/\/ FontScaleX$/;"	m	struct:__anon25	access:public
scale_x	.\libass\ass_font.h	/^    double scale_x, scale_y;    \/\/ current transform$/;"	m	struct:ass_font	access:public
scale_x	.\libass\ass_render.h	/^    double scale_x, scale_y;$/;"	m	struct:__anon47	access:public
scale_x	.\libass\ass_render.h	/^    double scale_x, scale_y;$/;"	m	struct:glyph_info	access:public
scale_y	.\libass\ass_drawing.h	/^    double scale_y;      \/\/ FontScaleY$/;"	m	struct:__anon25	access:public
scale_y	.\libass\ass_font.h	/^    double scale_x, scale_y;    \/\/ current transform$/;"	m	struct:ass_font	access:public
scale_y	.\libass\ass_render.h	/^    double scale_x, scale_y;$/;"	m	struct:__anon47	access:public
scale_y	.\libass\ass_render.h	/^    double scale_x, scale_y;$/;"	m	struct:glyph_info	access:public
scan_fonts	.\libass\ass_directwrite.c	/^static void scan_fonts(IDWriteFactory *factory,$/;"	f	file:	signature:(IDWriteFactory *factory, ASS_FontProvider *provider)
scan_fonts	.\libass\ass_fontconfig.c	/^static void scan_fonts(FcConfig *config, ASS_FontProvider *provider)$/;"	f	file:	signature:(FcConfig *config, ASS_FontProvider *provider)
script	.\libass\ass_render.h	/^    hb_script_t script;$/;"	m	struct:glyph_info	access:public
script	.\libass\ass_render.h	/^    int script;$/;"	m	struct:glyph_info	access:public
script_to_language	.\libass\ass_shaper.c	/^static hb_language_t script_to_language(hb_script_t script)$/;"	f	file:	signature:(hb_script_t script)
scroll_direction	.\libass\ass_render.h	/^    } scroll_direction;         \/\/ for EVENT_HSCROLL, EVENT_VSCROLL$/;"	m	struct:__anon47	typeref:enum:__anon47::__anon49	access:public
scroll_shift	.\libass\ass_render.h	/^    int scroll_shift;$/;"	m	struct:__anon47	access:public
segment	.\libass\ass_rasterizer.h	/^struct segment {$/;"	s
segment::a	.\libass\ass_rasterizer.h	/^    int32_t a, b, scale, flags;$/;"	m	struct:segment	access:public
segment::b	.\libass\ass_rasterizer.h	/^    int32_t a, b, scale, flags;$/;"	m	struct:segment	access:public
segment::c	.\libass\ass_rasterizer.h	/^    int64_t c;$/;"	m	struct:segment	access:public
segment::flags	.\libass\ass_rasterizer.h	/^    int32_t a, b, scale, flags;$/;"	m	struct:segment	access:public
segment::scale	.\libass\ass_rasterizer.h	/^    int32_t a, b, scale, flags;$/;"	m	struct:segment	access:public
segment::x_max	.\libass\ass_rasterizer.h	/^    int32_t x_min, x_max, y_min, y_max;$/;"	m	struct:segment	access:public
segment::x_min	.\libass\ass_rasterizer.h	/^    int32_t x_min, x_max, y_min, y_max;$/;"	m	struct:segment	access:public
segment::y_max	.\libass\ass_rasterizer.h	/^    int32_t x_min, x_max, y_min, y_max;$/;"	m	struct:segment	access:public
segment::y_min	.\libass\ass_rasterizer.h	/^    int32_t x_min, x_max, y_min, y_max;$/;"	m	struct:segment	access:public
segment_check_bottom	.\libass\ass_rasterizer.c	/^static inline int segment_check_bottom(const struct segment *line, int32_t y)$/;"	f	file:	signature:(const struct segment *line, int32_t y)
segment_check_left	.\libass\ass_rasterizer.c	/^static inline int segment_check_left(const struct segment *line, int32_t x)$/;"	f	file:	signature:(const struct segment *line, int32_t x)
segment_check_right	.\libass\ass_rasterizer.c	/^static inline int segment_check_right(const struct segment *line, int32_t x)$/;"	f	file:	signature:(const struct segment *line, int32_t x)
segment_check_top	.\libass\ass_rasterizer.c	/^static inline int segment_check_top(const struct segment *line, int32_t y)$/;"	f	file:	signature:(const struct segment *line, int32_t y)
segment_init	.\libass\ass_rasterizer.c	/^static inline void segment_init(OutlineSegment *seg,$/;"	f	file:	signature:(OutlineSegment *seg, ASS_Vector beg, ASS_Vector end, int32_t outline_error)
segment_move_x	.\libass\ass_rasterizer.c	/^static void segment_move_x(struct segment *line, int32_t x)$/;"	f	file:	signature:(struct segment *line, int32_t x)
segment_move_y	.\libass\ass_rasterizer.c	/^static void segment_move_y(struct segment *line, int32_t y)$/;"	f	file:	signature:(struct segment *line, int32_t y)
segment_split_horz	.\libass\ass_rasterizer.c	/^static void segment_split_horz(struct segment *line, struct segment *next, int32_t x)$/;"	f	file:	signature:(struct segment *line, struct segment *next, int32_t x)
segment_split_vert	.\libass\ass_rasterizer.c	/^static void segment_split_vert(struct segment *line, struct segment *next, int32_t y)$/;"	f	file:	signature:(struct segment *line, struct segment *next, int32_t y)
segment_subdivide	.\libass\ass_rasterizer.c	/^static inline bool segment_subdivide(const OutlineSegment *seg,$/;"	f	file:	signature:(const OutlineSegment *seg, ASS_Vector beg, ASS_Vector pt)
segments	.\libass\ass_outline.h	/^    char *segments;$/;"	m	struct:__anon35	access:public
select_font	.\libass\ass_fontselect.c	/^static char *select_font(ASS_FontSelector *priv, ASS_Library *library,$/;"	f	file:	signature:(ASS_FontSelector *priv, ASS_Library *library, const char *family, unsigned bold, unsigned italic, int *index, char **postscript_name, int *uid, ASS_FontStream *stream, uint32_t code)
selective_style_overrides	.\libass\ass_render.h	/^    int selective_style_overrides; \/\/ ASS_OVERRIDE_* flags$/;"	m	struct:__anon41	access:public
set_default_style	.\libass\ass.c	/^static void set_default_style(ASS_Style *style)$/;"	f	file:	signature:(ASS_Style *style)
set_run_features	.\libass\ass_shaper.c	/^static void set_run_features(ASS_Shaper *shaper, GlyphInfo *info)$/;"	f	file:	signature:(ASS_Shaper *shaper, GlyphInfo *info)
settings	.\libass\ass_render.h	/^    ASS_Settings settings;$/;"	m	struct:ass_renderer	access:public
shadow_x	.\libass\ass_render.h	/^    double shadow_x;$/;"	m	struct:__anon47	access:public
shadow_x	.\libass\ass_render.h	/^    double shadow_x;$/;"	m	struct:glyph_info	access:public
shadow_y	.\libass\ass_render.h	/^    double shadow_y;$/;"	m	struct:__anon47	access:public
shadow_y	.\libass\ass_render.h	/^    double shadow_y;$/;"	m	struct:glyph_info	access:public
shape_fribidi	.\libass\ass_shaper.c	/^static void shape_fribidi(ASS_Shaper *shaper, GlyphInfo *glyphs, size_t len)$/;"	f	file:	signature:(ASS_Shaper *shaper, GlyphInfo *glyphs, size_t len)
shape_harfbuzz	.\libass\ass_shaper.c	/^static void shape_harfbuzz(ASS_Shaper *shaper, GlyphInfo *glyphs, size_t len)$/;"	f	file:	signature:(ASS_Shaper *shaper, GlyphInfo *glyphs, size_t len)
shape_harfbuzz_process_run	.\libass\ass_shaper.c	/^shape_harfbuzz_process_run(GlyphInfo *glyphs, hb_buffer_t *buf, int offset)$/;"	f	file:	signature:(GlyphInfo *glyphs, hb_buffer_t *buf, int offset)
shape_run_id	.\libass\ass_render.h	/^    int shape_run_id;$/;"	m	struct:glyph_info	access:public
shaper	.\libass\ass_render.h	/^    ASS_Shaper *shaper;$/;"	m	struct:ass_renderer	access:public
shaper	.\libass\ass_render.h	/^    ASS_ShapingLevel shaper;$/;"	m	struct:__anon41	access:public
shaper_priv	.\libass\ass_font.h	/^    ASS_ShaperFontData *shaper_priv;$/;"	m	struct:ass_font	access:public
shaping_level	.\libass\ass_shaper.c	/^    ASS_ShapingLevel shaping_level;$/;"	m	struct:ass_shaper	file:	access:public
shift_bitmap	.\libass\ass_bitmap.c	/^void shift_bitmap(Bitmap *bm, int shift_x, int shift_y)$/;"	f	signature:(Bitmap *bm, int shift_x, int shift_y)
shift_bitmap	.\libass\ass_bitmap.h	/^void shift_bitmap(Bitmap *bm, int shift_x, int shift_y);$/;"	p	signature:(Bitmap *bm, int shift_x, int shift_y)
shift_direction	.\libass\ass_render.h	/^    int shift_direction;$/;"	m	struct:__anon42	access:public
shift_event	.\libass\ass_render.c	/^shift_event(ASS_Renderer *render_priv, EventImages *ei, int shift)$/;"	f	file:	signature:(ASS_Renderer *render_priv, EventImages *ei, int shift)
shrink_func	.\libass\ass_blur.c	/^static inline int16_t shrink_func(int16_t p1p, int16_t p1n,$/;"	f	file:	signature:(int16_t p1p, int16_t p1n, int16_t z0p, int16_t z0n, int16_t n1p, int16_t n1n)
shrink_horz	.\libass\ass_bitmap.h	/^    FilterFunc shrink_horz, shrink_vert;$/;"	m	struct:__anon7	access:public
shrink_horz	.\libass\ass_func_template.h	/^void DECORATE(shrink_horz)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
shrink_vert	.\libass\ass_bitmap.h	/^    FilterFunc shrink_horz, shrink_vert;$/;"	m	struct:__anon7	access:public
shrink_vert	.\libass\ass_func_template.h	/^void DECORATE(shrink_vert)(int16_t *dst, const int16_t *src,$/;"	p	signature:(int16_t *dst, const int16_t *src, uintptr_t src_width, uintptr_t src_height)
size	.\libass\ass_cache.c	/^    size_t size, ref_count;$/;"	m	struct:cache_item	file:	access:public
size	.\libass\ass_font.h	/^    double size;$/;"	m	struct:ass_font	access:public
size	.\libass\ass_library.h	/^    int size;$/;"	m	struct:__anon26	access:public
size	.\libass\ass_rasterizer.h	/^    size_t size[2], capacity[2];$/;"	m	struct:__anon39	access:public
skip	.\libass\ass_render.h	/^    unsigned skip;              \/\/ skip glyph when layouting text$/;"	m	struct:glyph_info	access:public
skip_spaces	.\libass\ass_utils.c	/^void skip_spaces(char **str)$/;"	f	signature:(char **str)
skip_spaces	.\libass\ass_utils.h	/^void skip_spaces(char **str);$/;"	p	signature:(char **str)
slant	.\libass\ass_fontselect.c	/^    int slant;$/;"	m	struct:font_info	file:	access:public
slant	.\libass\ass_fontselect.h	/^    int slant;          \/\/ Font slant value from FONT_SLANT_*$/;"	m	struct:ass_font_provider_meta_data	access:public
source	.\libass\ass_render.h	/^    CompositeHashValue *source;$/;"	m	struct:__anon40	access:public
split_cos	.\libass\ass_outline.c	/^    double split_cos;$/;"	m	struct:__anon28	file:	access:public
start	.\libass\ass_parse.c	/^    char *start, *end;$/;"	m	struct:arg	file:	access:public
startPosition	.\libass\dwrite_c.h	/^  UINT32 startPosition;$/;"	m	struct:DWRITE_TEXT_RANGE	access:public
start_segment	.\libass\ass_outline.c	/^static bool start_segment(StrokerState *str, ASS_Vector pt,$/;"	f	file:	signature:(StrokerState *str, ASS_Vector pt, ASS_DVector normal, int dir)
state	.\libass\ass.c	/^    ParserState state;$/;"	m	struct:parser_priv	file:	access:public
state	.\libass\ass_render.h	/^    RenderContext state;$/;"	m	struct:ass_renderer	access:public
storage_height	.\libass\ass_render.h	/^    int storage_height;         \/\/ video height before any rescaling$/;"	m	struct:__anon41	access:public
storage_width	.\libass\ass_render.h	/^    int storage_width;          \/\/ video width before any rescaling$/;"	m	struct:__anon41	access:public
stream	.\libass\ass_directwrite.c	/^    IDWriteFontFileStream *stream;$/;"	m	struct:__anon22	file:	access:public
stride	.\libass\ass.h	/^    int stride;                 \/\/ Bitmap stride$/;"	m	struct:ass_image	access:public
stride	.\libass\ass_bitmap.h	/^    int stride;$/;"	m	struct:__anon8	access:public
stride	.\profile\profile.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
stride	.\test\test.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
strikethroughPosition	.\libass\dwrite_c.h	/^  INT16  strikethroughPosition;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
strikethroughThickness	.\libass\dwrite_c.h	/^  UINT16 strikethroughThickness;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
string2timecode	.\libass\ass.c	/^static long long string2timecode(ASS_Library *library, char *p)$/;"	f	file:	signature:(ASS_Library *library, char *p)
stripe_pack	.\libass\ass_bitmap.h	/^    Convert16to8Func stripe_pack;$/;"	m	struct:__anon7	access:public
stripe_pack	.\libass\ass_func_template.h	/^void DECORATE(stripe_pack)(uint8_t *dst, ptrdiff_t dst_stride, const int16_t *src,$/;"	p	signature:(uint8_t *dst, ptrdiff_t dst_stride, const int16_t *src, uintptr_t width, uintptr_t height)
stripe_unpack	.\libass\ass_bitmap.h	/^    Convert8to16Func stripe_unpack;$/;"	m	struct:__anon7	access:public
stripe_unpack	.\libass\ass_func_template.h	/^void DECORATE(stripe_unpack)(int16_t *dst, const uint8_t *src, ptrdiff_t src_stride,$/;"	p	signature:(int16_t *dst, const uint8_t *src, ptrdiff_t src_stride, uintptr_t width, uintptr_t height)
strndup	.\libass\ass_utils.h	57;"	d
struc	.\libass\x86\rasterizer.asm	/^struc line$/;"	l
style	.\libass\ass_render.h	/^    ASS_Style *style;$/;"	m	struct:__anon47	access:public
style_format	.\libass\ass_types.h	/^    char *style_format;     \/\/ style format line (everything after "Format: ")$/;"	m	struct:ass_track	access:public
style_overrides	.\libass\ass_library.h	/^    char **style_overrides;$/;"	m	struct:ass_library	access:public
styles	.\libass\ass_types.h	/^    ASS_Style *styles;    \/\/ array of styles, max_styles length, n_styles used$/;"	m	struct:ass_track	access:public
sub_bitmaps	.\libass\ass_bitmap.h	/^    BitmapBlendFunc add_bitmaps, sub_bitmaps;$/;"	m	struct:__anon7	access:public
sub_bitmaps	.\libass\ass_func_template.h	/^void DECORATE(sub_bitmaps)(uint8_t *dst, intptr_t dst_stride,$/;"	p	signature:(uint8_t *dst, intptr_t dst_stride, uint8_t *src, intptr_t src_stride, intptr_t height, intptr_t width)
sub_recode	.\libass\ass.c	/^static char *sub_recode(ASS_Library *library, char *data, size_t size,$/;"	f	file:	signature:(ASS_Library *library, char *data, size_t size, char *codepage)
symbol	.\libass\ass_render.h	/^    unsigned symbol;$/;"	m	struct:glyph_info	access:public
tag	.\libass\ass_parse.c	294;"	d	file:
test_and_set_read_order_bit	.\libass\ass.c	/^static int test_and_set_read_order_bit(ASS_Track *track, int id)$/;"	f	file:	signature:(ASS_Track *track, int id)
text	.\libass\ass_drawing.h	/^    char *text; \/\/ drawing string$/;"	m	struct:__anon25	access:public
text_info	.\libass\ass_render.h	/^    TextInfo text_info;$/;"	m	struct:ass_renderer	access:public
tile	.\libass\ass_rasterizer.h	/^    uint8_t *tile;$/;"	m	struct:__anon39	access:public
tile_order	.\libass\ass_bitmap.h	/^    int tile_order;  \/\/ log2(tile_size)$/;"	m	struct:__anon7	access:public
time	.\libass\ass_render.h	/^    long long time;             \/\/ frame's timestamp, ms$/;"	m	struct:ass_renderer	access:public
to	.\libass\ass_fontselect.h	/^    const char *to;$/;"	m	struct:ass_font_mapping	access:public
token_check_values	.\libass\ass_drawing.c	/^static int token_check_values(ASS_DrawingToken *token, int i, int type)$/;"	f	file:	signature:(ASS_DrawingToken *token, int i, int type)
tokens	.\libass\ass_drawing.h	/^    ASS_DrawingToken *tokens;    \/\/ tokenized drawing$/;"	m	struct:__anon25	access:public
top	.\libass\ass_bitmap.h	/^    int left, top;$/;"	m	struct:__anon8	access:public
top	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:__anon42	access:public
top	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:render_priv	access:public
top_margin	.\libass\ass_render.h	/^    int top_margin;             \/\/ height of top margin. Everything except toptitles is shifted down by top_margin.$/;"	m	struct:__anon41	access:public
track	.\libass\ass_render.h	/^    ASS_Track *track;$/;"	m	struct:ass_renderer	access:public
track_type	.\libass\ass_types.h	/^    } track_type;$/;"	m	struct:ass_track	typeref:enum:ass_track::__anon54	access:public
transform_3d	.\libass\ass_render.c	/^transform_3d(ASS_Vector shift, ASS_Outline *outline, int n_outlines,$/;"	f	file:	signature:(ASS_Vector shift, ASS_Outline *outline, int n_outlines, double frx, double fry, double frz, double fax, double fay, double scale, int yshift)
translate_point	.\libass\ass_drawing.c	/^static inline void translate_point(ASS_Drawing *drawing, ASS_Vector *point)$/;"	f	file:	signature:(ASS_Drawing *drawing, ASS_Vector *point)
treat_family_as_pattern	.\libass\ass_render.h	/^    int treat_family_as_pattern;$/;"	m	struct:__anon47	access:public
treat_fontname_as_pattern	.\libass\ass_types.h	/^    int treat_fontname_as_pattern;$/;"	m	struct:ass_style	access:public
trim_whitespace	.\libass\ass_render.c	/^static void trim_whitespace(ASS_Renderer *render_priv)$/;"	f	file:	signature:(ASS_Renderer *render_priv)
type	.\libass\ass.h	/^    } type;$/;"	m	struct:ass_image	typeref:enum:ass_image::__anon2	access:public
type	.\libass\ass_cache.h	/^    } type;$/;"	m	struct:bitmap_hash_key	typeref:enum:bitmap_hash_key::__anon16	access:public
type	.\libass\ass_cache.h	/^    } type;$/;"	m	struct:outline_hash_key	typeref:enum:outline_hash_key::__anon14	access:public
type	.\libass\ass_drawing.h	/^    ASS_TokenType type;$/;"	m	struct:ass_drawing_token	access:public
u	.\libass\ass_cache.h	/^    } u;$/;"	m	struct:bitmap_hash_key	typeref:union:bitmap_hash_key::__anon17	access:public
u	.\libass\ass_cache.h	/^    } u;$/;"	m	struct:outline_hash_key	typeref:union:outline_hash_key::__anon15	access:public
uid	.\libass\ass_fontselect.c	/^    int uid;            \/\/ unique font face id$/;"	m	struct:font_info	file:	access:public
uid	.\libass\ass_fontselect.c	/^    int uid;$/;"	m	struct:font_selector	file:	access:public
underlinePosition	.\libass\dwrite_c.h	/^  INT16  underlinePosition;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
underlineThickness	.\libass\dwrite_c.h	/^  UINT16 underlineThickness;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
update_border_line16	.\libass\ass_rasterizer_c.c	/^static inline void update_border_line16(int16_t res[16],$/;"	f	file:	signature:(int16_t res[16], int16_t abs_a, const int16_t va[16], int16_t b, int16_t abs_b, int16_t c, int up, int dn)
update_border_line32	.\libass\ass_rasterizer_c.c	/^static inline void update_border_line32(int16_t res[32],$/;"	f	file:	signature:(int16_t res[32], int16_t abs_a, const int16_t va[32], int16_t b, int16_t abs_b, int16_t c, int up, int dn)
update_font	.\libass\ass_parse.c	/^void update_font(ASS_Renderer *render_priv)$/;"	f	signature:(ASS_Renderer *render_priv)
update_font	.\libass\ass_parse.h	/^void update_font(ASS_Renderer *render_priv);$/;"	p	signature:(ASS_Renderer *render_priv)
update_hb_size	.\libass\ass_shaper.c	/^static void update_hb_size(hb_font_t *hb_font, FT_Face face)$/;"	f	file:	signature:(hb_font_t *hb_font, FT_Face face)
use_margins	.\libass\ass_render.h	/^    int use_margins;            \/\/ 0 - place all subtitles inside original frame$/;"	m	struct:__anon41	access:public
user_override_style	.\libass\ass_render.h	/^    ASS_Style user_override_style;$/;"	m	struct:ass_renderer	access:public
v	.\libass\ass_font.h	/^    FT_Vector v;                \/\/ current shift$/;"	m	struct:ass_font	access:public
v	.\libass\ass_outline.c	/^    ASS_DVector v;$/;"	m	struct:__anon27	file:	access:public
valid	.\libass\ass_cache.h	/^    bool valid;$/;"	m	struct:__anon10	access:public
valid	.\libass\ass_cache.h	/^    bool valid;$/;"	m	struct:__anon12	access:public
value_size	.\libass\ass_cache.h	/^    size_t value_size;$/;"	m	struct:__anon21	access:public
value_to_item	.\libass\ass_cache.c	/^static inline CacheItem *value_to_item(void *value)$/;"	f	file:	signature:(void *value)
vec_crs	.\libass\ass_outline.c	/^static inline double vec_crs(ASS_DVector vec1, ASS_DVector vec2)$/;"	f	file:	signature:(ASS_DVector vec1, ASS_DVector vec2)
vec_dot	.\libass\ass_outline.c	/^static inline double vec_dot(ASS_DVector vec1, ASS_DVector vec2)$/;"	f	file:	signature:(ASS_DVector vec1, ASS_DVector vec2)
vec_len	.\libass\ass_outline.c	/^static inline double vec_len(ASS_DVector vec)$/;"	f	file:	signature:(ASS_DVector vec)
vertical	.\libass\ass_font.h	/^    int vertical;               \/\/ @font vertical layout$/;"	m	struct:ass_font_desc	access:public
vertical	.\libass\ass_shaper.c	/^    int vertical;$/;"	m	struct:ass_shaper_metrics_data	file:	access:public
vtbl	.\libass\ass_directwrite.c	/^    IDWriteTextRendererVtbl vtbl;$/;"	m	struct:FallbackLogTextRenderer	file:	access:public
w	.\libass\ass.h	/^    int w, h;                   \/\/ Bitmap width\/height$/;"	m	struct:ass_image	access:public
w	.\libass\ass_bitmap.h	/^    int w, h;                   \/\/ width, height$/;"	m	struct:__anon8	access:public
weight	.\libass\ass_fontselect.c	/^    int weight;         \/\/ TrueType scale, 100-900$/;"	m	struct:font_info	file:	access:public
weight	.\libass\ass_fontselect.h	/^    int weight;         \/\/ Font weight in TrueType scale, 100-900$/;"	m	struct:ass_font_provider_meta_data	access:public
width	.\libass\ass_fontselect.c	/^    int width;$/;"	m	struct:font_info	file:	access:public
width	.\libass\ass_fontselect.h	/^    int width;          \/\/ Font weight in percent, normally 100$/;"	m	struct:ass_font_provider_meta_data	access:public
width	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:__anon42	access:public
width	.\libass\ass_render.h	/^    int top, height, left, width;$/;"	m	struct:render_priv	access:public
width	.\libass\ass_render.h	/^    int width, height;          \/\/ screen dimensions$/;"	m	struct:ass_renderer	access:public
width	.\profile\profile.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
width	.\test\test.c	/^    int width, height, stride;$/;"	m	struct:image_s	file:	access:public
words_15_6	.\libass\x86\blur.asm	/^words_15_6: times 8 dw 15, 6$/;"	l
words_255	.\libass\x86\blend_bitmaps.asm	/^words_255: dw 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF$/;"	d
words_dither0	.\libass\x86\blur.asm	/^words_dither0: times 8 dw  8, 40$/;"	l
words_dither1	.\libass\x86\blur.asm	/^words_dither1: times 8 dw 56, 24$/;"	l
words_index	.\libass\x86\rasterizer.asm	/^words_index: dw 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F$/;"	d
words_one	.\libass\x86\blur.asm	/^words_one: times 16 dw 1$/;"	l
words_sign	.\libass\x86\blur.asm	/^words_sign: times 16 dw 0x8000$/;"	l
words_tile16	.\libass\x86\rasterizer.asm	/^words_tile16: times 16 dw 1024$/;"	l
words_tile32	.\libass\x86\rasterizer.asm	/^words_tile32: times 16 dw 512$/;"	l
words_zero	.\libass\x86\blur.asm	/^words_zero: times 16 dw 0$/;"	l
wrap_lines_smart	.\libass\ass_render.c	/^wrap_lines_smart(ASS_Renderer *render_priv, double max_text_width)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double max_text_width)
wrap_style	.\libass\ass_render.h	/^    int wrap_style;$/;"	m	struct:__anon47	access:public
write_png	.\test\test.c	/^static void write_png(char *fname, image_t *img)$/;"	f	file:	signature:(char *fname, image_t *img)
x	.\libass\ass_cache.h	/^    int x, y;$/;"	m	struct:__anon18	access:public
x	.\libass\ass_outline.h	/^    double x, y;$/;"	m	struct:__anon31	access:public
x	.\libass\ass_outline.h	/^    int32_t x, y;$/;"	m	struct:__anon30	access:public
x	.\libass\ass_render.h	/^    int x, y;$/;"	m	struct:__anon44	access:public
x0	.\libass\ass_render.h	/^    int x0;$/;"	m	struct:__anon51	access:public
x1	.\libass\ass_render.h	/^    int x1;$/;"	m	struct:__anon51	access:public
x2scr	.\libass\ass_render.c	/^static double x2scr(ASS_Renderer *render_priv, double x)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double x)
x2scr_pos	.\libass\ass_render.c	/^static double x2scr_pos(ASS_Renderer *render_priv, double x)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double x)
x2scr_pos_scaled	.\libass\ass_render.c	/^static double x2scr_pos_scaled(ASS_Renderer *render_priv, double x)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double x)
x2scr_scaled	.\libass\ass_render.c	/^static double x2scr_scaled(ASS_Renderer *render_priv, double x)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double x)
xHeight	.\libass\dwrite_c.h	/^  UINT16 xHeight;$/;"	m	struct:DWRITE_FONT_METRICS	access:public
x_max	.\libass\ass_outline.h	/^    double x_min, y_min, x_max, y_max;$/;"	m	struct:__anon33	access:public
x_max	.\libass\ass_outline.h	/^    int32_t x_min, y_min, x_max, y_max;$/;"	m	struct:__anon32	access:public
x_max	.\libass\ass_rasterizer.h	/^    int32_t x_min, x_max, y_min, y_max;$/;"	m	struct:segment	access:public
x_min	.\libass\ass_outline.h	/^    double x_min, y_min, x_max, y_max;$/;"	m	struct:__anon33	access:public
x_min	.\libass\ass_outline.h	/^    int32_t x_min, y_min, x_max, y_max;$/;"	m	struct:__anon32	access:public
x_min	.\libass\ass_rasterizer.h	/^    int32_t x_min, x_max, y_min, y_max;$/;"	m	struct:segment	access:public
xbord	.\libass\ass_outline.c	/^    double xbord, ybord;      \/\/ border sizes$/;"	m	struct:__anon28	file:	access:public
xscale	.\libass\ass_outline.c	/^    double xscale, yscale;    \/\/ inverse border sizes$/;"	m	struct:__anon28	file:	access:public
y	.\libass\ass_cache.h	/^    int x, y;$/;"	m	struct:__anon18	access:public
y	.\libass\ass_outline.h	/^    double x, y;$/;"	m	struct:__anon31	access:public
y	.\libass\ass_outline.h	/^    int32_t x, y;$/;"	m	struct:__anon30	access:public
y	.\libass\ass_render.h	/^    int x, y;$/;"	m	struct:__anon44	access:public
y0	.\libass\ass_render.h	/^    int y0;$/;"	m	struct:__anon51	access:public
y1	.\libass\ass_render.h	/^    int y1;$/;"	m	struct:__anon51	access:public
y2scr	.\libass\ass_render.c	/^static double y2scr(ASS_Renderer *render_priv, double y)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double y)
y2scr_pos	.\libass\ass_render.c	/^static double y2scr_pos(ASS_Renderer *render_priv, double y)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double y)
y2scr_sub	.\libass\ass_render.c	/^static double y2scr_sub(ASS_Renderer *render_priv, double y)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double y)
y2scr_top	.\libass\ass_render.c	/^static double y2scr_top(ASS_Renderer *render_priv, double y)$/;"	f	file:	signature:(ASS_Renderer *render_priv, double y)
y_max	.\libass\ass_outline.h	/^    double x_min, y_min, x_max, y_max;$/;"	m	struct:__anon33	access:public
y_max	.\libass\ass_outline.h	/^    int32_t x_min, y_min, x_max, y_max;$/;"	m	struct:__anon32	access:public
y_max	.\libass\ass_rasterizer.h	/^    int32_t x_min, x_max, y_min, y_max;$/;"	m	struct:segment	access:public
y_min	.\libass\ass_outline.h	/^    double x_min, y_min, x_max, y_max;$/;"	m	struct:__anon33	access:public
y_min	.\libass\ass_outline.h	/^    int32_t x_min, y_min, x_max, y_max;$/;"	m	struct:__anon32	access:public
y_min	.\libass\ass_rasterizer.h	/^    int32_t x_min, x_max, y_min, y_max;$/;"	m	struct:segment	access:public
ybord	.\libass\ass_outline.c	/^    double xbord, ybord;      \/\/ border sizes$/;"	m	struct:__anon28	file:	access:public
yscale	.\libass\ass_outline.c	/^    double xscale, yscale;    \/\/ inverse border sizes$/;"	m	struct:__anon28	file:	access:public
zero_line	.\libass\ass_blur.c	/^static int16_t zero_line[STRIPE_WIDTH];$/;"	v	file:
